"""
Ce fichier contient les classes des projectiles et des items qui peuvent être lancés.
"""

from __future__ import annotations
from typing import TYPE_CHECKING
import carte as crt

# Imports des classes parentes
from .equippement import Equippement
from .anneau import Anneau
from .armure import Armure
from .heaume import Heaume
from .role import DefensifPlafond, DefensifProportion, DefensifSeuil, DefensifValeur, PompeAPV, RenforceRegenPV, PompeAPM, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal

# Imports des valeurs par défaut des paramètres
from ....commons import Element
from ...agissant.espece import Espece

# Imports utilisés uniquement dans les annotations
if TYPE_CHECKING:
    from ....labyrinthe.labyrinthe import Labyrinthe

class EquippementGenerique(Equippement):
    """Un équippement générique, avec les arguments utilisés par tous les équippements."""
    def __init__(self,labyrinthe:Labyrinthe,_poids:float,_frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        """L'initialisations des équippements. La plupart des arguments sont optionnels."""
        Equippement.__init__(self,labyrinthe,position)

class AnneauGenerique(Anneau, EquippementGenerique):
    """Un anneau générique, avec les arguments utilisés par tous les anneaux."""

class AnneauDefensifPlafond(AnneauGenerique, DefensifPlafond):
    """Un anneau défensif plafonnant les dégats."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)

class AnneauDefensifProportion(AnneauGenerique, DefensifProportion):
    """Un anneau défensif proportionnel aux dégats."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)

class AnneauDefensifSeuil(AnneauGenerique, DefensifSeuil):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)

class AnneauDefensifValeur(AnneauGenerique, DefensifValeur):
    """Un anneau défensif bloquant une valeur fixe de dégats."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)

class AnneauPompeAPV(AnneauGenerique, PompeAPV):
    """Un anneau pompant les PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)

class AnneauRenforceRegenPV(AnneauGenerique, RenforceRegenPV):
    """Un anneau renforçant la régénération des PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)

class AnneauPompeAPM(AnneauGenerique, PompeAPM):
    """Un anneau pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class AnneauRenforceRegenPM(AnneauGenerique, RenforceRegenPM):
    """Un anneau renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class AnneauAccelerateur(AnneauGenerique, Accelerateur):
    """Un anneau qui augmente la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauAnoblisseur(AnneauGenerique, Anoblisseur):
    """Un anneau qui augmente la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauElementaire(AnneauGenerique, Elementaire):
    """Un anneau qui renforce l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauTribal(AnneauGenerique, EquippementTribal):
    """Un anneau qui est dédié à une espèce."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPV(AnneauGenerique, DefensifPlafond, PompeAPV):
    """Un anneau défensif plafonnant les dégats et pompant les PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)

class AnneauDefensifPlafondRenforceRegenPV(AnneauGenerique, DefensifPlafond, RenforceRegenPV):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)

class AnneauDefensifProportionPompeAPV(AnneauGenerique, DefensifProportion, PompeAPV):
    """Un anneau défensif proportionnel aux dégats et pompant les PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)

class AnneauDefensifProportionRenforceRegenPV(AnneauGenerique, DefensifProportion, RenforceRegenPV):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)

class AnneauDefensifSeuilPompeAPV(AnneauGenerique, DefensifSeuil, PompeAPV):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)

class AnneauDefensifSeuilRenforceRegenPV(AnneauGenerique, DefensifSeuil, RenforceRegenPV):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)

class AnneauDefensifValeurPompeAPV(AnneauGenerique, DefensifValeur, PompeAPV):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)

class AnneauDefensifValeurRenforceRegenPV(AnneauGenerique, DefensifValeur, RenforceRegenPV):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)

class AnneauDefensifPlafondPompeAPM(AnneauGenerique, DefensifPlafond, PompeAPM):
    """Un anneau défensif plafonnant les dégats et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifPlafondRenforceRegenPM(AnneauGenerique, DefensifPlafond, RenforceRegenPM):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifProportionPompeAPM(AnneauGenerique, DefensifProportion, PompeAPM):
    """Un anneau défensif proportionnel aux dégats et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifProportionRenforceRegenPM(AnneauGenerique, DefensifProportion, RenforceRegenPM):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifSeuilPompeAPM(AnneauGenerique, DefensifSeuil, PompeAPM):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifSeuilRenforceRegenPM(AnneauGenerique, DefensifSeuil, RenforceRegenPM):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifValeurPompeAPM(AnneauGenerique, DefensifValeur, PompeAPM):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifValeurRenforceRegenPM(AnneauGenerique, DefensifValeur, RenforceRegenPM):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class AnneauPompeAPVPompeAPM(AnneauGenerique, PompeAPV, PompeAPM):
    """Un anneau pompant les PV et les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class AnneauPompeAPVRenforceRegenPM(AnneauGenerique, PompeAPV, RenforceRegenPM):
    """Un anneau pompant les PV et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class AnneauRenforceRegenPVPompeAPM(AnneauGenerique, RenforceRegenPV, PompeAPM):
    """Un anneau renforçant la régénération des PV et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class AnneauRenforceRegenPVRenforceRegenPM(AnneauGenerique, RenforceRegenPV, RenforceRegenPM):
    """Un anneau renforçant la régénération des PV et des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifPlafondAccelerateur(AnneauGenerique, DefensifPlafond, Accelerateur):
    """Un anneau défensif plafonnant les dégats et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifProportionAccelerateur(AnneauGenerique, DefensifProportion, Accelerateur):
    """Un anneau défensif proportionnel aux dégats et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifSeuilAccelerateur(AnneauGenerique, DefensifSeuil, Accelerateur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifValeurAccelerateur(AnneauGenerique, DefensifValeur, Accelerateur):
    """Un anneau défensif bloquant une valeur fixe de dégats et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauPompeAPVAccelerateur(AnneauGenerique, PompeAPV, Accelerateur):
    """Un anneau pompant les PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauRenforceRegenPVAccelerateur(AnneauGenerique, RenforceRegenPV, Accelerateur):
    """Un anneau renforçant la régénération des PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauPompeAPMAccelerateur(AnneauGenerique, PompeAPM, Accelerateur):
    """Un anneau pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauRenforceRegenPMAccelerateur(AnneauGenerique, RenforceRegenPM, Accelerateur):
    """Un anneau renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifPlafondAnoblisseur(AnneauGenerique, DefensifPlafond, Anoblisseur):
    """Un anneau défensif plafonnant les dégats et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifProportionAnoblisseur(AnneauGenerique, DefensifProportion, Anoblisseur):
    """Un anneau défensif proportionnel aux dégats et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifSeuilAnoblisseur(AnneauGenerique, DefensifSeuil, Anoblisseur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifValeurAnoblisseur(AnneauGenerique, DefensifValeur, Anoblisseur):
    """Un anneau défensif bloquant une valeur fixe de dégats et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauPompeAPVAnoblisseur(AnneauGenerique, PompeAPV, Anoblisseur):
    """Un anneau pompant les PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauRenforceRegenPVAnoblisseur(AnneauGenerique, RenforceRegenPV, Anoblisseur):
    """Un anneau renforçant la régénération des PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauPompeAPMAnoblisseur(AnneauGenerique, PompeAPM, Anoblisseur):
    """Un anneau pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauRenforceRegenPMAnoblisseur(AnneauGenerique, RenforceRegenPM, Anoblisseur):
    """Un anneau renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauAccelerateurAnoblisseur(AnneauGenerique, Accelerateur, Anoblisseur):
    """Un anneau augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifPlafondElementaire(AnneauGenerique, DefensifPlafond, Elementaire):
    """Un anneau défensif plafonnant les dégats et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionElementaire(AnneauGenerique, DefensifProportion, Elementaire):
    """Un anneau défensif proportionnel aux dégats et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilElementaire(AnneauGenerique, DefensifSeuil, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurElementaire(AnneauGenerique, DefensifValeur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauPompeAPVElementaire(AnneauGenerique, PompeAPV, Elementaire):
    """Un anneau pompant les PV et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauRenforceRegenPVElementaire(AnneauGenerique, RenforceRegenPV, Elementaire):
    """Un anneau renforçant la régénération des PV et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauPompeAPMElementaire(AnneauGenerique, PompeAPM, Elementaire):
    """Un anneau pompant les PM et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauRenforceRegenPMElementaire(AnneauGenerique, RenforceRegenPM, Elementaire):
    """Un anneau renforçant la régénération des PM et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauAccelerateurElementaire(AnneauGenerique, Accelerateur, Elementaire):
    """Un anneau augmentant la vitesse et l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauAnoblisseurElementaire(AnneauGenerique, Anoblisseur, Elementaire):
    """Un anneau augmentant la priorité et l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondTribal(AnneauGenerique, DefensifPlafond, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionTribal(AnneauGenerique, DefensifProportion, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilTribal(AnneauGenerique, DefensifSeuil, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurTribal(AnneauGenerique, DefensifValeur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVTribal(AnneauGenerique, PompeAPV, EquippementTribal):
    """Un anneau pompant les PV et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVTribal(AnneauGenerique, RenforceRegenPV, EquippementTribal):
    """Un anneau renforçant la régénération des PV et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPMTribal(AnneauGenerique, PompeAPM, EquippementTribal):
    """Un anneau pompant les PM et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPMTribal(AnneauGenerique, RenforceRegenPM, EquippementTribal):
    """Un anneau renforçant la régénération des PM et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauAccelerateurTribal(AnneauGenerique, Accelerateur, EquippementTribal):
    """Un anneau augmentant la vitesse et l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauAnoblisseurTribal(AnneauGenerique, Anoblisseur, EquippementTribal):
    """Un anneau augmentant la priorité et l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauElementaireTribal(AnneauGenerique, Elementaire, EquippementTribal):
    """Un anneau augmentant l'affinité à un élément et l'affinité à une espèce."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        assert _element is not None
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVPompeAPM(AnneauGenerique, DefensifPlafond, PompeAPV, PompeAPM):
    """Un anneau défensif plafonnant les dégats et pompant les PV et les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifProportionPompeAPVPompeAPM(AnneauGenerique, DefensifProportion, PompeAPV, PompeAPM):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifSeuilPompeAPVPompeAPM(AnneauGenerique, DefensifSeuil, PompeAPV, PompeAPM):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifValeurPompeAPVPompeAPM(AnneauGenerique, DefensifValeur, PompeAPV, PompeAPM):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifPlafondRenforceRegenPVPompeAPM(AnneauGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifProportionRenforceRegenPVPompeAPM(AnneauGenerique, DefensifProportion, RenforceRegenPV, PompeAPM):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifSeuilRenforceRegenPVPompeAPM(AnneauGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifValeurRenforceRegenPVPompeAPM(AnneauGenerique, DefensifValeur, RenforceRegenPV, PompeAPM):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifPlafondPompeAPVRenforceRegenPM(AnneauGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM):
    """Un anneau défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifProportionPompeAPVRenforceRegenPM(AnneauGenerique, DefensifProportion, PompeAPV, RenforceRegenPM):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifSeuilPompeAPVRenforceRegenPM(AnneauGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifValeurPompeAPVRenforceRegenPM(AnneauGenerique, DefensifValeur, PompeAPV, RenforceRegenPM):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifPlafondRenforceRegenPVRenforceRegenPM(AnneauGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifProportionRenforceRegenPVRenforceRegenPM(AnneauGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifSeuilRenforceRegenPVRenforceRegenPM(AnneauGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifValeurRenforceRegenPVRenforceRegenPM(AnneauGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class AnneauDefensifPlafondPompeAPVAccelerateur(AnneauGenerique, DefensifPlafond, PompeAPV, Accelerateur):
    """Un anneau défensif plafonnant les dégats et pompant les PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifProportionPompeAPVAccelerateur(AnneauGenerique, DefensifProportion, PompeAPV, Accelerateur):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifSeuilPompeAPVAccelerateur(AnneauGenerique, DefensifSeuil, PompeAPV, Accelerateur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifValeurPompeAPVAccelerateur(AnneauGenerique, DefensifValeur, PompeAPV, Accelerateur):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifPlafondRenforceRegenPVAccelerateur(AnneauGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifProportionRenforceRegenPVAccelerateur(AnneauGenerique, DefensifProportion, RenforceRegenPV, Accelerateur):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifSeuilRenforceRegenPVAccelerateur(AnneauGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifValeurRenforceRegenPVAccelerateur(AnneauGenerique, DefensifValeur, RenforceRegenPV, Accelerateur):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifPlafondPompeAPMAccelerateur(AnneauGenerique, DefensifPlafond, PompeAPM, Accelerateur):
    """Un anneau défensif plafonnant les dégats et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifProportionPompeAPMAccelerateur(AnneauGenerique, DefensifProportion, PompeAPM, Accelerateur):
    """Un anneau défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifSeuilPompeAPMAccelerateur(AnneauGenerique, DefensifSeuil, PompeAPM, Accelerateur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifValeurPompeAPMAccelerateur(AnneauGenerique, DefensifValeur, PompeAPM, Accelerateur):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifPlafondRenforceRegenPMAccelerateur(AnneauGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifProportionRenforceRegenPMAccelerateur(AnneauGenerique, DefensifProportion, RenforceRegenPM, Accelerateur):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifSeuilRenforceRegenPMAccelerateur(AnneauGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifValeurRenforceRegenPMAccelerateur(AnneauGenerique, DefensifValeur, RenforceRegenPM, Accelerateur):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauPompeAPVPompeAPMAccelerateur(AnneauGenerique, PompeAPV, PompeAPM, Accelerateur):
    """Un anneau pompant les PV et les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauRenforceRegenPVPompeAPMAccelerateur(AnneauGenerique, RenforceRegenPV, PompeAPM, Accelerateur):
    """Un anneau renforçant la régénération des PV et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauPompeAPVRenforceRegenPMAccelerateur(AnneauGenerique, PompeAPV, RenforceRegenPM, Accelerateur):
    """Un anneau pompant les PV et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauRenforceRegenPVRenforceRegenPMAccelerateur(AnneauGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur):
    """Un anneau renforçant la régénération des PV et des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifPlafondPompeAPVAnoblisseur(AnneauGenerique, DefensifPlafond, PompeAPV, Anoblisseur):
    """Un anneau défensif plafonnant les dégats et pompant les PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifProportionPompeAPVAnoblisseur(AnneauGenerique, DefensifProportion, PompeAPV, Anoblisseur):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifSeuilPompeAPVAnoblisseur(AnneauGenerique, DefensifSeuil, PompeAPV, Anoblisseur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifValeurPompeAPVAnoblisseur(AnneauGenerique, DefensifValeur, PompeAPV, Anoblisseur):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifPlafondRenforceRegenPVAnoblisseur(AnneauGenerique, DefensifPlafond, RenforceRegenPV, Anoblisseur):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifProportionRenforceRegenPVAnoblisseur(AnneauGenerique, DefensifProportion, RenforceRegenPV, Anoblisseur):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifSeuilRenforceRegenPVAnoblisseur(AnneauGenerique, DefensifSeuil, RenforceRegenPV, Anoblisseur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifValeurRenforceRegenPVAnoblisseur(AnneauGenerique, DefensifValeur, RenforceRegenPV, Anoblisseur):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifPlafondPompeAPMAnoblisseur(AnneauGenerique, DefensifPlafond, PompeAPM, Anoblisseur):
    """Un anneau défensif plafonnant les dégats et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifProportionPompeAPMAnoblisseur(AnneauGenerique, DefensifProportion, PompeAPM, Anoblisseur):
    """Un anneau défensif proportionnel aux dégats et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifSeuilPompeAPMAnoblisseur(AnneauGenerique, DefensifSeuil, PompeAPM, Anoblisseur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifValeurPompeAPMAnoblisseur(AnneauGenerique, DefensifValeur, PompeAPM, Anoblisseur):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifPlafondRenforceRegenPMAnoblisseur(AnneauGenerique, DefensifPlafond, RenforceRegenPM, Anoblisseur):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifProportionRenforceRegenPMAnoblisseur(AnneauGenerique, DefensifProportion, RenforceRegenPM, Anoblisseur):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifSeuilRenforceRegenPMAnoblisseur(AnneauGenerique, DefensifSeuil, RenforceRegenPM, Anoblisseur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifValeurRenforceRegenPMAnoblisseur(AnneauGenerique, DefensifValeur, RenforceRegenPM, Anoblisseur):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauPompeAPVPompeAPMAnoblisseur(AnneauGenerique, PompeAPV, PompeAPM, Anoblisseur):
    """Un anneau pompant les PV et les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauRenforceRegenPVPompeAPMAnoblisseur(AnneauGenerique, RenforceRegenPV, PompeAPM, Anoblisseur):
    """Un anneau renforçant la régénération des PV et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauPompeAPVRenforceRegenPMAnoblisseur(AnneauGenerique, PompeAPV, RenforceRegenPM, Anoblisseur):
    """Un anneau pompant les PV et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauRenforceRegenPVRenforceRegenPMAnoblisseur(AnneauGenerique, RenforceRegenPV, RenforceRegenPM, Anoblisseur):
    """Un anneau renforçant la régénération des PV et des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifPlafondAccelerateurAnoblisseur(AnneauGenerique, DefensifPlafond, Accelerateur, Anoblisseur):
    """Un anneau défensif plafonnant les dégats et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifProportionAccelerateurAnoblisseur(AnneauGenerique, DefensifProportion, Accelerateur, Anoblisseur):
    """Un anneau défensif proportionnel aux dégats et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifSeuilAccelerateurAnoblisseur(AnneauGenerique, DefensifSeuil, Accelerateur, Anoblisseur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifValeurAccelerateurAnoblisseur(AnneauGenerique, DefensifValeur, Accelerateur, Anoblisseur):
    """Un anneau défensif bloquant une valeur fixe de dégats et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauPompeAPVAccelerateurAnoblisseur(AnneauGenerique, PompeAPV, Accelerateur, Anoblisseur):
    """Un anneau pompant les PV et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauRenforceRegenPVAccelerateurAnoblisseur(AnneauGenerique, RenforceRegenPV, Accelerateur, Anoblisseur):
    """Un anneau renforçant la régénération des PV et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauPompeAPMAccelerateurAnoblisseur(AnneauGenerique, PompeAPM, Accelerateur, Anoblisseur):
    """Un anneau pompant les PM et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauRenforceRegenPMAccelerateurAnoblisseur(AnneauGenerique, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un anneau renforçant la régénération des PM et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifPlafondPompeAPVElementaire(AnneauGenerique, DefensifPlafond, PompeAPV, Elementaire):
    """Un anneau défensif plafonnant les dégats et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionPompeAPVElementaire(AnneauGenerique, DefensifProportion, PompeAPV, Elementaire):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilPompeAPVElementaire(AnneauGenerique, DefensifSeuil, PompeAPV, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurPompeAPVElementaire(AnneauGenerique, DefensifValeur, PompeAPV, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondRenforceRegenPVElementaire(AnneauGenerique, DefensifPlafond, RenforceRegenPV, Elementaire):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionRenforceRegenPVElementaire(AnneauGenerique, DefensifProportion, RenforceRegenPV, Elementaire):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilRenforceRegenPVElementaire(AnneauGenerique, DefensifSeuil, RenforceRegenPV, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurRenforceRegenPVElementaire(AnneauGenerique, DefensifValeur, RenforceRegenPV, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondPompeAPMElementaire(AnneauGenerique, DefensifPlafond, PompeAPM, Elementaire):
    """Un anneau défensif plafonnant les dégats et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionPompeAPMElementaire(AnneauGenerique, DefensifProportion, PompeAPM, Elementaire):
    """Un anneau défensif proportionnel aux dégats et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilPompeAPMElementaire(AnneauGenerique, DefensifSeuil, PompeAPM, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurPompeAPMElementaire(AnneauGenerique, DefensifValeur, PompeAPM, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondRenforceRegenPMElementaire(AnneauGenerique, DefensifPlafond, RenforceRegenPM, Elementaire):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionRenforceRegenPMElementaire(AnneauGenerique, DefensifProportion, RenforceRegenPM, Elementaire):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilRenforceRegenPMElementaire(AnneauGenerique, DefensifSeuil, RenforceRegenPM, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurRenforceRegenPMElementaire(AnneauGenerique, DefensifValeur, RenforceRegenPM, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauPompeAPVPompeAPMElementaire(AnneauGenerique, PompeAPV, PompeAPM, Elementaire):
    """Un anneau pompant les PV et les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauRenforceRegenPVPompeAPMElementaire(AnneauGenerique, RenforceRegenPV, PompeAPM, Elementaire):
    """Un anneau renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauPompeAPVRenforceRegenPMElementaire(AnneauGenerique, PompeAPV, RenforceRegenPM, Elementaire):
    """Un anneau pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauRenforceRegenPVRenforceRegenPMElementaire(AnneauGenerique, RenforceRegenPV, RenforceRegenPM, Elementaire):
    """Un anneau renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondAccelerateurElementaire(AnneauGenerique, DefensifPlafond, Accelerateur, Elementaire):
    """Un anneau défensif plafonnant les dégats et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionAccelerateurElementaire(AnneauGenerique, DefensifProportion, Accelerateur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilAccelerateurElementaire(AnneauGenerique, DefensifSeuil, Accelerateur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurAccelerateurElementaire(AnneauGenerique, DefensifValeur, Accelerateur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauPompeAPVAccelerateurElementaire(AnneauGenerique, PompeAPV, Accelerateur, Elementaire):
    """Un anneau pompant les PV et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauRenforceRegenPVAccelerateurElementaire(AnneauGenerique, RenforceRegenPV, Accelerateur, Elementaire):
    """Un anneau renforçant la régénération des PV et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauPompeAPMAccelerateurElementaire(AnneauGenerique, PompeAPM, Accelerateur, Elementaire):
    """Un anneau pompant les PM et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauRenforceRegenPMAccelerateurElementaire(AnneauGenerique, RenforceRegenPM, Accelerateur, Elementaire):
    """Un anneau renforçant la régénération des PM et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondAnoblisseurElementaire(AnneauGenerique, DefensifPlafond, Anoblisseur, Elementaire):
    """Un anneau défensif plafonnant les dégats et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionAnoblisseurElementaire(AnneauGenerique, DefensifProportion, Anoblisseur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilAnoblisseurElementaire(AnneauGenerique, DefensifSeuil, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurAnoblisseurElementaire(AnneauGenerique, DefensifValeur, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauPompeAPVAnoblisseurElementaire(AnneauGenerique, PompeAPV, Anoblisseur, Elementaire):
    """Un anneau pompant les PV et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauRenforceRegenPVAnoblisseurElementaire(AnneauGenerique, RenforceRegenPV, Anoblisseur, Elementaire):
    """Un anneau renforçant la régénération des PV et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauPompeAPMAnoblisseurElementaire(AnneauGenerique, PompeAPM, Anoblisseur, Elementaire):
    """Un anneau pompant les PM et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauRenforceRegenPMAnoblisseurElementaire(AnneauGenerique, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un anneau renforçant la régénération des PM et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauAccelerateurAnoblisseurElementaire(AnneauGenerique, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau augmentant la vitesse et la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondPompeAPVTribal(AnneauGenerique, DefensifPlafond, PompeAPV, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVTribal(AnneauGenerique, DefensifProportion, PompeAPV, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVTribal(AnneauGenerique, DefensifSeuil, PompeAPV, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVTribal(AnneauGenerique, DefensifValeur, PompeAPV, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPMTribal(AnneauGenerique, DefensifPlafond, PompeAPM, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPMTribal(AnneauGenerique, DefensifProportion, PompeAPM, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPMTribal(AnneauGenerique, DefensifSeuil, PompeAPM, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPMTribal(AnneauGenerique, DefensifValeur, PompeAPM, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPMTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPM, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPMTribal(AnneauGenerique, DefensifProportion, RenforceRegenPM, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPMTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPM, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPMTribal(AnneauGenerique, DefensifValeur, RenforceRegenPM, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVPompeAPMTribal(AnneauGenerique, PompeAPV, PompeAPM, EquippementTribal):
    """Un anneau pompant les PV et les PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVPompeAPMTribal(AnneauGenerique, RenforceRegenPV, PompeAPM, EquippementTribal):
    """Un anneau renforçant la régénération des PV et pompant les PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVRenforceRegenPMTribal(AnneauGenerique, PompeAPV, RenforceRegenPM, EquippementTribal):
    """Un anneau pompant les PV et renforçant la régénération des PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVRenforceRegenPMTribal(AnneauGenerique, RenforceRegenPV, RenforceRegenPM, EquippementTribal):
    """Un anneau renforçant la régénération des PV et des PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondAccelerateurTribal(AnneauGenerique, DefensifPlafond, Accelerateur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionAccelerateurTribal(AnneauGenerique, DefensifProportion, Accelerateur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilAccelerateurTribal(AnneauGenerique, DefensifSeuil, Accelerateur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurAccelerateurTribal(AnneauGenerique, DefensifValeur, Accelerateur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVAccelerateurTribal(AnneauGenerique, PompeAPV, Accelerateur, EquippementTribal):
    """Un anneau pompant les PV et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVAccelerateurTribal(AnneauGenerique, RenforceRegenPV, Accelerateur, EquippementTribal):
    """Un anneau renforçant la régénération des PV et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPMAccelerateurTribal(AnneauGenerique, PompeAPM, Accelerateur, EquippementTribal):
    """Un anneau pompant les PM et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPMAccelerateurTribal(AnneauGenerique, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un anneau renforçant la régénération des PM et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondAnoblisseurTribal(AnneauGenerique, DefensifPlafond, Anoblisseur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionAnoblisseurTribal(AnneauGenerique, DefensifProportion, Anoblisseur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilAnoblisseurTribal(AnneauGenerique, DefensifSeuil, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurAnoblisseurTribal(AnneauGenerique, DefensifValeur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVAnoblisseurTribal(AnneauGenerique, PompeAPV, Anoblisseur, EquippementTribal):
    """Un anneau pompant les PV et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVAnoblisseurTribal(AnneauGenerique, RenforceRegenPV, Anoblisseur, EquippementTribal):
    """Un anneau renforçant la régénération des PV et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPMAnoblisseurTribal(AnneauGenerique, PompeAPM, Anoblisseur, EquippementTribal):
    """Un anneau pompant les PM et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPMAnoblisseurTribal(AnneauGenerique, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Un anneau renforçant la régénération des PM et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauAccelerateurAnoblisseurTribal(AnneauGenerique, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau augmentant la vitesse et la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondElementaireTribal(AnneauGenerique, DefensifPlafond, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionElementaireTribal(AnneauGenerique, DefensifProportion, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilElementaireTribal(AnneauGenerique, DefensifSeuil, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurElementaireTribal(AnneauGenerique, DefensifValeur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVElementaireTribal(AnneauGenerique, PompeAPV, Elementaire, EquippementTribal):
    """Un anneau pompant les PV et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVElementaireTribal(AnneauGenerique, RenforceRegenPV, Elementaire, EquippementTribal):
    """Un anneau renforçant la régénération des PV et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPMElementaireTribal(AnneauGenerique, PompeAPM, Elementaire, EquippementTribal):
    """Un anneau pompant les PM et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPMElementaireTribal(AnneauGenerique, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un anneau renforçant la régénération des PM et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauAccelerateurElementaireTribal(AnneauGenerique, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau augmentant la vitesse et l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauAnoblisseurElementaireTribal(AnneauGenerique, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau augmentant la priorité et l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVPompeAPMAccelerateur(AnneauGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur):
    """Un anneau défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifProportionPompeAPVPompeAPMAccelerateur(AnneauGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifSeuilPompeAPVPompeAPMAccelerateur(AnneauGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifValeurPompeAPVPompeAPMAccelerateur(AnneauGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifPlafondRenforceRegenPVPompeAPMAccelerateur(AnneauGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifProportionRenforceRegenPVPompeAPMAccelerateur(AnneauGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifSeuilRenforceRegenPVPompeAPMAccelerateur(AnneauGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifValeurRenforceRegenPVPompeAPMAccelerateur(AnneauGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifPlafondPompeAPVRenforceRegenPMAccelerateur(AnneauGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur):
    """Un anneau défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifProportionPompeAPVRenforceRegenPMAccelerateur(AnneauGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifSeuilPompeAPVRenforceRegenPMAccelerateur(AnneauGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifValeurPompeAPVRenforceRegenPMAccelerateur(AnneauGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateur(AnneauGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateur(AnneauGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateur(AnneauGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateur(AnneauGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class AnneauDefensifPlafondPompeAPVPompeAPMAnoblisseur(AnneauGenerique, DefensifPlafond, PompeAPV, PompeAPM, Anoblisseur):
    """Un anneau défensif plafonnant les dégats et pompant les PV et les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifProportionPompeAPVPompeAPMAnoblisseur(AnneauGenerique, DefensifProportion, PompeAPV, PompeAPM, Anoblisseur):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifSeuilPompeAPVPompeAPMAnoblisseur(AnneauGenerique, DefensifSeuil, PompeAPV, PompeAPM, Anoblisseur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifValeurPompeAPVPompeAPMAnoblisseur(AnneauGenerique, DefensifValeur, PompeAPV, PompeAPM, Anoblisseur):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifPlafondRenforceRegenPVPompeAPMAnoblisseur(AnneauGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Anoblisseur):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifProportionRenforceRegenPVPompeAPMAnoblisseur(AnneauGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Anoblisseur):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifSeuilRenforceRegenPVPompeAPMAnoblisseur(AnneauGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Anoblisseur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifValeurRenforceRegenPVPompeAPMAnoblisseur(AnneauGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Anoblisseur):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifPlafondPompeAPVRenforceRegenPMAnoblisseur(AnneauGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Anoblisseur):
    """Un anneau défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifProportionPompeAPVRenforceRegenPMAnoblisseur(AnneauGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Anoblisseur):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifSeuilPompeAPVRenforceRegenPMAnoblisseur(AnneauGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Anoblisseur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifValeurPompeAPVRenforceRegenPMAnoblisseur(AnneauGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Anoblisseur):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseur(AnneauGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Anoblisseur):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseur(AnneauGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Anoblisseur):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseur(AnneauGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Anoblisseur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseur(AnneauGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Anoblisseur):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifPlafondPompeAPVAccelerateurAnoblisseur(AnneauGenerique, DefensifPlafond, PompeAPV, Accelerateur, Anoblisseur):
    """Un anneau défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifProportionPompeAPVAccelerateurAnoblisseur(AnneauGenerique, DefensifProportion, PompeAPV, Accelerateur, Anoblisseur):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifSeuilPompeAPVAccelerateurAnoblisseur(AnneauGenerique, DefensifSeuil, PompeAPV, Accelerateur, Anoblisseur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifValeurPompeAPVAccelerateurAnoblisseur(AnneauGenerique, DefensifValeur, PompeAPV, Accelerateur, Anoblisseur):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifPlafondRenforceRegenPVAccelerateurAnoblisseur(AnneauGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, Anoblisseur):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifProportionRenforceRegenPVAccelerateurAnoblisseur(AnneauGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, Anoblisseur):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifSeuilRenforceRegenPVAccelerateurAnoblisseur(AnneauGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, Anoblisseur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifValeurRenforceRegenPVAccelerateurAnoblisseur(AnneauGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, Anoblisseur):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifPlafondPompeAPMAccelerateurAnoblisseur(AnneauGenerique, DefensifPlafond, PompeAPM, Accelerateur, Anoblisseur):
    """Un anneau défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifProportionPompeAPMAccelerateurAnoblisseur(AnneauGenerique, DefensifProportion, PompeAPM, Accelerateur, Anoblisseur):
    """Un anneau défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifSeuilPompeAPMAccelerateurAnoblisseur(AnneauGenerique, DefensifSeuil, PompeAPM, Accelerateur, Anoblisseur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifValeurPompeAPMAccelerateurAnoblisseur(AnneauGenerique, DefensifValeur, PompeAPM, Accelerateur, Anoblisseur):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifPlafondRenforceRegenPMAccelerateurAnoblisseur(AnneauGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifProportionRenforceRegenPMAccelerateurAnoblisseur(AnneauGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifSeuilRenforceRegenPMAccelerateurAnoblisseur(AnneauGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifValeurRenforceRegenPMAccelerateurAnoblisseur(AnneauGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauPompeAPVPompeAPMAccelerateurAnoblisseur(AnneauGenerique, PompeAPV, PompeAPM, Accelerateur, Anoblisseur):
    """Un anneau pompant les PV et les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauRenforceRegenPVPompeAPMAccelerateurAnoblisseur(AnneauGenerique, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur):
    """Un anneau renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauPompeAPVRenforceRegenPMAccelerateurAnoblisseur(AnneauGenerique, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un anneau pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur(AnneauGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un anneau renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifPlafondPompeAPVPompeAPMElementaire(AnneauGenerique, DefensifPlafond, PompeAPV, PompeAPM, Elementaire):
    """Un anneau défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionPompeAPVPompeAPMElementaire(AnneauGenerique, DefensifProportion, PompeAPV, PompeAPM, Elementaire):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilPompeAPVPompeAPMElementaire(AnneauGenerique, DefensifSeuil, PompeAPV, PompeAPM, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurPompeAPVPompeAPMElementaire(AnneauGenerique, DefensifValeur, PompeAPV, PompeAPM, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondRenforceRegenPVPompeAPMElementaire(AnneauGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Elementaire):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionRenforceRegenPVPompeAPMElementaire(AnneauGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Elementaire):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilRenforceRegenPVPompeAPMElementaire(AnneauGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurRenforceRegenPVPompeAPMElementaire(AnneauGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondPompeAPVRenforceRegenPMElementaire(AnneauGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Elementaire):
    """Un anneau défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionPompeAPVRenforceRegenPMElementaire(AnneauGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Elementaire):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilPompeAPVRenforceRegenPMElementaire(AnneauGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurPompeAPVRenforceRegenPMElementaire(AnneauGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMElementaire(AnneauGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Elementaire):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionRenforceRegenPVRenforceRegenPMElementaire(AnneauGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Elementaire):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMElementaire(AnneauGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurRenforceRegenPVRenforceRegenPMElementaire(AnneauGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondPompeAPVAccelerateurElementaire(AnneauGenerique, DefensifPlafond, PompeAPV, Accelerateur, Elementaire):
    """Un anneau défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionPompeAPVAccelerateurElementaire(AnneauGenerique, DefensifProportion, PompeAPV, Accelerateur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilPompeAPVAccelerateurElementaire(AnneauGenerique, DefensifSeuil, PompeAPV, Accelerateur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurPompeAPVAccelerateurElementaire(AnneauGenerique, DefensifValeur, PompeAPV, Accelerateur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondRenforceRegenPVAccelerateurElementaire(AnneauGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, Elementaire):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionRenforceRegenPVAccelerateurElementaire(AnneauGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilRenforceRegenPVAccelerateurElementaire(AnneauGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurRenforceRegenPVAccelerateurElementaire(AnneauGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondPompeAPMAccelerateurElementaire(AnneauGenerique, DefensifPlafond, PompeAPM, Accelerateur, Elementaire):
    """Un anneau défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionPompeAPMAccelerateurElementaire(AnneauGenerique, DefensifProportion, PompeAPM, Accelerateur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilPompeAPMAccelerateurElementaire(AnneauGenerique, DefensifSeuil, PompeAPM, Accelerateur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurPompeAPMAccelerateurElementaire(AnneauGenerique, DefensifValeur, PompeAPM, Accelerateur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondRenforceRegenPMAccelerateurElementaire(AnneauGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, Elementaire):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PM et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionRenforceRegenPMAccelerateurElementaire(AnneauGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PM et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilRenforceRegenPMAccelerateurElementaire(AnneauGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurRenforceRegenPMAccelerateurElementaire(AnneauGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauPompeAPVPompeAPMAccelerateurElementaire(AnneauGenerique, PompeAPV, PompeAPM, Accelerateur, Elementaire):
    """Un anneau pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauRenforceRegenPVPompeAPMAccelerateurElementaire(AnneauGenerique, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire):
    """Un anneau renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauPompeAPVRenforceRegenPMAccelerateurElementaire(AnneauGenerique, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Un anneau pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauRenforceRegenPVRenforceRegenPMAccelerateurElementaire(AnneauGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Un anneau renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondPompeAPVAnoblisseurElementaire(AnneauGenerique, DefensifPlafond, PompeAPV, Anoblisseur, Elementaire):
    """Un anneau défensif plafonnant les dégats et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionPompeAPVAnoblisseurElementaire(AnneauGenerique, DefensifProportion, PompeAPV, Anoblisseur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilPompeAPVAnoblisseurElementaire(AnneauGenerique, DefensifSeuil, PompeAPV, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurPompeAPVAnoblisseurElementaire(AnneauGenerique, DefensifValeur, PompeAPV, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondRenforceRegenPVAnoblisseurElementaire(AnneauGenerique, DefensifPlafond, RenforceRegenPV, Anoblisseur, Elementaire):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionRenforceRegenPVAnoblisseurElementaire(AnneauGenerique, DefensifProportion, RenforceRegenPV, Anoblisseur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilRenforceRegenPVAnoblisseurElementaire(AnneauGenerique, DefensifSeuil, RenforceRegenPV, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurRenforceRegenPVAnoblisseurElementaire(AnneauGenerique, DefensifValeur, RenforceRegenPV, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondPompeAPMAnoblisseurElementaire(AnneauGenerique, DefensifPlafond, PompeAPM, Anoblisseur, Elementaire):
    """Un anneau défensif plafonnant les dégats et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionPompeAPMAnoblisseurElementaire(AnneauGenerique, DefensifProportion, PompeAPM, Anoblisseur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilPompeAPMAnoblisseurElementaire(AnneauGenerique, DefensifSeuil, PompeAPM, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurPompeAPMAnoblisseurElementaire(AnneauGenerique, DefensifValeur, PompeAPM, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondRenforceRegenPMAnoblisseurElementaire(AnneauGenerique, DefensifPlafond, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionRenforceRegenPMAnoblisseurElementaire(AnneauGenerique, DefensifProportion, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilRenforceRegenPMAnoblisseurElementaire(AnneauGenerique, DefensifSeuil, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurRenforceRegenPMAnoblisseurElementaire(AnneauGenerique, DefensifValeur, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauPompeAPVPompeAPMAnoblisseurElementaire(AnneauGenerique, PompeAPV, PompeAPM, Anoblisseur, Elementaire):
    """Un anneau pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauRenforceRegenPVPompeAPMAnoblisseurElementaire(AnneauGenerique, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire):
    """Un anneau renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauPompeAPVRenforceRegenPMAnoblisseurElementaire(AnneauGenerique, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un anneau pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauRenforceRegenPVRenforceRegenPMAnoblisseurElementaire(AnneauGenerique, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un anneau renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifPlafond, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif plafonnant les dégats et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifProportion, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifSeuil, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifValeur, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauPompeAPVAccelerateurAnoblisseurElementaire(AnneauGenerique, PompeAPV, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauRenforceRegenPVAccelerateurAnoblisseurElementaire(AnneauGenerique, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauPompeAPMAccelerateurAnoblisseurElementaire(AnneauGenerique, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauRenforceRegenPMAccelerateurAnoblisseurElementaire(AnneauGenerique, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondPompeAPVPompeAPMTribal(AnneauGenerique, DefensifPlafond, PompeAPV, PompeAPM, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVPompeAPMTribal(AnneauGenerique, DefensifProportion, PompeAPV, PompeAPM, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVPompeAPMTribal(AnneauGenerique, DefensifSeuil, PompeAPV, PompeAPM, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVPompeAPMTribal(AnneauGenerique, DefensifValeur, PompeAPV, PompeAPM, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVPompeAPMTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVPompeAPMTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVPompeAPMTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVPompeAPMTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVRenforceRegenPMTribal(AnneauGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVRenforceRegenPMTribal(AnneauGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVRenforceRegenPMTribal(AnneauGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVRenforceRegenPMTribal(AnneauGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVRenforceRegenPMTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVRenforceRegenPMTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVAccelerateurTribal(AnneauGenerique, DefensifPlafond, PompeAPV, Accelerateur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVAccelerateurTribal(AnneauGenerique, DefensifProportion, PompeAPV, Accelerateur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVAccelerateurTribal(AnneauGenerique, DefensifSeuil, PompeAPV, Accelerateur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVAccelerateurTribal(AnneauGenerique, DefensifValeur, PompeAPV, Accelerateur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVAccelerateurTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVAccelerateurTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVAccelerateurTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVAccelerateurTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPMAccelerateurTribal(AnneauGenerique, DefensifPlafond, PompeAPM, Accelerateur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPMAccelerateurTribal(AnneauGenerique, DefensifProportion, PompeAPM, Accelerateur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPMAccelerateurTribal(AnneauGenerique, DefensifSeuil, PompeAPM, Accelerateur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPMAccelerateurTribal(AnneauGenerique, DefensifValeur, PompeAPM, Accelerateur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPMAccelerateurTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPMAccelerateurTribal(AnneauGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPMAccelerateurTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPMAccelerateurTribal(AnneauGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVPompeAPMAccelerateurTribal(AnneauGenerique, PompeAPV, PompeAPM, Accelerateur, EquippementTribal):
    """Un anneau pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVPompeAPMAccelerateurTribal(AnneauGenerique, RenforceRegenPV, PompeAPM, Accelerateur, EquippementTribal):
    """Un anneau renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVRenforceRegenPMAccelerateurTribal(AnneauGenerique, PompeAPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un anneau pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVRenforceRegenPMAccelerateurTribal(AnneauGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un anneau renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVAnoblisseurTribal(AnneauGenerique, DefensifPlafond, PompeAPV, Anoblisseur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVAnoblisseurTribal(AnneauGenerique, DefensifProportion, PompeAPV, Anoblisseur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVAnoblisseurTribal(AnneauGenerique, DefensifSeuil, PompeAPV, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVAnoblisseurTribal(AnneauGenerique, DefensifValeur, PompeAPV, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVAnoblisseurTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, Anoblisseur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVAnoblisseurTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, Anoblisseur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVAnoblisseurTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVAnoblisseurTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPMAnoblisseurTribal(AnneauGenerique, DefensifPlafond, PompeAPM, Anoblisseur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPMAnoblisseurTribal(AnneauGenerique, DefensifProportion, PompeAPM, Anoblisseur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPMAnoblisseurTribal(AnneauGenerique, DefensifSeuil, PompeAPM, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPMAnoblisseurTribal(AnneauGenerique, DefensifValeur, PompeAPM, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPMAnoblisseurTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPMAnoblisseurTribal(AnneauGenerique, DefensifProportion, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPMAnoblisseurTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPMAnoblisseurTribal(AnneauGenerique, DefensifValeur, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVPompeAPMAnoblisseurTribal(AnneauGenerique, PompeAPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Un anneau pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVPompeAPMAnoblisseurTribal(AnneauGenerique, RenforceRegenPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Un anneau renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVRenforceRegenPMAnoblisseurTribal(AnneauGenerique, PompeAPV, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Un anneau pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVRenforceRegenPMAnoblisseurTribal(AnneauGenerique, RenforceRegenPV, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Un anneau renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifPlafond, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifProportion, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifSeuil, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifValeur, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVAccelerateurAnoblisseurTribal(AnneauGenerique, PompeAPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVAccelerateurAnoblisseurTribal(AnneauGenerique, RenforceRegenPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPMAccelerateurAnoblisseurTribal(AnneauGenerique, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPMAccelerateurAnoblisseurTribal(AnneauGenerique, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVElementaireTribal(AnneauGenerique, DefensifPlafond, PompeAPV, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVElementaireTribal(AnneauGenerique, DefensifProportion, PompeAPV, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVElementaireTribal(AnneauGenerique, DefensifSeuil, PompeAPV, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVElementaireTribal(AnneauGenerique, DefensifValeur, PompeAPV, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVElementaireTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVElementaireTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVElementaireTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVElementaireTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPMElementaireTribal(AnneauGenerique, DefensifPlafond, PompeAPM, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPMElementaireTribal(AnneauGenerique, DefensifProportion, PompeAPM, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPMElementaireTribal(AnneauGenerique, DefensifSeuil, PompeAPM, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPMElementaireTribal(AnneauGenerique, DefensifValeur, PompeAPM, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPMElementaireTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPMElementaireTribal(AnneauGenerique, DefensifProportion, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPMElementaireTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPMElementaireTribal(AnneauGenerique, DefensifValeur, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVPompeAPMElementaireTribal(AnneauGenerique, PompeAPV, PompeAPM, Elementaire, EquippementTribal):
    """Un anneau pompant les PV et les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVPompeAPMElementaireTribal(AnneauGenerique, RenforceRegenPV, PompeAPM, Elementaire, EquippementTribal):
    """Un anneau renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVRenforceRegenPMElementaireTribal(AnneauGenerique, PompeAPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un anneau pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVRenforceRegenPMElementaireTribal(AnneauGenerique, RenforceRegenPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un anneau renforçant la régénération des PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondAccelerateurElementaireTribal(AnneauGenerique, DefensifPlafond, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionAccelerateurElementaireTribal(AnneauGenerique, DefensifProportion, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilAccelerateurElementaireTribal(AnneauGenerique, DefensifSeuil, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurAccelerateurElementaireTribal(AnneauGenerique, DefensifValeur, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVAccelerateurElementaireTribal(AnneauGenerique, PompeAPV, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVAccelerateurElementaireTribal(AnneauGenerique, RenforceRegenPV, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau renforçant la régénération des PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPMAccelerateurElementaireTribal(AnneauGenerique, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPMAccelerateurElementaireTribal(AnneauGenerique, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondAnoblisseurElementaireTribal(AnneauGenerique, DefensifPlafond, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionAnoblisseurElementaireTribal(AnneauGenerique, DefensifProportion, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilAnoblisseurElementaireTribal(AnneauGenerique, DefensifSeuil, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurAnoblisseurElementaireTribal(AnneauGenerique, DefensifValeur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVAnoblisseurElementaireTribal(AnneauGenerique, PompeAPV, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVAnoblisseurElementaireTribal(AnneauGenerique, RenforceRegenPV, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPMAnoblisseurElementaireTribal(AnneauGenerique, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPMAnoblisseurElementaireTribal(AnneauGenerique, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseur(AnneauGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, Anoblisseur):
    """Un anneau défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseur(AnneauGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, Anoblisseur):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseur(AnneauGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, Anoblisseur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseur(AnneauGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, Anoblisseur):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseur(AnneauGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseur(AnneauGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseur(AnneauGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseur(AnneauGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseur(AnneauGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un anneau défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseur(AnneauGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseur(AnneauGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseur(AnneauGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur(AnneauGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur(AnneauGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur(AnneauGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur(AnneauGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class AnneauDefensifPlafondPompeAPVPompeAPMAccelerateurElementaire(AnneauGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, Elementaire):
    """Un anneau défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionPompeAPVPompeAPMAccelerateurElementaire(AnneauGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilPompeAPVPompeAPMAccelerateurElementaire(AnneauGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurPompeAPVPompeAPMAccelerateurElementaire(AnneauGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondRenforceRegenPVPompeAPMAccelerateurElementaire(AnneauGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionRenforceRegenPVPompeAPMAccelerateurElementaire(AnneauGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilRenforceRegenPVPompeAPMAccelerateurElementaire(AnneauGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurRenforceRegenPVPompeAPMAccelerateurElementaire(AnneauGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondPompeAPVRenforceRegenPMAccelerateurElementaire(AnneauGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Un anneau défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionPompeAPVRenforceRegenPMAccelerateurElementaire(AnneauGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilPompeAPVRenforceRegenPMAccelerateurElementaire(AnneauGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurPompeAPVRenforceRegenPMAccelerateurElementaire(AnneauGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurElementaire(AnneauGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurElementaire(AnneauGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurElementaire(AnneauGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurElementaire(AnneauGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondPompeAPVPompeAPMAnoblisseurElementaire(AnneauGenerique, DefensifPlafond, PompeAPV, PompeAPM, Anoblisseur, Elementaire):
    """Un anneau défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionPompeAPVPompeAPMAnoblisseurElementaire(AnneauGenerique, DefensifProportion, PompeAPV, PompeAPM, Anoblisseur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilPompeAPVPompeAPMAnoblisseurElementaire(AnneauGenerique, DefensifSeuil, PompeAPV, PompeAPM, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurPompeAPVPompeAPMAnoblisseurElementaire(AnneauGenerique, DefensifValeur, PompeAPV, PompeAPM, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondRenforceRegenPVPompeAPMAnoblisseurElementaire(AnneauGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionRenforceRegenPVPompeAPMAnoblisseurElementaire(AnneauGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilRenforceRegenPVPompeAPMAnoblisseurElementaire(AnneauGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurRenforceRegenPVPompeAPMAnoblisseurElementaire(AnneauGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondPompeAPVRenforceRegenPMAnoblisseurElementaire(AnneauGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un anneau défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionPompeAPVRenforceRegenPMAnoblisseurElementaire(AnneauGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilPompeAPVRenforceRegenPMAnoblisseurElementaire(AnneauGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurPompeAPVRenforceRegenPMAnoblisseurElementaire(AnneauGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseurElementaire(AnneauGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseurElementaire(AnneauGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseurElementaire(AnneauGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseurElementaire(AnneauGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondPompeAPVAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifPlafond, PompeAPV, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionPompeAPVAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifProportion, PompeAPV, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilPompeAPVAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifSeuil, PompeAPV, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurPompeAPVAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifValeur, PompeAPV, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondRenforceRegenPVAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionRenforceRegenPVAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilRenforceRegenPVAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurRenforceRegenPVAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondPompeAPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifPlafond, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionPompeAPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifProportion, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilPompeAPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifSeuil, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurPompeAPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifValeur, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondRenforceRegenPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionRenforceRegenPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilRenforceRegenPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurRenforceRegenPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauPompeAPVPompeAPMAccelerateurAnoblisseurElementaire(AnneauGenerique, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire(AnneauGenerique, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire(AnneauGenerique, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire(AnneauGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondPompeAPVPompeAPMAccelerateurTribal(AnneauGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVPompeAPMAccelerateurTribal(AnneauGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVPompeAPMAccelerateurTribal(AnneauGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVPompeAPMAccelerateurTribal(AnneauGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVPompeAPMAccelerateurTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVPompeAPMAccelerateurTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVPompeAPMAccelerateurTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVPompeAPMAccelerateurTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVRenforceRegenPMAccelerateurTribal(AnneauGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVRenforceRegenPMAccelerateurTribal(AnneauGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVRenforceRegenPMAccelerateurTribal(AnneauGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVRenforceRegenPMAccelerateurTribal(AnneauGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVPompeAPMAnoblisseurTribal(AnneauGenerique, DefensifPlafond, PompeAPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVPompeAPMAnoblisseurTribal(AnneauGenerique, DefensifProportion, PompeAPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVPompeAPMAnoblisseurTribal(AnneauGenerique, DefensifSeuil, PompeAPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVPompeAPMAnoblisseurTribal(AnneauGenerique, DefensifValeur, PompeAPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVPompeAPMAnoblisseurTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVPompeAPMAnoblisseurTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVPompeAPMAnoblisseurTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVPompeAPMAnoblisseurTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVRenforceRegenPMAnoblisseurTribal(AnneauGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVRenforceRegenPMAnoblisseurTribal(AnneauGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVRenforceRegenPMAnoblisseurTribal(AnneauGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVRenforceRegenPMAnoblisseurTribal(AnneauGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseurTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseurTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseurTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseurTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifPlafond, PompeAPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifProportion, PompeAPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifSeuil, PompeAPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifValeur, PompeAPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifPlafond, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifProportion, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifSeuil, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifValeur, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVPompeAPMAccelerateurAnoblisseurTribal(AnneauGenerique, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal(AnneauGenerique, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal(AnneauGenerique, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal(AnneauGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVPompeAPMElementaireTribal(AnneauGenerique, DefensifPlafond, PompeAPV, PompeAPM, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVPompeAPMElementaireTribal(AnneauGenerique, DefensifProportion, PompeAPV, PompeAPM, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVPompeAPMElementaireTribal(AnneauGenerique, DefensifSeuil, PompeAPV, PompeAPM, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVPompeAPMElementaireTribal(AnneauGenerique, DefensifValeur, PompeAPV, PompeAPM, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVPompeAPMElementaireTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVPompeAPMElementaireTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVPompeAPMElementaireTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVPompeAPMElementaireTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVRenforceRegenPMElementaireTribal(AnneauGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVRenforceRegenPMElementaireTribal(AnneauGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVRenforceRegenPMElementaireTribal(AnneauGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVRenforceRegenPMElementaireTribal(AnneauGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMElementaireTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVRenforceRegenPMElementaireTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMElementaireTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVRenforceRegenPMElementaireTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVAccelerateurElementaireTribal(AnneauGenerique, DefensifPlafond, PompeAPV, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVAccelerateurElementaireTribal(AnneauGenerique, DefensifProportion, PompeAPV, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVAccelerateurElementaireTribal(AnneauGenerique, DefensifSeuil, PompeAPV, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVAccelerateurElementaireTribal(AnneauGenerique, DefensifValeur, PompeAPV, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVAccelerateurElementaireTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVAccelerateurElementaireTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVAccelerateurElementaireTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVAccelerateurElementaireTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPMAccelerateurElementaireTribal(AnneauGenerique, DefensifPlafond, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPMAccelerateurElementaireTribal(AnneauGenerique, DefensifProportion, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPMAccelerateurElementaireTribal(AnneauGenerique, DefensifSeuil, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPMAccelerateurElementaireTribal(AnneauGenerique, DefensifValeur, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPMAccelerateurElementaireTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPMAccelerateurElementaireTribal(AnneauGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPMAccelerateurElementaireTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPMAccelerateurElementaireTribal(AnneauGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVPompeAPMAccelerateurElementaireTribal(AnneauGenerique, PompeAPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVPompeAPMAccelerateurElementaireTribal(AnneauGenerique, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVRenforceRegenPMAccelerateurElementaireTribal(AnneauGenerique, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal(AnneauGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau renforçant la régénération des PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVAnoblisseurElementaireTribal(AnneauGenerique, DefensifPlafond, PompeAPV, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVAnoblisseurElementaireTribal(AnneauGenerique, DefensifProportion, PompeAPV, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVAnoblisseurElementaireTribal(AnneauGenerique, DefensifSeuil, PompeAPV, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVAnoblisseurElementaireTribal(AnneauGenerique, DefensifValeur, PompeAPV, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVAnoblisseurElementaireTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVAnoblisseurElementaireTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVAnoblisseurElementaireTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVAnoblisseurElementaireTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifPlafond, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifProportion, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifSeuil, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifValeur, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifProportion, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifValeur, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVPompeAPMAnoblisseurElementaireTribal(AnneauGenerique, PompeAPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau pompant les PV et les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVPompeAPMAnoblisseurElementaireTribal(AnneauGenerique, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVRenforceRegenPMAnoblisseurElementaireTribal(AnneauGenerique, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal(AnneauGenerique, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau renforçant la régénération des PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifPlafond, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifProportion, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifSeuil, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifValeur, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, PompeAPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau renforçant la régénération des PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire(AnneauGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class AnneauDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVPompeAPMAccelerateurElementaireTribal(AnneauGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVPompeAPMAccelerateurElementaireTribal(AnneauGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVPompeAPMAccelerateurElementaireTribal(AnneauGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVPompeAPMAccelerateurElementaireTribal(AnneauGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVPompeAPMAccelerateurElementaireTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVPompeAPMAccelerateurElementaireTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVPompeAPMAccelerateurElementaireTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVPompeAPMAccelerateurElementaireTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVRenforceRegenPMAccelerateurElementaireTribal(AnneauGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVRenforceRegenPMAccelerateurElementaireTribal(AnneauGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVRenforceRegenPMAccelerateurElementaireTribal(AnneauGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVRenforceRegenPMAccelerateurElementaireTribal(AnneauGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVPompeAPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifPlafond, PompeAPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVPompeAPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifProportion, PompeAPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVPompeAPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifSeuil, PompeAPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVPompeAPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifValeur, PompeAPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVPompeAPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVPompeAPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVPompeAPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVPompeAPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVRenforceRegenPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVRenforceRegenPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVRenforceRegenPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVRenforceRegenPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifPlafond, PompeAPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifProportion, PompeAPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifSeuil, PompeAPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifValeur, PompeAPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifPlafond, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifProportion, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifSeuil, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifValeur, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(AnneauGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un anneau défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        AnneauGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureGenerique(Armure, EquippementGenerique):
    """Une armure générique, avec les arguments utilisés par toutes les armures."""

class ArmureDefensifPlafond(ArmureGenerique, DefensifPlafond):
    """Une armure défensif plafonnant les dégats."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)

class ArmureDefensifProportion(ArmureGenerique, DefensifProportion):
    """Une armure défensif proportionnel aux dégats."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)

class ArmureDefensifSeuil(ArmureGenerique, DefensifSeuil):
    """Une armure défensif bloquant les dégats en dessous d'un seuil."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)

class ArmureDefensifValeur(ArmureGenerique, DefensifValeur):
    """Une armure défensif bloquant une valeur fixe de dégats."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)

class ArmurePompeAPV(ArmureGenerique, PompeAPV):
    """Une armure pompant les PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)

class ArmureRenforceRegenPV(ArmureGenerique, RenforceRegenPV):
    """Une armure renforçant la régénération des PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)

class ArmurePompeAPM(ArmureGenerique, PompeAPM):
    """Une armure pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class ArmureRenforceRegenPM(ArmureGenerique, RenforceRegenPM):
    """Une armure renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class ArmureAccelerateur(ArmureGenerique, Accelerateur):
    """Une armure qui augmente la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureAnoblisseur(ArmureGenerique, Anoblisseur):
    """Une armure qui augmente la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureElementaire(ArmureGenerique, Elementaire):
    """Une armure qui renforce l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureTribal(ArmureGenerique, EquippementTribal):
    """Une armure qui est dédié à une espèce."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPV(ArmureGenerique, DefensifPlafond, PompeAPV):
    """Une armure défensif plafonnant les dégats et pompant les PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)

class ArmureDefensifPlafondRenforceRegenPV(ArmureGenerique, DefensifPlafond, RenforceRegenPV):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)

class ArmureDefensifProportionPompeAPV(ArmureGenerique, DefensifProportion, PompeAPV):
    """Une armure défensif proportionnel aux dégats et pompant les PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)

class ArmureDefensifProportionRenforceRegenPV(ArmureGenerique, DefensifProportion, RenforceRegenPV):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)

class ArmureDefensifSeuilPompeAPV(ArmureGenerique, DefensifSeuil, PompeAPV):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)

class ArmureDefensifSeuilRenforceRegenPV(ArmureGenerique, DefensifSeuil, RenforceRegenPV):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)

class ArmureDefensifValeurPompeAPV(ArmureGenerique, DefensifValeur, PompeAPV):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)

class ArmureDefensifValeurRenforceRegenPV(ArmureGenerique, DefensifValeur, RenforceRegenPV):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)

class ArmureDefensifPlafondPompeAPM(ArmureGenerique, DefensifPlafond, PompeAPM):
    """Une armure défensif plafonnant les dégats et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifPlafondRenforceRegenPM(ArmureGenerique, DefensifPlafond, RenforceRegenPM):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifProportionPompeAPM(ArmureGenerique, DefensifProportion, PompeAPM):
    """Une armure défensif proportionnel aux dégats et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifProportionRenforceRegenPM(ArmureGenerique, DefensifProportion, RenforceRegenPM):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifSeuilPompeAPM(ArmureGenerique, DefensifSeuil, PompeAPM):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifSeuilRenforceRegenPM(ArmureGenerique, DefensifSeuil, RenforceRegenPM):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifValeurPompeAPM(ArmureGenerique, DefensifValeur, PompeAPM):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifValeurRenforceRegenPM(ArmureGenerique, DefensifValeur, RenforceRegenPM):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class ArmurePompeAPVPompeAPM(ArmureGenerique, PompeAPV, PompeAPM):
    """Une armure pompant les PV et les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class ArmurePompeAPVRenforceRegenPM(ArmureGenerique, PompeAPV, RenforceRegenPM):
    """Une armure pompant les PV et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class ArmureRenforceRegenPVPompeAPM(ArmureGenerique, RenforceRegenPV, PompeAPM):
    """Une armure renforçant la régénération des PV et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class ArmureRenforceRegenPVRenforceRegenPM(ArmureGenerique, RenforceRegenPV, RenforceRegenPM):
    """Une armure renforçant la régénération des PV et des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifPlafondAccelerateur(ArmureGenerique, DefensifPlafond, Accelerateur):
    """Une armure défensif plafonnant les dégats et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifProportionAccelerateur(ArmureGenerique, DefensifProportion, Accelerateur):
    """Une armure défensif proportionnel aux dégats et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifSeuilAccelerateur(ArmureGenerique, DefensifSeuil, Accelerateur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifValeurAccelerateur(ArmureGenerique, DefensifValeur, Accelerateur):
    """Une armure défensif bloquant une valeur fixe de dégats et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmurePompeAPVAccelerateur(ArmureGenerique, PompeAPV, Accelerateur):
    """Une armure pompant les PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureRenforceRegenPVAccelerateur(ArmureGenerique, RenforceRegenPV, Accelerateur):
    """Une armure renforçant la régénération des PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmurePompeAPMAccelerateur(ArmureGenerique, PompeAPM, Accelerateur):
    """Une armure pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureRenforceRegenPMAccelerateur(ArmureGenerique, RenforceRegenPM, Accelerateur):
    """Une armure renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifPlafondAnoblisseur(ArmureGenerique, DefensifPlafond, Anoblisseur):
    """Une armure défensif plafonnant les dégats et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifProportionAnoblisseur(ArmureGenerique, DefensifProportion, Anoblisseur):
    """Une armure défensif proportionnel aux dégats et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifSeuilAnoblisseur(ArmureGenerique, DefensifSeuil, Anoblisseur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifValeurAnoblisseur(ArmureGenerique, DefensifValeur, Anoblisseur):
    """Une armure défensif bloquant une valeur fixe de dégats et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmurePompeAPVAnoblisseur(ArmureGenerique, PompeAPV, Anoblisseur):
    """Une armure pompant les PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureRenforceRegenPVAnoblisseur(ArmureGenerique, RenforceRegenPV, Anoblisseur):
    """Une armure renforçant la régénération des PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmurePompeAPMAnoblisseur(ArmureGenerique, PompeAPM, Anoblisseur):
    """Une armure pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureRenforceRegenPMAnoblisseur(ArmureGenerique, RenforceRegenPM, Anoblisseur):
    """Une armure renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureAccelerateurAnoblisseur(ArmureGenerique, Accelerateur, Anoblisseur):
    """Une armure augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifPlafondElementaire(ArmureGenerique, DefensifPlafond, Elementaire):
    """Une armure défensif plafonnant les dégats et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionElementaire(ArmureGenerique, DefensifProportion, Elementaire):
    """Une armure défensif proportionnel aux dégats et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilElementaire(ArmureGenerique, DefensifSeuil, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurElementaire(ArmureGenerique, DefensifValeur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmurePompeAPVElementaire(ArmureGenerique, PompeAPV, Elementaire):
    """Une armure pompant les PV et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureRenforceRegenPVElementaire(ArmureGenerique, RenforceRegenPV, Elementaire):
    """Une armure renforçant la régénération des PV et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmurePompeAPMElementaire(ArmureGenerique, PompeAPM, Elementaire):
    """Une armure pompant les PM et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureRenforceRegenPMElementaire(ArmureGenerique, RenforceRegenPM, Elementaire):
    """Une armure renforçant la régénération des PM et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureAccelerateurElementaire(ArmureGenerique, Accelerateur, Elementaire):
    """Une armure augmentant la vitesse et l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureAnoblisseurElementaire(ArmureGenerique, Anoblisseur, Elementaire):
    """Une armure augmentant la priorité et l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondTribal(ArmureGenerique, DefensifPlafond, EquippementTribal):
    """Une armure défensif plafonnant les dégats et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionTribal(ArmureGenerique, DefensifProportion, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilTribal(ArmureGenerique, DefensifSeuil, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurTribal(ArmureGenerique, DefensifValeur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVTribal(ArmureGenerique, PompeAPV, EquippementTribal):
    """Une armure pompant les PV et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVTribal(ArmureGenerique, RenforceRegenPV, EquippementTribal):
    """Une armure renforçant la régénération des PV et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPMTribal(ArmureGenerique, PompeAPM, EquippementTribal):
    """Une armure pompant les PM et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPMTribal(ArmureGenerique, RenforceRegenPM, EquippementTribal):
    """Une armure renforçant la régénération des PM et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureAccelerateurTribal(ArmureGenerique, Accelerateur, EquippementTribal):
    """Une armure augmentant la vitesse et l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureAnoblisseurTribal(ArmureGenerique, Anoblisseur, EquippementTribal):
    """Une armure augmentant la priorité et l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureElementaireTribal(ArmureGenerique, Elementaire, EquippementTribal):
    """Une armure augmentant l'affinité à un élément et l'affinité à une espèce."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        assert _element is not None
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVPompeAPM(ArmureGenerique, DefensifPlafond, PompeAPV, PompeAPM):
    """Une armure défensif plafonnant les dégats et pompant les PV et les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifProportionPompeAPVPompeAPM(ArmureGenerique, DefensifProportion, PompeAPV, PompeAPM):
    """Une armure défensif proportionnel aux dégats et pompant les PV et les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifSeuilPompeAPVPompeAPM(ArmureGenerique, DefensifSeuil, PompeAPV, PompeAPM):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifValeurPompeAPVPompeAPM(ArmureGenerique, DefensifValeur, PompeAPV, PompeAPM):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifPlafondRenforceRegenPVPompeAPM(ArmureGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifProportionRenforceRegenPVPompeAPM(ArmureGenerique, DefensifProportion, RenforceRegenPV, PompeAPM):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifSeuilRenforceRegenPVPompeAPM(ArmureGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifValeurRenforceRegenPVPompeAPM(ArmureGenerique, DefensifValeur, RenforceRegenPV, PompeAPM):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifPlafondPompeAPVRenforceRegenPM(ArmureGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM):
    """Une armure défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifProportionPompeAPVRenforceRegenPM(ArmureGenerique, DefensifProportion, PompeAPV, RenforceRegenPM):
    """Une armure défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifSeuilPompeAPVRenforceRegenPM(ArmureGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifValeurPompeAPVRenforceRegenPM(ArmureGenerique, DefensifValeur, PompeAPV, RenforceRegenPM):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifPlafondRenforceRegenPVRenforceRegenPM(ArmureGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifProportionRenforceRegenPVRenforceRegenPM(ArmureGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifSeuilRenforceRegenPVRenforceRegenPM(ArmureGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifValeurRenforceRegenPVRenforceRegenPM(ArmureGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class ArmureDefensifPlafondPompeAPVAccelerateur(ArmureGenerique, DefensifPlafond, PompeAPV, Accelerateur):
    """Une armure défensif plafonnant les dégats et pompant les PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifProportionPompeAPVAccelerateur(ArmureGenerique, DefensifProportion, PompeAPV, Accelerateur):
    """Une armure défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifSeuilPompeAPVAccelerateur(ArmureGenerique, DefensifSeuil, PompeAPV, Accelerateur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifValeurPompeAPVAccelerateur(ArmureGenerique, DefensifValeur, PompeAPV, Accelerateur):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifPlafondRenforceRegenPVAccelerateur(ArmureGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifProportionRenforceRegenPVAccelerateur(ArmureGenerique, DefensifProportion, RenforceRegenPV, Accelerateur):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifSeuilRenforceRegenPVAccelerateur(ArmureGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifValeurRenforceRegenPVAccelerateur(ArmureGenerique, DefensifValeur, RenforceRegenPV, Accelerateur):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifPlafondPompeAPMAccelerateur(ArmureGenerique, DefensifPlafond, PompeAPM, Accelerateur):
    """Une armure défensif plafonnant les dégats et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifProportionPompeAPMAccelerateur(ArmureGenerique, DefensifProportion, PompeAPM, Accelerateur):
    """Une armure défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifSeuilPompeAPMAccelerateur(ArmureGenerique, DefensifSeuil, PompeAPM, Accelerateur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifValeurPompeAPMAccelerateur(ArmureGenerique, DefensifValeur, PompeAPM, Accelerateur):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifPlafondRenforceRegenPMAccelerateur(ArmureGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifProportionRenforceRegenPMAccelerateur(ArmureGenerique, DefensifProportion, RenforceRegenPM, Accelerateur):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifSeuilRenforceRegenPMAccelerateur(ArmureGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifValeurRenforceRegenPMAccelerateur(ArmureGenerique, DefensifValeur, RenforceRegenPM, Accelerateur):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmurePompeAPVPompeAPMAccelerateur(ArmureGenerique, PompeAPV, PompeAPM, Accelerateur):
    """Une armure pompant les PV et les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureRenforceRegenPVPompeAPMAccelerateur(ArmureGenerique, RenforceRegenPV, PompeAPM, Accelerateur):
    """Une armure renforçant la régénération des PV et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmurePompeAPVRenforceRegenPMAccelerateur(ArmureGenerique, PompeAPV, RenforceRegenPM, Accelerateur):
    """Une armure pompant les PV et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureRenforceRegenPVRenforceRegenPMAccelerateur(ArmureGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur):
    """Une armure renforçant la régénération des PV et des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifPlafondPompeAPVAnoblisseur(ArmureGenerique, DefensifPlafond, PompeAPV, Anoblisseur):
    """Une armure défensif plafonnant les dégats et pompant les PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifProportionPompeAPVAnoblisseur(ArmureGenerique, DefensifProportion, PompeAPV, Anoblisseur):
    """Une armure défensif proportionnel aux dégats et pompant les PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifSeuilPompeAPVAnoblisseur(ArmureGenerique, DefensifSeuil, PompeAPV, Anoblisseur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifValeurPompeAPVAnoblisseur(ArmureGenerique, DefensifValeur, PompeAPV, Anoblisseur):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifPlafondRenforceRegenPVAnoblisseur(ArmureGenerique, DefensifPlafond, RenforceRegenPV, Anoblisseur):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifProportionRenforceRegenPVAnoblisseur(ArmureGenerique, DefensifProportion, RenforceRegenPV, Anoblisseur):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifSeuilRenforceRegenPVAnoblisseur(ArmureGenerique, DefensifSeuil, RenforceRegenPV, Anoblisseur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifValeurRenforceRegenPVAnoblisseur(ArmureGenerique, DefensifValeur, RenforceRegenPV, Anoblisseur):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifPlafondPompeAPMAnoblisseur(ArmureGenerique, DefensifPlafond, PompeAPM, Anoblisseur):
    """Une armure défensif plafonnant les dégats et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifProportionPompeAPMAnoblisseur(ArmureGenerique, DefensifProportion, PompeAPM, Anoblisseur):
    """Une armure défensif proportionnel aux dégats et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifSeuilPompeAPMAnoblisseur(ArmureGenerique, DefensifSeuil, PompeAPM, Anoblisseur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifValeurPompeAPMAnoblisseur(ArmureGenerique, DefensifValeur, PompeAPM, Anoblisseur):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifPlafondRenforceRegenPMAnoblisseur(ArmureGenerique, DefensifPlafond, RenforceRegenPM, Anoblisseur):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifProportionRenforceRegenPMAnoblisseur(ArmureGenerique, DefensifProportion, RenforceRegenPM, Anoblisseur):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifSeuilRenforceRegenPMAnoblisseur(ArmureGenerique, DefensifSeuil, RenforceRegenPM, Anoblisseur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifValeurRenforceRegenPMAnoblisseur(ArmureGenerique, DefensifValeur, RenforceRegenPM, Anoblisseur):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmurePompeAPVPompeAPMAnoblisseur(ArmureGenerique, PompeAPV, PompeAPM, Anoblisseur):
    """Une armure pompant les PV et les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureRenforceRegenPVPompeAPMAnoblisseur(ArmureGenerique, RenforceRegenPV, PompeAPM, Anoblisseur):
    """Une armure renforçant la régénération des PV et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmurePompeAPVRenforceRegenPMAnoblisseur(ArmureGenerique, PompeAPV, RenforceRegenPM, Anoblisseur):
    """Une armure pompant les PV et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureRenforceRegenPVRenforceRegenPMAnoblisseur(ArmureGenerique, RenforceRegenPV, RenforceRegenPM, Anoblisseur):
    """Une armure renforçant la régénération des PV et des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifPlafondAccelerateurAnoblisseur(ArmureGenerique, DefensifPlafond, Accelerateur, Anoblisseur):
    """Une armure défensif plafonnant les dégats et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifProportionAccelerateurAnoblisseur(ArmureGenerique, DefensifProportion, Accelerateur, Anoblisseur):
    """Une armure défensif proportionnel aux dégats et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifSeuilAccelerateurAnoblisseur(ArmureGenerique, DefensifSeuil, Accelerateur, Anoblisseur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifValeurAccelerateurAnoblisseur(ArmureGenerique, DefensifValeur, Accelerateur, Anoblisseur):
    """Une armure défensif bloquant une valeur fixe de dégats et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmurePompeAPVAccelerateurAnoblisseur(ArmureGenerique, PompeAPV, Accelerateur, Anoblisseur):
    """Une armure pompant les PV et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureRenforceRegenPVAccelerateurAnoblisseur(ArmureGenerique, RenforceRegenPV, Accelerateur, Anoblisseur):
    """Une armure renforçant la régénération des PV et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmurePompeAPMAccelerateurAnoblisseur(ArmureGenerique, PompeAPM, Accelerateur, Anoblisseur):
    """Une armure pompant les PM et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureRenforceRegenPMAccelerateurAnoblisseur(ArmureGenerique, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Une armure renforçant la régénération des PM et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifPlafondPompeAPVElementaire(ArmureGenerique, DefensifPlafond, PompeAPV, Elementaire):
    """Une armure défensif plafonnant les dégats et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionPompeAPVElementaire(ArmureGenerique, DefensifProportion, PompeAPV, Elementaire):
    """Une armure défensif proportionnel aux dégats et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilPompeAPVElementaire(ArmureGenerique, DefensifSeuil, PompeAPV, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurPompeAPVElementaire(ArmureGenerique, DefensifValeur, PompeAPV, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondRenforceRegenPVElementaire(ArmureGenerique, DefensifPlafond, RenforceRegenPV, Elementaire):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionRenforceRegenPVElementaire(ArmureGenerique, DefensifProportion, RenforceRegenPV, Elementaire):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilRenforceRegenPVElementaire(ArmureGenerique, DefensifSeuil, RenforceRegenPV, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurRenforceRegenPVElementaire(ArmureGenerique, DefensifValeur, RenforceRegenPV, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondPompeAPMElementaire(ArmureGenerique, DefensifPlafond, PompeAPM, Elementaire):
    """Une armure défensif plafonnant les dégats et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionPompeAPMElementaire(ArmureGenerique, DefensifProportion, PompeAPM, Elementaire):
    """Une armure défensif proportionnel aux dégats et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilPompeAPMElementaire(ArmureGenerique, DefensifSeuil, PompeAPM, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurPompeAPMElementaire(ArmureGenerique, DefensifValeur, PompeAPM, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondRenforceRegenPMElementaire(ArmureGenerique, DefensifPlafond, RenforceRegenPM, Elementaire):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionRenforceRegenPMElementaire(ArmureGenerique, DefensifProportion, RenforceRegenPM, Elementaire):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilRenforceRegenPMElementaire(ArmureGenerique, DefensifSeuil, RenforceRegenPM, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurRenforceRegenPMElementaire(ArmureGenerique, DefensifValeur, RenforceRegenPM, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmurePompeAPVPompeAPMElementaire(ArmureGenerique, PompeAPV, PompeAPM, Elementaire):
    """Une armure pompant les PV et les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureRenforceRegenPVPompeAPMElementaire(ArmureGenerique, RenforceRegenPV, PompeAPM, Elementaire):
    """Une armure renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmurePompeAPVRenforceRegenPMElementaire(ArmureGenerique, PompeAPV, RenforceRegenPM, Elementaire):
    """Une armure pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureRenforceRegenPVRenforceRegenPMElementaire(ArmureGenerique, RenforceRegenPV, RenforceRegenPM, Elementaire):
    """Une armure renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondAccelerateurElementaire(ArmureGenerique, DefensifPlafond, Accelerateur, Elementaire):
    """Une armure défensif plafonnant les dégats et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionAccelerateurElementaire(ArmureGenerique, DefensifProportion, Accelerateur, Elementaire):
    """Une armure défensif proportionnel aux dégats et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilAccelerateurElementaire(ArmureGenerique, DefensifSeuil, Accelerateur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurAccelerateurElementaire(ArmureGenerique, DefensifValeur, Accelerateur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmurePompeAPVAccelerateurElementaire(ArmureGenerique, PompeAPV, Accelerateur, Elementaire):
    """Une armure pompant les PV et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureRenforceRegenPVAccelerateurElementaire(ArmureGenerique, RenforceRegenPV, Accelerateur, Elementaire):
    """Une armure renforçant la régénération des PV et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmurePompeAPMAccelerateurElementaire(ArmureGenerique, PompeAPM, Accelerateur, Elementaire):
    """Une armure pompant les PM et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureRenforceRegenPMAccelerateurElementaire(ArmureGenerique, RenforceRegenPM, Accelerateur, Elementaire):
    """Une armure renforçant la régénération des PM et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondAnoblisseurElementaire(ArmureGenerique, DefensifPlafond, Anoblisseur, Elementaire):
    """Une armure défensif plafonnant les dégats et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionAnoblisseurElementaire(ArmureGenerique, DefensifProportion, Anoblisseur, Elementaire):
    """Une armure défensif proportionnel aux dégats et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilAnoblisseurElementaire(ArmureGenerique, DefensifSeuil, Anoblisseur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurAnoblisseurElementaire(ArmureGenerique, DefensifValeur, Anoblisseur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmurePompeAPVAnoblisseurElementaire(ArmureGenerique, PompeAPV, Anoblisseur, Elementaire):
    """Une armure pompant les PV et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureRenforceRegenPVAnoblisseurElementaire(ArmureGenerique, RenforceRegenPV, Anoblisseur, Elementaire):
    """Une armure renforçant la régénération des PV et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmurePompeAPMAnoblisseurElementaire(ArmureGenerique, PompeAPM, Anoblisseur, Elementaire):
    """Une armure pompant les PM et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureRenforceRegenPMAnoblisseurElementaire(ArmureGenerique, RenforceRegenPM, Anoblisseur, Elementaire):
    """Une armure renforçant la régénération des PM et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureAccelerateurAnoblisseurElementaire(ArmureGenerique, Accelerateur, Anoblisseur, Elementaire):
    """Une armure augmentant la vitesse et la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondPompeAPVTribal(ArmureGenerique, DefensifPlafond, PompeAPV, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVTribal(ArmureGenerique, DefensifProportion, PompeAPV, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVTribal(ArmureGenerique, DefensifSeuil, PompeAPV, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVTribal(ArmureGenerique, DefensifValeur, PompeAPV, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPMTribal(ArmureGenerique, DefensifPlafond, PompeAPM, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPMTribal(ArmureGenerique, DefensifProportion, PompeAPM, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPMTribal(ArmureGenerique, DefensifSeuil, PompeAPM, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPMTribal(ArmureGenerique, DefensifValeur, PompeAPM, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPMTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPM, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPMTribal(ArmureGenerique, DefensifProportion, RenforceRegenPM, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPMTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPM, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPMTribal(ArmureGenerique, DefensifValeur, RenforceRegenPM, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVPompeAPMTribal(ArmureGenerique, PompeAPV, PompeAPM, EquippementTribal):
    """Une armure pompant les PV et les PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVPompeAPMTribal(ArmureGenerique, RenforceRegenPV, PompeAPM, EquippementTribal):
    """Une armure renforçant la régénération des PV et pompant les PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVRenforceRegenPMTribal(ArmureGenerique, PompeAPV, RenforceRegenPM, EquippementTribal):
    """Une armure pompant les PV et renforçant la régénération des PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVRenforceRegenPMTribal(ArmureGenerique, RenforceRegenPV, RenforceRegenPM, EquippementTribal):
    """Une armure renforçant la régénération des PV et des PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondAccelerateurTribal(ArmureGenerique, DefensifPlafond, Accelerateur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionAccelerateurTribal(ArmureGenerique, DefensifProportion, Accelerateur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilAccelerateurTribal(ArmureGenerique, DefensifSeuil, Accelerateur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurAccelerateurTribal(ArmureGenerique, DefensifValeur, Accelerateur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVAccelerateurTribal(ArmureGenerique, PompeAPV, Accelerateur, EquippementTribal):
    """Une armure pompant les PV et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVAccelerateurTribal(ArmureGenerique, RenforceRegenPV, Accelerateur, EquippementTribal):
    """Une armure renforçant la régénération des PV et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPMAccelerateurTribal(ArmureGenerique, PompeAPM, Accelerateur, EquippementTribal):
    """Une armure pompant les PM et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPMAccelerateurTribal(ArmureGenerique, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Une armure renforçant la régénération des PM et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondAnoblisseurTribal(ArmureGenerique, DefensifPlafond, Anoblisseur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionAnoblisseurTribal(ArmureGenerique, DefensifProportion, Anoblisseur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilAnoblisseurTribal(ArmureGenerique, DefensifSeuil, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurAnoblisseurTribal(ArmureGenerique, DefensifValeur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVAnoblisseurTribal(ArmureGenerique, PompeAPV, Anoblisseur, EquippementTribal):
    """Une armure pompant les PV et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVAnoblisseurTribal(ArmureGenerique, RenforceRegenPV, Anoblisseur, EquippementTribal):
    """Une armure renforçant la régénération des PV et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPMAnoblisseurTribal(ArmureGenerique, PompeAPM, Anoblisseur, EquippementTribal):
    """Une armure pompant les PM et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPMAnoblisseurTribal(ArmureGenerique, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Une armure renforçant la régénération des PM et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureAccelerateurAnoblisseurTribal(ArmureGenerique, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure augmentant la vitesse et la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondElementaireTribal(ArmureGenerique, DefensifPlafond, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionElementaireTribal(ArmureGenerique, DefensifProportion, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilElementaireTribal(ArmureGenerique, DefensifSeuil, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurElementaireTribal(ArmureGenerique, DefensifValeur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVElementaireTribal(ArmureGenerique, PompeAPV, Elementaire, EquippementTribal):
    """Une armure pompant les PV et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVElementaireTribal(ArmureGenerique, RenforceRegenPV, Elementaire, EquippementTribal):
    """Une armure renforçant la régénération des PV et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPMElementaireTribal(ArmureGenerique, PompeAPM, Elementaire, EquippementTribal):
    """Une armure pompant les PM et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPMElementaireTribal(ArmureGenerique, RenforceRegenPM, Elementaire, EquippementTribal):
    """Une armure renforçant la régénération des PM et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureAccelerateurElementaireTribal(ArmureGenerique, Accelerateur, Elementaire, EquippementTribal):
    """Une armure augmentant la vitesse et l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureAnoblisseurElementaireTribal(ArmureGenerique, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure augmentant la priorité et l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVPompeAPMAccelerateur(ArmureGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur):
    """Une armure défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifProportionPompeAPVPompeAPMAccelerateur(ArmureGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur):
    """Une armure défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifSeuilPompeAPVPompeAPMAccelerateur(ArmureGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifValeurPompeAPVPompeAPMAccelerateur(ArmureGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifPlafondRenforceRegenPVPompeAPMAccelerateur(ArmureGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifProportionRenforceRegenPVPompeAPMAccelerateur(ArmureGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifSeuilRenforceRegenPVPompeAPMAccelerateur(ArmureGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifValeurRenforceRegenPVPompeAPMAccelerateur(ArmureGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifPlafondPompeAPVRenforceRegenPMAccelerateur(ArmureGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur):
    """Une armure défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifProportionPompeAPVRenforceRegenPMAccelerateur(ArmureGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur):
    """Une armure défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifSeuilPompeAPVRenforceRegenPMAccelerateur(ArmureGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifValeurPompeAPVRenforceRegenPMAccelerateur(ArmureGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateur(ArmureGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateur(ArmureGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateur(ArmureGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateur(ArmureGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class ArmureDefensifPlafondPompeAPVPompeAPMAnoblisseur(ArmureGenerique, DefensifPlafond, PompeAPV, PompeAPM, Anoblisseur):
    """Une armure défensif plafonnant les dégats et pompant les PV et les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifProportionPompeAPVPompeAPMAnoblisseur(ArmureGenerique, DefensifProportion, PompeAPV, PompeAPM, Anoblisseur):
    """Une armure défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifSeuilPompeAPVPompeAPMAnoblisseur(ArmureGenerique, DefensifSeuil, PompeAPV, PompeAPM, Anoblisseur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifValeurPompeAPVPompeAPMAnoblisseur(ArmureGenerique, DefensifValeur, PompeAPV, PompeAPM, Anoblisseur):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifPlafondRenforceRegenPVPompeAPMAnoblisseur(ArmureGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Anoblisseur):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifProportionRenforceRegenPVPompeAPMAnoblisseur(ArmureGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Anoblisseur):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifSeuilRenforceRegenPVPompeAPMAnoblisseur(ArmureGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Anoblisseur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifValeurRenforceRegenPVPompeAPMAnoblisseur(ArmureGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Anoblisseur):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifPlafondPompeAPVRenforceRegenPMAnoblisseur(ArmureGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Anoblisseur):
    """Une armure défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifProportionPompeAPVRenforceRegenPMAnoblisseur(ArmureGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Anoblisseur):
    """Une armure défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifSeuilPompeAPVRenforceRegenPMAnoblisseur(ArmureGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Anoblisseur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifValeurPompeAPVRenforceRegenPMAnoblisseur(ArmureGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Anoblisseur):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseur(ArmureGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Anoblisseur):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseur(ArmureGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Anoblisseur):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseur(ArmureGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Anoblisseur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseur(ArmureGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Anoblisseur):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifPlafondPompeAPVAccelerateurAnoblisseur(ArmureGenerique, DefensifPlafond, PompeAPV, Accelerateur, Anoblisseur):
    """Une armure défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifProportionPompeAPVAccelerateurAnoblisseur(ArmureGenerique, DefensifProportion, PompeAPV, Accelerateur, Anoblisseur):
    """Une armure défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifSeuilPompeAPVAccelerateurAnoblisseur(ArmureGenerique, DefensifSeuil, PompeAPV, Accelerateur, Anoblisseur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifValeurPompeAPVAccelerateurAnoblisseur(ArmureGenerique, DefensifValeur, PompeAPV, Accelerateur, Anoblisseur):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifPlafondRenforceRegenPVAccelerateurAnoblisseur(ArmureGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, Anoblisseur):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifProportionRenforceRegenPVAccelerateurAnoblisseur(ArmureGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, Anoblisseur):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifSeuilRenforceRegenPVAccelerateurAnoblisseur(ArmureGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, Anoblisseur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifValeurRenforceRegenPVAccelerateurAnoblisseur(ArmureGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, Anoblisseur):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifPlafondPompeAPMAccelerateurAnoblisseur(ArmureGenerique, DefensifPlafond, PompeAPM, Accelerateur, Anoblisseur):
    """Une armure défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifProportionPompeAPMAccelerateurAnoblisseur(ArmureGenerique, DefensifProportion, PompeAPM, Accelerateur, Anoblisseur):
    """Une armure défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifSeuilPompeAPMAccelerateurAnoblisseur(ArmureGenerique, DefensifSeuil, PompeAPM, Accelerateur, Anoblisseur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifValeurPompeAPMAccelerateurAnoblisseur(ArmureGenerique, DefensifValeur, PompeAPM, Accelerateur, Anoblisseur):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifPlafondRenforceRegenPMAccelerateurAnoblisseur(ArmureGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifProportionRenforceRegenPMAccelerateurAnoblisseur(ArmureGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifSeuilRenforceRegenPMAccelerateurAnoblisseur(ArmureGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifValeurRenforceRegenPMAccelerateurAnoblisseur(ArmureGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmurePompeAPVPompeAPMAccelerateurAnoblisseur(ArmureGenerique, PompeAPV, PompeAPM, Accelerateur, Anoblisseur):
    """Une armure pompant les PV et les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureRenforceRegenPVPompeAPMAccelerateurAnoblisseur(ArmureGenerique, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur):
    """Une armure renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmurePompeAPVRenforceRegenPMAccelerateurAnoblisseur(ArmureGenerique, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Une armure pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur(ArmureGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Une armure renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifPlafondPompeAPVPompeAPMElementaire(ArmureGenerique, DefensifPlafond, PompeAPV, PompeAPM, Elementaire):
    """Une armure défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionPompeAPVPompeAPMElementaire(ArmureGenerique, DefensifProportion, PompeAPV, PompeAPM, Elementaire):
    """Une armure défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilPompeAPVPompeAPMElementaire(ArmureGenerique, DefensifSeuil, PompeAPV, PompeAPM, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurPompeAPVPompeAPMElementaire(ArmureGenerique, DefensifValeur, PompeAPV, PompeAPM, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondRenforceRegenPVPompeAPMElementaire(ArmureGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Elementaire):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionRenforceRegenPVPompeAPMElementaire(ArmureGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Elementaire):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilRenforceRegenPVPompeAPMElementaire(ArmureGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurRenforceRegenPVPompeAPMElementaire(ArmureGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondPompeAPVRenforceRegenPMElementaire(ArmureGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Elementaire):
    """Une armure défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionPompeAPVRenforceRegenPMElementaire(ArmureGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Elementaire):
    """Une armure défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilPompeAPVRenforceRegenPMElementaire(ArmureGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurPompeAPVRenforceRegenPMElementaire(ArmureGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMElementaire(ArmureGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Elementaire):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionRenforceRegenPVRenforceRegenPMElementaire(ArmureGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Elementaire):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMElementaire(ArmureGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurRenforceRegenPVRenforceRegenPMElementaire(ArmureGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondPompeAPVAccelerateurElementaire(ArmureGenerique, DefensifPlafond, PompeAPV, Accelerateur, Elementaire):
    """Une armure défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionPompeAPVAccelerateurElementaire(ArmureGenerique, DefensifProportion, PompeAPV, Accelerateur, Elementaire):
    """Une armure défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilPompeAPVAccelerateurElementaire(ArmureGenerique, DefensifSeuil, PompeAPV, Accelerateur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurPompeAPVAccelerateurElementaire(ArmureGenerique, DefensifValeur, PompeAPV, Accelerateur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondRenforceRegenPVAccelerateurElementaire(ArmureGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, Elementaire):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionRenforceRegenPVAccelerateurElementaire(ArmureGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, Elementaire):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilRenforceRegenPVAccelerateurElementaire(ArmureGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurRenforceRegenPVAccelerateurElementaire(ArmureGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondPompeAPMAccelerateurElementaire(ArmureGenerique, DefensifPlafond, PompeAPM, Accelerateur, Elementaire):
    """Une armure défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionPompeAPMAccelerateurElementaire(ArmureGenerique, DefensifProportion, PompeAPM, Accelerateur, Elementaire):
    """Une armure défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilPompeAPMAccelerateurElementaire(ArmureGenerique, DefensifSeuil, PompeAPM, Accelerateur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurPompeAPMAccelerateurElementaire(ArmureGenerique, DefensifValeur, PompeAPM, Accelerateur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondRenforceRegenPMAccelerateurElementaire(ArmureGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, Elementaire):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PM et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionRenforceRegenPMAccelerateurElementaire(ArmureGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, Elementaire):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PM et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilRenforceRegenPMAccelerateurElementaire(ArmureGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurRenforceRegenPMAccelerateurElementaire(ArmureGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmurePompeAPVPompeAPMAccelerateurElementaire(ArmureGenerique, PompeAPV, PompeAPM, Accelerateur, Elementaire):
    """Une armure pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureRenforceRegenPVPompeAPMAccelerateurElementaire(ArmureGenerique, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire):
    """Une armure renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmurePompeAPVRenforceRegenPMAccelerateurElementaire(ArmureGenerique, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Une armure pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureRenforceRegenPVRenforceRegenPMAccelerateurElementaire(ArmureGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Une armure renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondPompeAPVAnoblisseurElementaire(ArmureGenerique, DefensifPlafond, PompeAPV, Anoblisseur, Elementaire):
    """Une armure défensif plafonnant les dégats et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionPompeAPVAnoblisseurElementaire(ArmureGenerique, DefensifProportion, PompeAPV, Anoblisseur, Elementaire):
    """Une armure défensif proportionnel aux dégats et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilPompeAPVAnoblisseurElementaire(ArmureGenerique, DefensifSeuil, PompeAPV, Anoblisseur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurPompeAPVAnoblisseurElementaire(ArmureGenerique, DefensifValeur, PompeAPV, Anoblisseur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondRenforceRegenPVAnoblisseurElementaire(ArmureGenerique, DefensifPlafond, RenforceRegenPV, Anoblisseur, Elementaire):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionRenforceRegenPVAnoblisseurElementaire(ArmureGenerique, DefensifProportion, RenforceRegenPV, Anoblisseur, Elementaire):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilRenforceRegenPVAnoblisseurElementaire(ArmureGenerique, DefensifSeuil, RenforceRegenPV, Anoblisseur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurRenforceRegenPVAnoblisseurElementaire(ArmureGenerique, DefensifValeur, RenforceRegenPV, Anoblisseur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondPompeAPMAnoblisseurElementaire(ArmureGenerique, DefensifPlafond, PompeAPM, Anoblisseur, Elementaire):
    """Une armure défensif plafonnant les dégats et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionPompeAPMAnoblisseurElementaire(ArmureGenerique, DefensifProportion, PompeAPM, Anoblisseur, Elementaire):
    """Une armure défensif proportionnel aux dégats et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilPompeAPMAnoblisseurElementaire(ArmureGenerique, DefensifSeuil, PompeAPM, Anoblisseur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurPompeAPMAnoblisseurElementaire(ArmureGenerique, DefensifValeur, PompeAPM, Anoblisseur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondRenforceRegenPMAnoblisseurElementaire(ArmureGenerique, DefensifPlafond, RenforceRegenPM, Anoblisseur, Elementaire):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionRenforceRegenPMAnoblisseurElementaire(ArmureGenerique, DefensifProportion, RenforceRegenPM, Anoblisseur, Elementaire):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilRenforceRegenPMAnoblisseurElementaire(ArmureGenerique, DefensifSeuil, RenforceRegenPM, Anoblisseur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurRenforceRegenPMAnoblisseurElementaire(ArmureGenerique, DefensifValeur, RenforceRegenPM, Anoblisseur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmurePompeAPVPompeAPMAnoblisseurElementaire(ArmureGenerique, PompeAPV, PompeAPM, Anoblisseur, Elementaire):
    """Une armure pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureRenforceRegenPVPompeAPMAnoblisseurElementaire(ArmureGenerique, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire):
    """Une armure renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmurePompeAPVRenforceRegenPMAnoblisseurElementaire(ArmureGenerique, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Une armure pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureRenforceRegenPVRenforceRegenPMAnoblisseurElementaire(ArmureGenerique, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Une armure renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifPlafond, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif plafonnant les dégats et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifProportion, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif proportionnel aux dégats et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifSeuil, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifValeur, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmurePompeAPVAccelerateurAnoblisseurElementaire(ArmureGenerique, PompeAPV, Accelerateur, Anoblisseur, Elementaire):
    """Une armure pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureRenforceRegenPVAccelerateurAnoblisseurElementaire(ArmureGenerique, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire):
    """Une armure renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmurePompeAPMAccelerateurAnoblisseurElementaire(ArmureGenerique, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureRenforceRegenPMAccelerateurAnoblisseurElementaire(ArmureGenerique, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondPompeAPVPompeAPMTribal(ArmureGenerique, DefensifPlafond, PompeAPV, PompeAPM, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVPompeAPMTribal(ArmureGenerique, DefensifProportion, PompeAPV, PompeAPM, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVPompeAPMTribal(ArmureGenerique, DefensifSeuil, PompeAPV, PompeAPM, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVPompeAPMTribal(ArmureGenerique, DefensifValeur, PompeAPV, PompeAPM, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVPompeAPMTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVPompeAPMTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVPompeAPMTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVPompeAPMTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVRenforceRegenPMTribal(ArmureGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVRenforceRegenPMTribal(ArmureGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVRenforceRegenPMTribal(ArmureGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVRenforceRegenPMTribal(ArmureGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVRenforceRegenPMTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVRenforceRegenPMTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVAccelerateurTribal(ArmureGenerique, DefensifPlafond, PompeAPV, Accelerateur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVAccelerateurTribal(ArmureGenerique, DefensifProportion, PompeAPV, Accelerateur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVAccelerateurTribal(ArmureGenerique, DefensifSeuil, PompeAPV, Accelerateur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVAccelerateurTribal(ArmureGenerique, DefensifValeur, PompeAPV, Accelerateur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVAccelerateurTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVAccelerateurTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVAccelerateurTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVAccelerateurTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPMAccelerateurTribal(ArmureGenerique, DefensifPlafond, PompeAPM, Accelerateur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPMAccelerateurTribal(ArmureGenerique, DefensifProportion, PompeAPM, Accelerateur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPMAccelerateurTribal(ArmureGenerique, DefensifSeuil, PompeAPM, Accelerateur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPMAccelerateurTribal(ArmureGenerique, DefensifValeur, PompeAPM, Accelerateur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPMAccelerateurTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPMAccelerateurTribal(ArmureGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPMAccelerateurTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPMAccelerateurTribal(ArmureGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVPompeAPMAccelerateurTribal(ArmureGenerique, PompeAPV, PompeAPM, Accelerateur, EquippementTribal):
    """Une armure pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVPompeAPMAccelerateurTribal(ArmureGenerique, RenforceRegenPV, PompeAPM, Accelerateur, EquippementTribal):
    """Une armure renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVRenforceRegenPMAccelerateurTribal(ArmureGenerique, PompeAPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Une armure pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVRenforceRegenPMAccelerateurTribal(ArmureGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Une armure renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVAnoblisseurTribal(ArmureGenerique, DefensifPlafond, PompeAPV, Anoblisseur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVAnoblisseurTribal(ArmureGenerique, DefensifProportion, PompeAPV, Anoblisseur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVAnoblisseurTribal(ArmureGenerique, DefensifSeuil, PompeAPV, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVAnoblisseurTribal(ArmureGenerique, DefensifValeur, PompeAPV, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVAnoblisseurTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, Anoblisseur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVAnoblisseurTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, Anoblisseur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVAnoblisseurTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVAnoblisseurTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPMAnoblisseurTribal(ArmureGenerique, DefensifPlafond, PompeAPM, Anoblisseur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPMAnoblisseurTribal(ArmureGenerique, DefensifProportion, PompeAPM, Anoblisseur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPMAnoblisseurTribal(ArmureGenerique, DefensifSeuil, PompeAPM, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPMAnoblisseurTribal(ArmureGenerique, DefensifValeur, PompeAPM, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPMAnoblisseurTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPMAnoblisseurTribal(ArmureGenerique, DefensifProportion, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPMAnoblisseurTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPMAnoblisseurTribal(ArmureGenerique, DefensifValeur, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVPompeAPMAnoblisseurTribal(ArmureGenerique, PompeAPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Une armure pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVPompeAPMAnoblisseurTribal(ArmureGenerique, RenforceRegenPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Une armure renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVRenforceRegenPMAnoblisseurTribal(ArmureGenerique, PompeAPV, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Une armure pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVRenforceRegenPMAnoblisseurTribal(ArmureGenerique, RenforceRegenPV, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Une armure renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifPlafond, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifProportion, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifSeuil, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifValeur, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVAccelerateurAnoblisseurTribal(ArmureGenerique, PompeAPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVAccelerateurAnoblisseurTribal(ArmureGenerique, RenforceRegenPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPMAccelerateurAnoblisseurTribal(ArmureGenerique, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPMAccelerateurAnoblisseurTribal(ArmureGenerique, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVElementaireTribal(ArmureGenerique, DefensifPlafond, PompeAPV, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVElementaireTribal(ArmureGenerique, DefensifProportion, PompeAPV, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVElementaireTribal(ArmureGenerique, DefensifSeuil, PompeAPV, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVElementaireTribal(ArmureGenerique, DefensifValeur, PompeAPV, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVElementaireTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVElementaireTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVElementaireTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVElementaireTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPMElementaireTribal(ArmureGenerique, DefensifPlafond, PompeAPM, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPMElementaireTribal(ArmureGenerique, DefensifProportion, PompeAPM, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPMElementaireTribal(ArmureGenerique, DefensifSeuil, PompeAPM, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPMElementaireTribal(ArmureGenerique, DefensifValeur, PompeAPM, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPMElementaireTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPM, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPMElementaireTribal(ArmureGenerique, DefensifProportion, RenforceRegenPM, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPMElementaireTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPM, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPMElementaireTribal(ArmureGenerique, DefensifValeur, RenforceRegenPM, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVPompeAPMElementaireTribal(ArmureGenerique, PompeAPV, PompeAPM, Elementaire, EquippementTribal):
    """Une armure pompant les PV et les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVPompeAPMElementaireTribal(ArmureGenerique, RenforceRegenPV, PompeAPM, Elementaire, EquippementTribal):
    """Une armure renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVRenforceRegenPMElementaireTribal(ArmureGenerique, PompeAPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Une armure pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVRenforceRegenPMElementaireTribal(ArmureGenerique, RenforceRegenPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Une armure renforçant la régénération des PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondAccelerateurElementaireTribal(ArmureGenerique, DefensifPlafond, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionAccelerateurElementaireTribal(ArmureGenerique, DefensifProportion, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilAccelerateurElementaireTribal(ArmureGenerique, DefensifSeuil, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurAccelerateurElementaireTribal(ArmureGenerique, DefensifValeur, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVAccelerateurElementaireTribal(ArmureGenerique, PompeAPV, Accelerateur, Elementaire, EquippementTribal):
    """Une armure pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVAccelerateurElementaireTribal(ArmureGenerique, RenforceRegenPV, Accelerateur, Elementaire, EquippementTribal):
    """Une armure renforçant la régénération des PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPMAccelerateurElementaireTribal(ArmureGenerique, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPMAccelerateurElementaireTribal(ArmureGenerique, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondAnoblisseurElementaireTribal(ArmureGenerique, DefensifPlafond, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionAnoblisseurElementaireTribal(ArmureGenerique, DefensifProportion, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilAnoblisseurElementaireTribal(ArmureGenerique, DefensifSeuil, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurAnoblisseurElementaireTribal(ArmureGenerique, DefensifValeur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVAnoblisseurElementaireTribal(ArmureGenerique, PompeAPV, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVAnoblisseurElementaireTribal(ArmureGenerique, RenforceRegenPV, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPMAnoblisseurElementaireTribal(ArmureGenerique, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPMAnoblisseurElementaireTribal(ArmureGenerique, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseur(ArmureGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, Anoblisseur):
    """Une armure défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseur(ArmureGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, Anoblisseur):
    """Une armure défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseur(ArmureGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, Anoblisseur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseur(ArmureGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, Anoblisseur):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseur(ArmureGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseur(ArmureGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseur(ArmureGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseur(ArmureGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseur(ArmureGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Une armure défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseur(ArmureGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Une armure défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseur(ArmureGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseur(ArmureGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur(ArmureGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur(ArmureGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur(ArmureGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur(ArmureGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class ArmureDefensifPlafondPompeAPVPompeAPMAccelerateurElementaire(ArmureGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, Elementaire):
    """Une armure défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionPompeAPVPompeAPMAccelerateurElementaire(ArmureGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, Elementaire):
    """Une armure défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilPompeAPVPompeAPMAccelerateurElementaire(ArmureGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurPompeAPVPompeAPMAccelerateurElementaire(ArmureGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondRenforceRegenPVPompeAPMAccelerateurElementaire(ArmureGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionRenforceRegenPVPompeAPMAccelerateurElementaire(ArmureGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilRenforceRegenPVPompeAPMAccelerateurElementaire(ArmureGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurRenforceRegenPVPompeAPMAccelerateurElementaire(ArmureGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondPompeAPVRenforceRegenPMAccelerateurElementaire(ArmureGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Une armure défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionPompeAPVRenforceRegenPMAccelerateurElementaire(ArmureGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Une armure défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilPompeAPVRenforceRegenPMAccelerateurElementaire(ArmureGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurPompeAPVRenforceRegenPMAccelerateurElementaire(ArmureGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurElementaire(ArmureGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurElementaire(ArmureGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurElementaire(ArmureGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurElementaire(ArmureGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondPompeAPVPompeAPMAnoblisseurElementaire(ArmureGenerique, DefensifPlafond, PompeAPV, PompeAPM, Anoblisseur, Elementaire):
    """Une armure défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionPompeAPVPompeAPMAnoblisseurElementaire(ArmureGenerique, DefensifProportion, PompeAPV, PompeAPM, Anoblisseur, Elementaire):
    """Une armure défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilPompeAPVPompeAPMAnoblisseurElementaire(ArmureGenerique, DefensifSeuil, PompeAPV, PompeAPM, Anoblisseur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurPompeAPVPompeAPMAnoblisseurElementaire(ArmureGenerique, DefensifValeur, PompeAPV, PompeAPM, Anoblisseur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondRenforceRegenPVPompeAPMAnoblisseurElementaire(ArmureGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionRenforceRegenPVPompeAPMAnoblisseurElementaire(ArmureGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilRenforceRegenPVPompeAPMAnoblisseurElementaire(ArmureGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurRenforceRegenPVPompeAPMAnoblisseurElementaire(ArmureGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondPompeAPVRenforceRegenPMAnoblisseurElementaire(ArmureGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Une armure défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionPompeAPVRenforceRegenPMAnoblisseurElementaire(ArmureGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Une armure défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilPompeAPVRenforceRegenPMAnoblisseurElementaire(ArmureGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurPompeAPVRenforceRegenPMAnoblisseurElementaire(ArmureGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseurElementaire(ArmureGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseurElementaire(ArmureGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseurElementaire(ArmureGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseurElementaire(ArmureGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondPompeAPVAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifPlafond, PompeAPV, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionPompeAPVAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifProportion, PompeAPV, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilPompeAPVAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifSeuil, PompeAPV, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurPompeAPVAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifValeur, PompeAPV, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondRenforceRegenPVAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionRenforceRegenPVAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilRenforceRegenPVAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurRenforceRegenPVAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondPompeAPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifPlafond, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionPompeAPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifProportion, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilPompeAPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifSeuil, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurPompeAPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifValeur, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondRenforceRegenPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionRenforceRegenPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilRenforceRegenPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurRenforceRegenPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmurePompeAPVPompeAPMAccelerateurAnoblisseurElementaire(ArmureGenerique, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire(ArmureGenerique, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmurePompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire(ArmureGenerique, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire(ArmureGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondPompeAPVPompeAPMAccelerateurTribal(ArmureGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVPompeAPMAccelerateurTribal(ArmureGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVPompeAPMAccelerateurTribal(ArmureGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVPompeAPMAccelerateurTribal(ArmureGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVPompeAPMAccelerateurTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVPompeAPMAccelerateurTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVPompeAPMAccelerateurTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVPompeAPMAccelerateurTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVRenforceRegenPMAccelerateurTribal(ArmureGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVRenforceRegenPMAccelerateurTribal(ArmureGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVRenforceRegenPMAccelerateurTribal(ArmureGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVRenforceRegenPMAccelerateurTribal(ArmureGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVPompeAPMAnoblisseurTribal(ArmureGenerique, DefensifPlafond, PompeAPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVPompeAPMAnoblisseurTribal(ArmureGenerique, DefensifProportion, PompeAPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVPompeAPMAnoblisseurTribal(ArmureGenerique, DefensifSeuil, PompeAPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVPompeAPMAnoblisseurTribal(ArmureGenerique, DefensifValeur, PompeAPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVPompeAPMAnoblisseurTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVPompeAPMAnoblisseurTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVPompeAPMAnoblisseurTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVPompeAPMAnoblisseurTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVRenforceRegenPMAnoblisseurTribal(ArmureGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVRenforceRegenPMAnoblisseurTribal(ArmureGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVRenforceRegenPMAnoblisseurTribal(ArmureGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVRenforceRegenPMAnoblisseurTribal(ArmureGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseurTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseurTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseurTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseurTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifPlafond, PompeAPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifProportion, PompeAPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifSeuil, PompeAPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifValeur, PompeAPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifPlafond, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifProportion, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifSeuil, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifValeur, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVPompeAPMAccelerateurAnoblisseurTribal(ArmureGenerique, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal(ArmureGenerique, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal(ArmureGenerique, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal(ArmureGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVPompeAPMElementaireTribal(ArmureGenerique, DefensifPlafond, PompeAPV, PompeAPM, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVPompeAPMElementaireTribal(ArmureGenerique, DefensifProportion, PompeAPV, PompeAPM, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVPompeAPMElementaireTribal(ArmureGenerique, DefensifSeuil, PompeAPV, PompeAPM, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVPompeAPMElementaireTribal(ArmureGenerique, DefensifValeur, PompeAPV, PompeAPM, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVPompeAPMElementaireTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVPompeAPMElementaireTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVPompeAPMElementaireTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVPompeAPMElementaireTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVRenforceRegenPMElementaireTribal(ArmureGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVRenforceRegenPMElementaireTribal(ArmureGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVRenforceRegenPMElementaireTribal(ArmureGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVRenforceRegenPMElementaireTribal(ArmureGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMElementaireTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVRenforceRegenPMElementaireTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMElementaireTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVRenforceRegenPMElementaireTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVAccelerateurElementaireTribal(ArmureGenerique, DefensifPlafond, PompeAPV, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVAccelerateurElementaireTribal(ArmureGenerique, DefensifProportion, PompeAPV, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVAccelerateurElementaireTribal(ArmureGenerique, DefensifSeuil, PompeAPV, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVAccelerateurElementaireTribal(ArmureGenerique, DefensifValeur, PompeAPV, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVAccelerateurElementaireTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVAccelerateurElementaireTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVAccelerateurElementaireTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVAccelerateurElementaireTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPMAccelerateurElementaireTribal(ArmureGenerique, DefensifPlafond, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPMAccelerateurElementaireTribal(ArmureGenerique, DefensifProportion, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPMAccelerateurElementaireTribal(ArmureGenerique, DefensifSeuil, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPMAccelerateurElementaireTribal(ArmureGenerique, DefensifValeur, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPMAccelerateurElementaireTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPMAccelerateurElementaireTribal(ArmureGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPMAccelerateurElementaireTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPMAccelerateurElementaireTribal(ArmureGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVPompeAPMAccelerateurElementaireTribal(ArmureGenerique, PompeAPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVPompeAPMAccelerateurElementaireTribal(ArmureGenerique, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVRenforceRegenPMAccelerateurElementaireTribal(ArmureGenerique, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal(ArmureGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure renforçant la régénération des PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVAnoblisseurElementaireTribal(ArmureGenerique, DefensifPlafond, PompeAPV, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVAnoblisseurElementaireTribal(ArmureGenerique, DefensifProportion, PompeAPV, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVAnoblisseurElementaireTribal(ArmureGenerique, DefensifSeuil, PompeAPV, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVAnoblisseurElementaireTribal(ArmureGenerique, DefensifValeur, PompeAPV, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVAnoblisseurElementaireTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVAnoblisseurElementaireTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVAnoblisseurElementaireTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVAnoblisseurElementaireTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifPlafond, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifProportion, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifSeuil, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifValeur, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifProportion, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifValeur, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVPompeAPMAnoblisseurElementaireTribal(ArmureGenerique, PompeAPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure pompant les PV et les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVPompeAPMAnoblisseurElementaireTribal(ArmureGenerique, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVRenforceRegenPMAnoblisseurElementaireTribal(ArmureGenerique, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal(ArmureGenerique, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure renforçant la régénération des PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifPlafond, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifProportion, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifSeuil, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifValeur, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, PompeAPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure renforçant la régénération des PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire(ArmureGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class ArmureDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVPompeAPMAccelerateurElementaireTribal(ArmureGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVPompeAPMAccelerateurElementaireTribal(ArmureGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVPompeAPMAccelerateurElementaireTribal(ArmureGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVPompeAPMAccelerateurElementaireTribal(ArmureGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVPompeAPMAccelerateurElementaireTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVPompeAPMAccelerateurElementaireTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVPompeAPMAccelerateurElementaireTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVPompeAPMAccelerateurElementaireTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVRenforceRegenPMAccelerateurElementaireTribal(ArmureGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVRenforceRegenPMAccelerateurElementaireTribal(ArmureGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVRenforceRegenPMAccelerateurElementaireTribal(ArmureGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVRenforceRegenPMAccelerateurElementaireTribal(ArmureGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVPompeAPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifPlafond, PompeAPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVPompeAPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifProportion, PompeAPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVPompeAPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifSeuil, PompeAPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVPompeAPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifValeur, PompeAPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVPompeAPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVPompeAPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVPompeAPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVPompeAPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVRenforceRegenPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVRenforceRegenPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVRenforceRegenPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVRenforceRegenPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifPlafond, PompeAPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifProportion, PompeAPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifSeuil, PompeAPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifValeur, PompeAPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifPlafond, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifProportion, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifSeuil, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifValeur, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmurePompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(ArmureGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Une armure défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        ArmureGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeGenerique(Heaume, EquippementGenerique):
    """Un heaume générique, avec les arguments utilisés par tous les heaumes."""

class HeaumeDefensifPlafond(HeaumeGenerique, DefensifPlafond):
    """Un heaume défensif plafonnant les dégats."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)

class HeaumeDefensifProportion(HeaumeGenerique, DefensifProportion):
    """Un heaume défensif proportionnel aux dégats."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)

class HeaumeDefensifSeuil(HeaumeGenerique, DefensifSeuil):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)

class HeaumeDefensifValeur(HeaumeGenerique, DefensifValeur):
    """Un heaume défensif bloquant une valeur fixe de dégats."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)

class HeaumePompeAPV(HeaumeGenerique, PompeAPV):
    """Un heaume pompant les PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)

class HeaumeRenforceRegenPV(HeaumeGenerique, RenforceRegenPV):
    """Un heaume renforçant la régénération des PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)

class HeaumePompeAPM(HeaumeGenerique, PompeAPM):
    """Un heaume pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class HeaumeRenforceRegenPM(HeaumeGenerique, RenforceRegenPM):
    """Un heaume renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class HeaumeAccelerateur(HeaumeGenerique, Accelerateur):
    """Un heaume qui augmente la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeAnoblisseur(HeaumeGenerique, Anoblisseur):
    """Un heaume qui augmente la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeElementaire(HeaumeGenerique, Elementaire):
    """Un heaume qui renforce l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeTribal(HeaumeGenerique, EquippementTribal):
    """Un heaume qui est dédié à une espèce."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPV(HeaumeGenerique, DefensifPlafond, PompeAPV):
    """Un heaume défensif plafonnant les dégats et pompant les PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)

class HeaumeDefensifPlafondRenforceRegenPV(HeaumeGenerique, DefensifPlafond, RenforceRegenPV):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)

class HeaumeDefensifProportionPompeAPV(HeaumeGenerique, DefensifProportion, PompeAPV):
    """Un heaume défensif proportionnel aux dégats et pompant les PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)

class HeaumeDefensifProportionRenforceRegenPV(HeaumeGenerique, DefensifProportion, RenforceRegenPV):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)

class HeaumeDefensifSeuilPompeAPV(HeaumeGenerique, DefensifSeuil, PompeAPV):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)

class HeaumeDefensifSeuilRenforceRegenPV(HeaumeGenerique, DefensifSeuil, RenforceRegenPV):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)

class HeaumeDefensifValeurPompeAPV(HeaumeGenerique, DefensifValeur, PompeAPV):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)

class HeaumeDefensifValeurRenforceRegenPV(HeaumeGenerique, DefensifValeur, RenforceRegenPV):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)

class HeaumeDefensifPlafondPompeAPM(HeaumeGenerique, DefensifPlafond, PompeAPM):
    """Un heaume défensif plafonnant les dégats et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifPlafondRenforceRegenPM(HeaumeGenerique, DefensifPlafond, RenforceRegenPM):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifProportionPompeAPM(HeaumeGenerique, DefensifProportion, PompeAPM):
    """Un heaume défensif proportionnel aux dégats et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifProportionRenforceRegenPM(HeaumeGenerique, DefensifProportion, RenforceRegenPM):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifSeuilPompeAPM(HeaumeGenerique, DefensifSeuil, PompeAPM):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifSeuilRenforceRegenPM(HeaumeGenerique, DefensifSeuil, RenforceRegenPM):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifValeurPompeAPM(HeaumeGenerique, DefensifValeur, PompeAPM):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifValeurRenforceRegenPM(HeaumeGenerique, DefensifValeur, RenforceRegenPM):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class HeaumePompeAPVPompeAPM(HeaumeGenerique, PompeAPV, PompeAPM):
    """Un heaume pompant les PV et les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class HeaumePompeAPVRenforceRegenPM(HeaumeGenerique, PompeAPV, RenforceRegenPM):
    """Un heaume pompant les PV et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class HeaumeRenforceRegenPVPompeAPM(HeaumeGenerique, RenforceRegenPV, PompeAPM):
    """Un heaume renforçant la régénération des PV et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class HeaumeRenforceRegenPVRenforceRegenPM(HeaumeGenerique, RenforceRegenPV, RenforceRegenPM):
    """Un heaume renforçant la régénération des PV et des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifPlafondAccelerateur(HeaumeGenerique, DefensifPlafond, Accelerateur):
    """Un heaume défensif plafonnant les dégats et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifProportionAccelerateur(HeaumeGenerique, DefensifProportion, Accelerateur):
    """Un heaume défensif proportionnel aux dégats et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifSeuilAccelerateur(HeaumeGenerique, DefensifSeuil, Accelerateur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifValeurAccelerateur(HeaumeGenerique, DefensifValeur, Accelerateur):
    """Un heaume défensif bloquant une valeur fixe de dégats et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumePompeAPVAccelerateur(HeaumeGenerique, PompeAPV, Accelerateur):
    """Un heaume pompant les PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeRenforceRegenPVAccelerateur(HeaumeGenerique, RenforceRegenPV, Accelerateur):
    """Un heaume renforçant la régénération des PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumePompeAPMAccelerateur(HeaumeGenerique, PompeAPM, Accelerateur):
    """Un heaume pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeRenforceRegenPMAccelerateur(HeaumeGenerique, RenforceRegenPM, Accelerateur):
    """Un heaume renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifPlafondAnoblisseur(HeaumeGenerique, DefensifPlafond, Anoblisseur):
    """Un heaume défensif plafonnant les dégats et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifProportionAnoblisseur(HeaumeGenerique, DefensifProportion, Anoblisseur):
    """Un heaume défensif proportionnel aux dégats et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifSeuilAnoblisseur(HeaumeGenerique, DefensifSeuil, Anoblisseur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifValeurAnoblisseur(HeaumeGenerique, DefensifValeur, Anoblisseur):
    """Un heaume défensif bloquant une valeur fixe de dégats et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumePompeAPVAnoblisseur(HeaumeGenerique, PompeAPV, Anoblisseur):
    """Un heaume pompant les PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeRenforceRegenPVAnoblisseur(HeaumeGenerique, RenforceRegenPV, Anoblisseur):
    """Un heaume renforçant la régénération des PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumePompeAPMAnoblisseur(HeaumeGenerique, PompeAPM, Anoblisseur):
    """Un heaume pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeRenforceRegenPMAnoblisseur(HeaumeGenerique, RenforceRegenPM, Anoblisseur):
    """Un heaume renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeAccelerateurAnoblisseur(HeaumeGenerique, Accelerateur, Anoblisseur):
    """Un heaume augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifPlafondElementaire(HeaumeGenerique, DefensifPlafond, Elementaire):
    """Un heaume défensif plafonnant les dégats et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionElementaire(HeaumeGenerique, DefensifProportion, Elementaire):
    """Un heaume défensif proportionnel aux dégats et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilElementaire(HeaumeGenerique, DefensifSeuil, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurElementaire(HeaumeGenerique, DefensifValeur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumePompeAPVElementaire(HeaumeGenerique, PompeAPV, Elementaire):
    """Un heaume pompant les PV et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeRenforceRegenPVElementaire(HeaumeGenerique, RenforceRegenPV, Elementaire):
    """Un heaume renforçant la régénération des PV et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumePompeAPMElementaire(HeaumeGenerique, PompeAPM, Elementaire):
    """Un heaume pompant les PM et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeRenforceRegenPMElementaire(HeaumeGenerique, RenforceRegenPM, Elementaire):
    """Un heaume renforçant la régénération des PM et augmentant l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeAccelerateurElementaire(HeaumeGenerique, Accelerateur, Elementaire):
    """Un heaume augmentant la vitesse et l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeAnoblisseurElementaire(HeaumeGenerique, Anoblisseur, Elementaire):
    """Un heaume augmentant la priorité et l'affinité à un élément."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondTribal(HeaumeGenerique, DefensifPlafond, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionTribal(HeaumeGenerique, DefensifProportion, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilTribal(HeaumeGenerique, DefensifSeuil, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurTribal(HeaumeGenerique, DefensifValeur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVTribal(HeaumeGenerique, PompeAPV, EquippementTribal):
    """Un heaume pompant les PV et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVTribal(HeaumeGenerique, RenforceRegenPV, EquippementTribal):
    """Un heaume renforçant la régénération des PV et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPMTribal(HeaumeGenerique, PompeAPM, EquippementTribal):
    """Un heaume pompant les PM et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPMTribal(HeaumeGenerique, RenforceRegenPM, EquippementTribal):
    """Un heaume renforçant la régénération des PM et augmentant l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeAccelerateurTribal(HeaumeGenerique, Accelerateur, EquippementTribal):
    """Un heaume augmentant la vitesse et l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeAnoblisseurTribal(HeaumeGenerique, Anoblisseur, EquippementTribal):
    """Un heaume augmentant la priorité et l'affinité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeElementaireTribal(HeaumeGenerique, Elementaire, EquippementTribal):
    """Un heaume augmentant l'affinité à un élément et l'affinité à une espèce."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        assert _element is not None
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVPompeAPM(HeaumeGenerique, DefensifPlafond, PompeAPV, PompeAPM):
    """Un heaume défensif plafonnant les dégats et pompant les PV et les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifProportionPompeAPVPompeAPM(HeaumeGenerique, DefensifProportion, PompeAPV, PompeAPM):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifSeuilPompeAPVPompeAPM(HeaumeGenerique, DefensifSeuil, PompeAPV, PompeAPM):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifValeurPompeAPVPompeAPM(HeaumeGenerique, DefensifValeur, PompeAPV, PompeAPM):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifPlafondRenforceRegenPVPompeAPM(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifProportionRenforceRegenPVPompeAPM(HeaumeGenerique, DefensifProportion, RenforceRegenPV, PompeAPM):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifSeuilRenforceRegenPVPompeAPM(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifValeurRenforceRegenPVPompeAPM(HeaumeGenerique, DefensifValeur, RenforceRegenPV, PompeAPM):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifPlafondPompeAPVRenforceRegenPM(HeaumeGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM):
    """Un heaume défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifProportionPompeAPVRenforceRegenPM(HeaumeGenerique, DefensifProportion, PompeAPV, RenforceRegenPM):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifSeuilPompeAPVRenforceRegenPM(HeaumeGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifValeurPompeAPVRenforceRegenPM(HeaumeGenerique, DefensifValeur, PompeAPV, RenforceRegenPM):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPM(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifProportionRenforceRegenPVRenforceRegenPM(HeaumeGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPM(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifValeurRenforceRegenPVRenforceRegenPM(HeaumeGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)

class HeaumeDefensifPlafondPompeAPVAccelerateur(HeaumeGenerique, DefensifPlafond, PompeAPV, Accelerateur):
    """Un heaume défensif plafonnant les dégats et pompant les PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifProportionPompeAPVAccelerateur(HeaumeGenerique, DefensifProportion, PompeAPV, Accelerateur):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifSeuilPompeAPVAccelerateur(HeaumeGenerique, DefensifSeuil, PompeAPV, Accelerateur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifValeurPompeAPVAccelerateur(HeaumeGenerique, DefensifValeur, PompeAPV, Accelerateur):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifPlafondRenforceRegenPVAccelerateur(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifProportionRenforceRegenPVAccelerateur(HeaumeGenerique, DefensifProportion, RenforceRegenPV, Accelerateur):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifSeuilRenforceRegenPVAccelerateur(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifValeurRenforceRegenPVAccelerateur(HeaumeGenerique, DefensifValeur, RenforceRegenPV, Accelerateur):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifPlafondPompeAPMAccelerateur(HeaumeGenerique, DefensifPlafond, PompeAPM, Accelerateur):
    """Un heaume défensif plafonnant les dégats et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifProportionPompeAPMAccelerateur(HeaumeGenerique, DefensifProportion, PompeAPM, Accelerateur):
    """Un heaume défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifSeuilPompeAPMAccelerateur(HeaumeGenerique, DefensifSeuil, PompeAPM, Accelerateur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifValeurPompeAPMAccelerateur(HeaumeGenerique, DefensifValeur, PompeAPM, Accelerateur):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifPlafondRenforceRegenPMAccelerateur(HeaumeGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifProportionRenforceRegenPMAccelerateur(HeaumeGenerique, DefensifProportion, RenforceRegenPM, Accelerateur):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifSeuilRenforceRegenPMAccelerateur(HeaumeGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifValeurRenforceRegenPMAccelerateur(HeaumeGenerique, DefensifValeur, RenforceRegenPM, Accelerateur):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumePompeAPVPompeAPMAccelerateur(HeaumeGenerique, PompeAPV, PompeAPM, Accelerateur):
    """Un heaume pompant les PV et les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeRenforceRegenPVPompeAPMAccelerateur(HeaumeGenerique, RenforceRegenPV, PompeAPM, Accelerateur):
    """Un heaume renforçant la régénération des PV et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumePompeAPVRenforceRegenPMAccelerateur(HeaumeGenerique, PompeAPV, RenforceRegenPM, Accelerateur):
    """Un heaume pompant les PV et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeRenforceRegenPVRenforceRegenPMAccelerateur(HeaumeGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur):
    """Un heaume renforçant la régénération des PV et des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifPlafondPompeAPVAnoblisseur(HeaumeGenerique, DefensifPlafond, PompeAPV, Anoblisseur):
    """Un heaume défensif plafonnant les dégats et pompant les PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifProportionPompeAPVAnoblisseur(HeaumeGenerique, DefensifProportion, PompeAPV, Anoblisseur):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifSeuilPompeAPVAnoblisseur(HeaumeGenerique, DefensifSeuil, PompeAPV, Anoblisseur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifValeurPompeAPVAnoblisseur(HeaumeGenerique, DefensifValeur, PompeAPV, Anoblisseur):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifPlafondRenforceRegenPVAnoblisseur(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, Anoblisseur):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifProportionRenforceRegenPVAnoblisseur(HeaumeGenerique, DefensifProportion, RenforceRegenPV, Anoblisseur):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifSeuilRenforceRegenPVAnoblisseur(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, Anoblisseur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifValeurRenforceRegenPVAnoblisseur(HeaumeGenerique, DefensifValeur, RenforceRegenPV, Anoblisseur):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifPlafondPompeAPMAnoblisseur(HeaumeGenerique, DefensifPlafond, PompeAPM, Anoblisseur):
    """Un heaume défensif plafonnant les dégats et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifProportionPompeAPMAnoblisseur(HeaumeGenerique, DefensifProportion, PompeAPM, Anoblisseur):
    """Un heaume défensif proportionnel aux dégats et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifSeuilPompeAPMAnoblisseur(HeaumeGenerique, DefensifSeuil, PompeAPM, Anoblisseur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifValeurPompeAPMAnoblisseur(HeaumeGenerique, DefensifValeur, PompeAPM, Anoblisseur):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifPlafondRenforceRegenPMAnoblisseur(HeaumeGenerique, DefensifPlafond, RenforceRegenPM, Anoblisseur):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifProportionRenforceRegenPMAnoblisseur(HeaumeGenerique, DefensifProportion, RenforceRegenPM, Anoblisseur):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifSeuilRenforceRegenPMAnoblisseur(HeaumeGenerique, DefensifSeuil, RenforceRegenPM, Anoblisseur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifValeurRenforceRegenPMAnoblisseur(HeaumeGenerique, DefensifValeur, RenforceRegenPM, Anoblisseur):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumePompeAPVPompeAPMAnoblisseur(HeaumeGenerique, PompeAPV, PompeAPM, Anoblisseur):
    """Un heaume pompant les PV et les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeRenforceRegenPVPompeAPMAnoblisseur(HeaumeGenerique, RenforceRegenPV, PompeAPM, Anoblisseur):
    """Un heaume renforçant la régénération des PV et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumePompeAPVRenforceRegenPMAnoblisseur(HeaumeGenerique, PompeAPV, RenforceRegenPM, Anoblisseur):
    """Un heaume pompant les PV et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeRenforceRegenPVRenforceRegenPMAnoblisseur(HeaumeGenerique, RenforceRegenPV, RenforceRegenPM, Anoblisseur):
    """Un heaume renforçant la régénération des PV et des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifPlafondAccelerateurAnoblisseur(HeaumeGenerique, DefensifPlafond, Accelerateur, Anoblisseur):
    """Un heaume défensif plafonnant les dégats et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifProportionAccelerateurAnoblisseur(HeaumeGenerique, DefensifProportion, Accelerateur, Anoblisseur):
    """Un heaume défensif proportionnel aux dégats et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifSeuilAccelerateurAnoblisseur(HeaumeGenerique, DefensifSeuil, Accelerateur, Anoblisseur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifValeurAccelerateurAnoblisseur(HeaumeGenerique, DefensifValeur, Accelerateur, Anoblisseur):
    """Un heaume défensif bloquant une valeur fixe de dégats et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumePompeAPVAccelerateurAnoblisseur(HeaumeGenerique, PompeAPV, Accelerateur, Anoblisseur):
    """Un heaume pompant les PV et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeRenforceRegenPVAccelerateurAnoblisseur(HeaumeGenerique, RenforceRegenPV, Accelerateur, Anoblisseur):
    """Un heaume renforçant la régénération des PV et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumePompeAPMAccelerateurAnoblisseur(HeaumeGenerique, PompeAPM, Accelerateur, Anoblisseur):
    """Un heaume pompant les PM et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeRenforceRegenPMAccelerateurAnoblisseur(HeaumeGenerique, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un heaume renforçant la régénération des PM et augmentant la vitesse et la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifPlafondPompeAPVElementaire(HeaumeGenerique, DefensifPlafond, PompeAPV, Elementaire):
    """Un heaume défensif plafonnant les dégats et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionPompeAPVElementaire(HeaumeGenerique, DefensifProportion, PompeAPV, Elementaire):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilPompeAPVElementaire(HeaumeGenerique, DefensifSeuil, PompeAPV, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurPompeAPVElementaire(HeaumeGenerique, DefensifValeur, PompeAPV, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondRenforceRegenPVElementaire(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, Elementaire):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionRenforceRegenPVElementaire(HeaumeGenerique, DefensifProportion, RenforceRegenPV, Elementaire):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilRenforceRegenPVElementaire(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurRenforceRegenPVElementaire(HeaumeGenerique, DefensifValeur, RenforceRegenPV, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondPompeAPMElementaire(HeaumeGenerique, DefensifPlafond, PompeAPM, Elementaire):
    """Un heaume défensif plafonnant les dégats et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionPompeAPMElementaire(HeaumeGenerique, DefensifProportion, PompeAPM, Elementaire):
    """Un heaume défensif proportionnel aux dégats et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilPompeAPMElementaire(HeaumeGenerique, DefensifSeuil, PompeAPM, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurPompeAPMElementaire(HeaumeGenerique, DefensifValeur, PompeAPM, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondRenforceRegenPMElementaire(HeaumeGenerique, DefensifPlafond, RenforceRegenPM, Elementaire):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionRenforceRegenPMElementaire(HeaumeGenerique, DefensifProportion, RenforceRegenPM, Elementaire):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilRenforceRegenPMElementaire(HeaumeGenerique, DefensifSeuil, RenforceRegenPM, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurRenforceRegenPMElementaire(HeaumeGenerique, DefensifValeur, RenforceRegenPM, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumePompeAPVPompeAPMElementaire(HeaumeGenerique, PompeAPV, PompeAPM, Elementaire):
    """Un heaume pompant les PV et les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeRenforceRegenPVPompeAPMElementaire(HeaumeGenerique, RenforceRegenPV, PompeAPM, Elementaire):
    """Un heaume renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumePompeAPVRenforceRegenPMElementaire(HeaumeGenerique, PompeAPV, RenforceRegenPM, Elementaire):
    """Un heaume pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeRenforceRegenPVRenforceRegenPMElementaire(HeaumeGenerique, RenforceRegenPV, RenforceRegenPM, Elementaire):
    """Un heaume renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondAccelerateurElementaire(HeaumeGenerique, DefensifPlafond, Accelerateur, Elementaire):
    """Un heaume défensif plafonnant les dégats et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionAccelerateurElementaire(HeaumeGenerique, DefensifProportion, Accelerateur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilAccelerateurElementaire(HeaumeGenerique, DefensifSeuil, Accelerateur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurAccelerateurElementaire(HeaumeGenerique, DefensifValeur, Accelerateur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumePompeAPVAccelerateurElementaire(HeaumeGenerique, PompeAPV, Accelerateur, Elementaire):
    """Un heaume pompant les PV et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeRenforceRegenPVAccelerateurElementaire(HeaumeGenerique, RenforceRegenPV, Accelerateur, Elementaire):
    """Un heaume renforçant la régénération des PV et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumePompeAPMAccelerateurElementaire(HeaumeGenerique, PompeAPM, Accelerateur, Elementaire):
    """Un heaume pompant les PM et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeRenforceRegenPMAccelerateurElementaire(HeaumeGenerique, RenforceRegenPM, Accelerateur, Elementaire):
    """Un heaume renforçant la régénération des PM et augmentant la vitesse et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondAnoblisseurElementaire(HeaumeGenerique, DefensifPlafond, Anoblisseur, Elementaire):
    """Un heaume défensif plafonnant les dégats et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionAnoblisseurElementaire(HeaumeGenerique, DefensifProportion, Anoblisseur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilAnoblisseurElementaire(HeaumeGenerique, DefensifSeuil, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurAnoblisseurElementaire(HeaumeGenerique, DefensifValeur, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumePompeAPVAnoblisseurElementaire(HeaumeGenerique, PompeAPV, Anoblisseur, Elementaire):
    """Un heaume pompant les PV et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeRenforceRegenPVAnoblisseurElementaire(HeaumeGenerique, RenforceRegenPV, Anoblisseur, Elementaire):
    """Un heaume renforçant la régénération des PV et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumePompeAPMAnoblisseurElementaire(HeaumeGenerique, PompeAPM, Anoblisseur, Elementaire):
    """Un heaume pompant les PM et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeRenforceRegenPMAnoblisseurElementaire(HeaumeGenerique, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un heaume renforçant la régénération des PM et augmentant la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeAccelerateurAnoblisseurElementaire(HeaumeGenerique, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume augmentant la vitesse et la priorité et l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondPompeAPVTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVTribal(HeaumeGenerique, DefensifProportion, PompeAPV, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVTribal(HeaumeGenerique, DefensifValeur, PompeAPV, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPMTribal(HeaumeGenerique, DefensifPlafond, PompeAPM, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPMTribal(HeaumeGenerique, DefensifProportion, PompeAPM, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPMTribal(HeaumeGenerique, DefensifSeuil, PompeAPM, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPMTribal(HeaumeGenerique, DefensifValeur, PompeAPM, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPMTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPM, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPMTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPM, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPMTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPM, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPMTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPM, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVPompeAPMTribal(HeaumeGenerique, PompeAPV, PompeAPM, EquippementTribal):
    """Un heaume pompant les PV et les PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVPompeAPMTribal(HeaumeGenerique, RenforceRegenPV, PompeAPM, EquippementTribal):
    """Un heaume renforçant la régénération des PV et pompant les PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVRenforceRegenPMTribal(HeaumeGenerique, PompeAPV, RenforceRegenPM, EquippementTribal):
    """Un heaume pompant les PV et renforçant la régénération des PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVRenforceRegenPMTribal(HeaumeGenerique, RenforceRegenPV, RenforceRegenPM, EquippementTribal):
    """Un heaume renforçant la régénération des PV et des PM et augmentant l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondAccelerateurTribal(HeaumeGenerique, DefensifPlafond, Accelerateur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionAccelerateurTribal(HeaumeGenerique, DefensifProportion, Accelerateur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilAccelerateurTribal(HeaumeGenerique, DefensifSeuil, Accelerateur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurAccelerateurTribal(HeaumeGenerique, DefensifValeur, Accelerateur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVAccelerateurTribal(HeaumeGenerique, PompeAPV, Accelerateur, EquippementTribal):
    """Un heaume pompant les PV et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVAccelerateurTribal(HeaumeGenerique, RenforceRegenPV, Accelerateur, EquippementTribal):
    """Un heaume renforçant la régénération des PV et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPMAccelerateurTribal(HeaumeGenerique, PompeAPM, Accelerateur, EquippementTribal):
    """Un heaume pompant les PM et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPMAccelerateurTribal(HeaumeGenerique, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un heaume renforçant la régénération des PM et augmentant la vitesse et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondAnoblisseurTribal(HeaumeGenerique, DefensifPlafond, Anoblisseur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionAnoblisseurTribal(HeaumeGenerique, DefensifProportion, Anoblisseur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilAnoblisseurTribal(HeaumeGenerique, DefensifSeuil, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurAnoblisseurTribal(HeaumeGenerique, DefensifValeur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVAnoblisseurTribal(HeaumeGenerique, PompeAPV, Anoblisseur, EquippementTribal):
    """Un heaume pompant les PV et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVAnoblisseurTribal(HeaumeGenerique, RenforceRegenPV, Anoblisseur, EquippementTribal):
    """Un heaume renforçant la régénération des PV et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPMAnoblisseurTribal(HeaumeGenerique, PompeAPM, Anoblisseur, EquippementTribal):
    """Un heaume pompant les PM et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPMAnoblisseurTribal(HeaumeGenerique, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Un heaume renforçant la régénération des PM et augmentant la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeAccelerateurAnoblisseurTribal(HeaumeGenerique, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume augmentant la vitesse et la priorité et l'affinité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondElementaireTribal(HeaumeGenerique, DefensifPlafond, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionElementaireTribal(HeaumeGenerique, DefensifProportion, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilElementaireTribal(HeaumeGenerique, DefensifSeuil, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurElementaireTribal(HeaumeGenerique, DefensifValeur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVElementaireTribal(HeaumeGenerique, PompeAPV, Elementaire, EquippementTribal):
    """Un heaume pompant les PV et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVElementaireTribal(HeaumeGenerique, RenforceRegenPV, Elementaire, EquippementTribal):
    """Un heaume renforçant la régénération des PV et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPMElementaireTribal(HeaumeGenerique, PompeAPM, Elementaire, EquippementTribal):
    """Un heaume pompant les PM et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPMElementaireTribal(HeaumeGenerique, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un heaume renforçant la régénération des PM et augmentant l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeAccelerateurElementaireTribal(HeaumeGenerique, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume augmentant la vitesse et l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeAnoblisseurElementaireTribal(HeaumeGenerique, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume augmentant la priorité et l'affinité élémentaire et tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVPompeAPMAccelerateur(HeaumeGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur):
    """Un heaume défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifProportionPompeAPVPompeAPMAccelerateur(HeaumeGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifSeuilPompeAPVPompeAPMAccelerateur(HeaumeGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifValeurPompeAPVPompeAPMAccelerateur(HeaumeGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifPlafondRenforceRegenPVPompeAPMAccelerateur(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifProportionRenforceRegenPVPompeAPMAccelerateur(HeaumeGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifSeuilRenforceRegenPVPompeAPMAccelerateur(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifValeurRenforceRegenPVPompeAPMAccelerateur(HeaumeGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifPlafondPompeAPVRenforceRegenPMAccelerateur(HeaumeGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur):
    """Un heaume défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifProportionPompeAPVRenforceRegenPMAccelerateur(HeaumeGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifSeuilPompeAPVRenforceRegenPMAccelerateur(HeaumeGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifValeurPompeAPVRenforceRegenPMAccelerateur(HeaumeGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateur(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateur(HeaumeGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateur(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateur(HeaumeGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)

class HeaumeDefensifPlafondPompeAPVPompeAPMAnoblisseur(HeaumeGenerique, DefensifPlafond, PompeAPV, PompeAPM, Anoblisseur):
    """Un heaume défensif plafonnant les dégats et pompant les PV et les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifProportionPompeAPVPompeAPMAnoblisseur(HeaumeGenerique, DefensifProportion, PompeAPV, PompeAPM, Anoblisseur):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifSeuilPompeAPVPompeAPMAnoblisseur(HeaumeGenerique, DefensifSeuil, PompeAPV, PompeAPM, Anoblisseur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifValeurPompeAPVPompeAPMAnoblisseur(HeaumeGenerique, DefensifValeur, PompeAPV, PompeAPM, Anoblisseur):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifPlafondRenforceRegenPVPompeAPMAnoblisseur(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Anoblisseur):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifProportionRenforceRegenPVPompeAPMAnoblisseur(HeaumeGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Anoblisseur):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifSeuilRenforceRegenPVPompeAPMAnoblisseur(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Anoblisseur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifValeurRenforceRegenPVPompeAPMAnoblisseur(HeaumeGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Anoblisseur):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifPlafondPompeAPVRenforceRegenPMAnoblisseur(HeaumeGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Anoblisseur):
    """Un heaume défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifProportionPompeAPVRenforceRegenPMAnoblisseur(HeaumeGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Anoblisseur):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifSeuilPompeAPVRenforceRegenPMAnoblisseur(HeaumeGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Anoblisseur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifValeurPompeAPVRenforceRegenPMAnoblisseur(HeaumeGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Anoblisseur):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseur(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Anoblisseur):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseur(HeaumeGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Anoblisseur):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseur(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Anoblisseur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseur(HeaumeGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Anoblisseur):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifPlafondPompeAPVAccelerateurAnoblisseur(HeaumeGenerique, DefensifPlafond, PompeAPV, Accelerateur, Anoblisseur):
    """Un heaume défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifProportionPompeAPVAccelerateurAnoblisseur(HeaumeGenerique, DefensifProportion, PompeAPV, Accelerateur, Anoblisseur):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifSeuilPompeAPVAccelerateurAnoblisseur(HeaumeGenerique, DefensifSeuil, PompeAPV, Accelerateur, Anoblisseur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifValeurPompeAPVAccelerateurAnoblisseur(HeaumeGenerique, DefensifValeur, PompeAPV, Accelerateur, Anoblisseur):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifPlafondRenforceRegenPVAccelerateurAnoblisseur(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, Anoblisseur):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifProportionRenforceRegenPVAccelerateurAnoblisseur(HeaumeGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, Anoblisseur):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifSeuilRenforceRegenPVAccelerateurAnoblisseur(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, Anoblisseur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifValeurRenforceRegenPVAccelerateurAnoblisseur(HeaumeGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, Anoblisseur):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifPlafondPompeAPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifPlafond, PompeAPM, Accelerateur, Anoblisseur):
    """Un heaume défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifProportionPompeAPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifProportion, PompeAPM, Accelerateur, Anoblisseur):
    """Un heaume défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifSeuilPompeAPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifSeuil, PompeAPM, Accelerateur, Anoblisseur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifValeurPompeAPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifValeur, PompeAPM, Accelerateur, Anoblisseur):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifPlafondRenforceRegenPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifProportionRenforceRegenPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifSeuilRenforceRegenPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifValeurRenforceRegenPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumePompeAPVPompeAPMAccelerateurAnoblisseur(HeaumeGenerique, PompeAPV, PompeAPM, Accelerateur, Anoblisseur):
    """Un heaume pompant les PV et les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeRenforceRegenPVPompeAPMAccelerateurAnoblisseur(HeaumeGenerique, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur):
    """Un heaume renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumePompeAPVRenforceRegenPMAccelerateurAnoblisseur(HeaumeGenerique, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un heaume pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur(HeaumeGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un heaume renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifPlafondPompeAPVPompeAPMElementaire(HeaumeGenerique, DefensifPlafond, PompeAPV, PompeAPM, Elementaire):
    """Un heaume défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionPompeAPVPompeAPMElementaire(HeaumeGenerique, DefensifProportion, PompeAPV, PompeAPM, Elementaire):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilPompeAPVPompeAPMElementaire(HeaumeGenerique, DefensifSeuil, PompeAPV, PompeAPM, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurPompeAPVPompeAPMElementaire(HeaumeGenerique, DefensifValeur, PompeAPV, PompeAPM, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondRenforceRegenPVPompeAPMElementaire(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Elementaire):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionRenforceRegenPVPompeAPMElementaire(HeaumeGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Elementaire):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilRenforceRegenPVPompeAPMElementaire(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurRenforceRegenPVPompeAPMElementaire(HeaumeGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondPompeAPVRenforceRegenPMElementaire(HeaumeGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Elementaire):
    """Un heaume défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionPompeAPVRenforceRegenPMElementaire(HeaumeGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Elementaire):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilPompeAPVRenforceRegenPMElementaire(HeaumeGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurPompeAPVRenforceRegenPMElementaire(HeaumeGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMElementaire(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Elementaire):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMElementaire(HeaumeGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Elementaire):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMElementaire(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMElementaire(HeaumeGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_degats)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondPompeAPVAccelerateurElementaire(HeaumeGenerique, DefensifPlafond, PompeAPV, Accelerateur, Elementaire):
    """Un heaume défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionPompeAPVAccelerateurElementaire(HeaumeGenerique, DefensifProportion, PompeAPV, Accelerateur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilPompeAPVAccelerateurElementaire(HeaumeGenerique, DefensifSeuil, PompeAPV, Accelerateur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurPompeAPVAccelerateurElementaire(HeaumeGenerique, DefensifValeur, PompeAPV, Accelerateur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondRenforceRegenPVAccelerateurElementaire(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, Elementaire):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionRenforceRegenPVAccelerateurElementaire(HeaumeGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilRenforceRegenPVAccelerateurElementaire(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurRenforceRegenPVAccelerateurElementaire(HeaumeGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondPompeAPMAccelerateurElementaire(HeaumeGenerique, DefensifPlafond, PompeAPM, Accelerateur, Elementaire):
    """Un heaume défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionPompeAPMAccelerateurElementaire(HeaumeGenerique, DefensifProportion, PompeAPM, Accelerateur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilPompeAPMAccelerateurElementaire(HeaumeGenerique, DefensifSeuil, PompeAPM, Accelerateur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurPompeAPMAccelerateurElementaire(HeaumeGenerique, DefensifValeur, PompeAPM, Accelerateur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondRenforceRegenPMAccelerateurElementaire(HeaumeGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, Elementaire):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PM et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionRenforceRegenPMAccelerateurElementaire(HeaumeGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PM et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilRenforceRegenPMAccelerateurElementaire(HeaumeGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurRenforceRegenPMAccelerateurElementaire(HeaumeGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumePompeAPVPompeAPMAccelerateurElementaire(HeaumeGenerique, PompeAPV, PompeAPM, Accelerateur, Elementaire):
    """Un heaume pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeRenforceRegenPVPompeAPMAccelerateurElementaire(HeaumeGenerique, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire):
    """Un heaume renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumePompeAPVRenforceRegenPMAccelerateurElementaire(HeaumeGenerique, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Un heaume pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeRenforceRegenPVRenforceRegenPMAccelerateurElementaire(HeaumeGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Un heaume renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondPompeAPVAnoblisseurElementaire(HeaumeGenerique, DefensifPlafond, PompeAPV, Anoblisseur, Elementaire):
    """Un heaume défensif plafonnant les dégats et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionPompeAPVAnoblisseurElementaire(HeaumeGenerique, DefensifProportion, PompeAPV, Anoblisseur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilPompeAPVAnoblisseurElementaire(HeaumeGenerique, DefensifSeuil, PompeAPV, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurPompeAPVAnoblisseurElementaire(HeaumeGenerique, DefensifValeur, PompeAPV, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondRenforceRegenPVAnoblisseurElementaire(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, Anoblisseur, Elementaire):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionRenforceRegenPVAnoblisseurElementaire(HeaumeGenerique, DefensifProportion, RenforceRegenPV, Anoblisseur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilRenforceRegenPVAnoblisseurElementaire(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurRenforceRegenPVAnoblisseurElementaire(HeaumeGenerique, DefensifValeur, RenforceRegenPV, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondPompeAPMAnoblisseurElementaire(HeaumeGenerique, DefensifPlafond, PompeAPM, Anoblisseur, Elementaire):
    """Un heaume défensif plafonnant les dégats et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionPompeAPMAnoblisseurElementaire(HeaumeGenerique, DefensifProportion, PompeAPM, Anoblisseur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilPompeAPMAnoblisseurElementaire(HeaumeGenerique, DefensifSeuil, PompeAPM, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurPompeAPMAnoblisseurElementaire(HeaumeGenerique, DefensifValeur, PompeAPM, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondRenforceRegenPMAnoblisseurElementaire(HeaumeGenerique, DefensifPlafond, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionRenforceRegenPMAnoblisseurElementaire(HeaumeGenerique, DefensifProportion, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilRenforceRegenPMAnoblisseurElementaire(HeaumeGenerique, DefensifSeuil, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurRenforceRegenPMAnoblisseurElementaire(HeaumeGenerique, DefensifValeur, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumePompeAPVPompeAPMAnoblisseurElementaire(HeaumeGenerique, PompeAPV, PompeAPM, Anoblisseur, Elementaire):
    """Un heaume pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeRenforceRegenPVPompeAPMAnoblisseurElementaire(HeaumeGenerique, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire):
    """Un heaume renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumePompeAPVRenforceRegenPMAnoblisseurElementaire(HeaumeGenerique, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un heaume pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pm)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeRenforceRegenPVRenforceRegenPMAnoblisseurElementaire(HeaumeGenerique, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un heaume renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifPlafond, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif plafonnant les dégats et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifProportion, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifSeuil, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifValeur, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumePompeAPVAccelerateurAnoblisseurElementaire(HeaumeGenerique, PompeAPV, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeRenforceRegenPVAccelerateurAnoblisseurElementaire(HeaumeGenerique, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumePompeAPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeRenforceRegenPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondPompeAPVPompeAPMTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, PompeAPM, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVPompeAPMTribal(HeaumeGenerique, DefensifProportion, PompeAPV, PompeAPM, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVPompeAPMTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, PompeAPM, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVPompeAPMTribal(HeaumeGenerique, DefensifValeur, PompeAPV, PompeAPM, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVPompeAPMTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVPompeAPMTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVPompeAPMTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVPompeAPMTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVRenforceRegenPMTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVRenforceRegenPMTribal(HeaumeGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVRenforceRegenPMTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVRenforceRegenPMTribal(HeaumeGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVAccelerateurTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, Accelerateur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVAccelerateurTribal(HeaumeGenerique, DefensifProportion, PompeAPV, Accelerateur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVAccelerateurTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, Accelerateur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVAccelerateurTribal(HeaumeGenerique, DefensifValeur, PompeAPV, Accelerateur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVAccelerateurTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVAccelerateurTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVAccelerateurTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVAccelerateurTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPMAccelerateurTribal(HeaumeGenerique, DefensifPlafond, PompeAPM, Accelerateur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPMAccelerateurTribal(HeaumeGenerique, DefensifProportion, PompeAPM, Accelerateur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPMAccelerateurTribal(HeaumeGenerique, DefensifSeuil, PompeAPM, Accelerateur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPMAccelerateurTribal(HeaumeGenerique, DefensifValeur, PompeAPM, Accelerateur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPMAccelerateurTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPMAccelerateurTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPMAccelerateurTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPMAccelerateurTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVPompeAPMAccelerateurTribal(HeaumeGenerique, PompeAPV, PompeAPM, Accelerateur, EquippementTribal):
    """Un heaume pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVPompeAPMAccelerateurTribal(HeaumeGenerique, RenforceRegenPV, PompeAPM, Accelerateur, EquippementTribal):
    """Un heaume renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVRenforceRegenPMAccelerateurTribal(HeaumeGenerique, PompeAPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un heaume pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVRenforceRegenPMAccelerateurTribal(HeaumeGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un heaume renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVAnoblisseurTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, Anoblisseur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVAnoblisseurTribal(HeaumeGenerique, DefensifProportion, PompeAPV, Anoblisseur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVAnoblisseurTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVAnoblisseurTribal(HeaumeGenerique, DefensifValeur, PompeAPV, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVAnoblisseurTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, Anoblisseur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVAnoblisseurTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, Anoblisseur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVAnoblisseurTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVAnoblisseurTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPMAnoblisseurTribal(HeaumeGenerique, DefensifPlafond, PompeAPM, Anoblisseur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPMAnoblisseurTribal(HeaumeGenerique, DefensifProportion, PompeAPM, Anoblisseur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPMAnoblisseurTribal(HeaumeGenerique, DefensifSeuil, PompeAPM, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPMAnoblisseurTribal(HeaumeGenerique, DefensifValeur, PompeAPM, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPMAnoblisseurTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPMAnoblisseurTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPMAnoblisseurTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPMAnoblisseurTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVPompeAPMAnoblisseurTribal(HeaumeGenerique, PompeAPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Un heaume pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVPompeAPMAnoblisseurTribal(HeaumeGenerique, RenforceRegenPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Un heaume renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVRenforceRegenPMAnoblisseurTribal(HeaumeGenerique, PompeAPV, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Un heaume pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVRenforceRegenPMAnoblisseurTribal(HeaumeGenerique, RenforceRegenPV, RenforceRegenPM, Anoblisseur, EquippementTribal):
    """Un heaume renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifPlafond, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifProportion, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifSeuil, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifValeur, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVAccelerateurAnoblisseurTribal(HeaumeGenerique, PompeAPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVAccelerateurAnoblisseurTribal(HeaumeGenerique, RenforceRegenPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPMAccelerateurAnoblisseurTribal(HeaumeGenerique, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPMAccelerateurAnoblisseurTribal(HeaumeGenerique, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVElementaireTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVElementaireTribal(HeaumeGenerique, DefensifProportion, PompeAPV, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVElementaireTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVElementaireTribal(HeaumeGenerique, DefensifValeur, PompeAPV, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVElementaireTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVElementaireTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVElementaireTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVElementaireTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPMElementaireTribal(HeaumeGenerique, DefensifPlafond, PompeAPM, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPMElementaireTribal(HeaumeGenerique, DefensifProportion, PompeAPM, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPMElementaireTribal(HeaumeGenerique, DefensifSeuil, PompeAPM, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPMElementaireTribal(HeaumeGenerique, DefensifValeur, PompeAPM, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPMElementaireTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPMElementaireTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPMElementaireTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPMElementaireTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVPompeAPMElementaireTribal(HeaumeGenerique, PompeAPV, PompeAPM, Elementaire, EquippementTribal):
    """Un heaume pompant les PV et les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVPompeAPMElementaireTribal(HeaumeGenerique, RenforceRegenPV, PompeAPM, Elementaire, EquippementTribal):
    """Un heaume renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVRenforceRegenPMElementaireTribal(HeaumeGenerique, PompeAPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un heaume pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVRenforceRegenPMElementaireTribal(HeaumeGenerique, RenforceRegenPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un heaume renforçant la régénération des PV et renforçant la régénération des PM et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondAccelerateurElementaireTribal(HeaumeGenerique, DefensifPlafond, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionAccelerateurElementaireTribal(HeaumeGenerique, DefensifProportion, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilAccelerateurElementaireTribal(HeaumeGenerique, DefensifSeuil, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurAccelerateurElementaireTribal(HeaumeGenerique, DefensifValeur, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVAccelerateurElementaireTribal(HeaumeGenerique, PompeAPV, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVAccelerateurElementaireTribal(HeaumeGenerique, RenforceRegenPV, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume renforçant la régénération des PV et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPMAccelerateurElementaireTribal(HeaumeGenerique, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPMAccelerateurElementaireTribal(HeaumeGenerique, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondAnoblisseurElementaireTribal(HeaumeGenerique, DefensifPlafond, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionAnoblisseurElementaireTribal(HeaumeGenerique, DefensifProportion, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilAnoblisseurElementaireTribal(HeaumeGenerique, DefensifSeuil, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifValeur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVAnoblisseurElementaireTribal(HeaumeGenerique, PompeAPV, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume pompant les PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVAnoblisseurElementaireTribal(HeaumeGenerique, RenforceRegenPV, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume renforçant la régénération des PV et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPMAnoblisseurElementaireTribal(HeaumeGenerique, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPMAnoblisseurElementaireTribal(HeaumeGenerique, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, Anoblisseur):
    """Un heaume défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, Anoblisseur):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, Anoblisseur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, Anoblisseur):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un heaume défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur(HeaumeGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)

class HeaumeDefensifPlafondPompeAPVPompeAPMAccelerateurElementaire(HeaumeGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, Elementaire):
    """Un heaume défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionPompeAPVPompeAPMAccelerateurElementaire(HeaumeGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilPompeAPVPompeAPMAccelerateurElementaire(HeaumeGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurPompeAPVPompeAPMAccelerateurElementaire(HeaumeGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondRenforceRegenPVPompeAPMAccelerateurElementaire(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionRenforceRegenPVPompeAPMAccelerateurElementaire(HeaumeGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilRenforceRegenPVPompeAPMAccelerateurElementaire(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurRenforceRegenPVPompeAPMAccelerateurElementaire(HeaumeGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondPompeAPVRenforceRegenPMAccelerateurElementaire(HeaumeGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Un heaume défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionPompeAPVRenforceRegenPMAccelerateurElementaire(HeaumeGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilPompeAPVRenforceRegenPMAccelerateurElementaire(HeaumeGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurPompeAPVRenforceRegenPMAccelerateurElementaire(HeaumeGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurElementaire(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurElementaire(HeaumeGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurElementaire(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurElementaire(HeaumeGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondPompeAPVPompeAPMAnoblisseurElementaire(HeaumeGenerique, DefensifPlafond, PompeAPV, PompeAPM, Anoblisseur, Elementaire):
    """Un heaume défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionPompeAPVPompeAPMAnoblisseurElementaire(HeaumeGenerique, DefensifProportion, PompeAPV, PompeAPM, Anoblisseur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilPompeAPVPompeAPMAnoblisseurElementaire(HeaumeGenerique, DefensifSeuil, PompeAPV, PompeAPM, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurPompeAPVPompeAPMAnoblisseurElementaire(HeaumeGenerique, DefensifValeur, PompeAPV, PompeAPM, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondRenforceRegenPVPompeAPMAnoblisseurElementaire(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionRenforceRegenPVPompeAPMAnoblisseurElementaire(HeaumeGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilRenforceRegenPVPompeAPMAnoblisseurElementaire(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurRenforceRegenPVPompeAPMAnoblisseurElementaire(HeaumeGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondPompeAPVRenforceRegenPMAnoblisseurElementaire(HeaumeGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un heaume défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionPompeAPVRenforceRegenPMAnoblisseurElementaire(HeaumeGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilPompeAPVRenforceRegenPMAnoblisseurElementaire(HeaumeGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurPompeAPVRenforceRegenPMAnoblisseurElementaire(HeaumeGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseurElementaire(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseurElementaire(HeaumeGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseurElementaire(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseurElementaire(HeaumeGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondPompeAPVAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifPlafond, PompeAPV, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionPompeAPVAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifProportion, PompeAPV, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilPompeAPVAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifSeuil, PompeAPV, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurPompeAPVAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifValeur, PompeAPV, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondRenforceRegenPVAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionRenforceRegenPVAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilRenforceRegenPVAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurRenforceRegenPVAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondPompeAPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifPlafond, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionPompeAPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifProportion, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilPompeAPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifSeuil, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurPompeAPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifValeur, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondRenforceRegenPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionRenforceRegenPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilRenforceRegenPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurRenforceRegenPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumePompeAPVPompeAPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumePompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondPompeAPVPompeAPMAccelerateurTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVPompeAPMAccelerateurTribal(HeaumeGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVPompeAPMAccelerateurTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVPompeAPMAccelerateurTribal(HeaumeGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVPompeAPMAccelerateurTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVPompeAPMAccelerateurTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVPompeAPMAccelerateurTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVPompeAPMAccelerateurTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVRenforceRegenPMAccelerateurTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVRenforceRegenPMAccelerateurTribal(HeaumeGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVRenforceRegenPMAccelerateurTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVRenforceRegenPMAccelerateurTribal(HeaumeGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVPompeAPMAnoblisseurTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVPompeAPMAnoblisseurTribal(HeaumeGenerique, DefensifProportion, PompeAPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVPompeAPMAnoblisseurTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVPompeAPMAnoblisseurTribal(HeaumeGenerique, DefensifValeur, PompeAPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVPompeAPMAnoblisseurTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVPompeAPMAnoblisseurTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVPompeAPMAnoblisseurTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVPompeAPMAnoblisseurTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVRenforceRegenPMAnoblisseurTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVRenforceRegenPMAnoblisseurTribal(HeaumeGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVRenforceRegenPMAnoblisseurTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVRenforceRegenPMAnoblisseurTribal(HeaumeGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseurTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseurTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseurTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseurTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifProportion, PompeAPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifValeur, PompeAPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifPlafond, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifProportion, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifSeuil, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifValeur, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVPompeAPMAccelerateurAnoblisseurTribal(HeaumeGenerique, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume pompant les PV et les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal(HeaumeGenerique, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal(HeaumeGenerique, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal(HeaumeGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVPompeAPMElementaireTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, PompeAPM, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVPompeAPMElementaireTribal(HeaumeGenerique, DefensifProportion, PompeAPV, PompeAPM, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVPompeAPMElementaireTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, PompeAPM, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVPompeAPMElementaireTribal(HeaumeGenerique, DefensifValeur, PompeAPV, PompeAPM, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVPompeAPMElementaireTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVPompeAPMElementaireTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVPompeAPMElementaireTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVPompeAPMElementaireTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVRenforceRegenPMElementaireTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVRenforceRegenPMElementaireTribal(HeaumeGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVRenforceRegenPMElementaireTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVRenforceRegenPMElementaireTribal(HeaumeGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMElementaireTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMElementaireTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMElementaireTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMElementaireTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVAccelerateurElementaireTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVAccelerateurElementaireTribal(HeaumeGenerique, DefensifProportion, PompeAPV, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVAccelerateurElementaireTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVAccelerateurElementaireTribal(HeaumeGenerique, DefensifValeur, PompeAPV, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVAccelerateurElementaireTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVAccelerateurElementaireTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVAccelerateurElementaireTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVAccelerateurElementaireTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifPlafond, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifProportion, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifSeuil, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifValeur, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVPompeAPMAccelerateurElementaireTribal(HeaumeGenerique, PompeAPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVPompeAPMAccelerateurElementaireTribal(HeaumeGenerique, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVRenforceRegenPMAccelerateurElementaireTribal(HeaumeGenerique, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal(HeaumeGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume renforçant la régénération des PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVAnoblisseurElementaireTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVAnoblisseurElementaireTribal(HeaumeGenerique, DefensifProportion, PompeAPV, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVAnoblisseurElementaireTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVAnoblisseurElementaireTribal(HeaumeGenerique, DefensifValeur, PompeAPV, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVAnoblisseurElementaireTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVAnoblisseurElementaireTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVAnoblisseurElementaireTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVAnoblisseurElementaireTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifPlafond, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifProportion, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifSeuil, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifValeur, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVPompeAPMAnoblisseurElementaireTribal(HeaumeGenerique, PompeAPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume pompant les PV et les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVPompeAPMAnoblisseurElementaireTribal(HeaumeGenerique, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume renforçant la régénération des PV et pompant les PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVRenforceRegenPMAnoblisseurElementaireTribal(HeaumeGenerique, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume pompant les PV et renforçant la régénération des PM et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal(HeaumeGenerique, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume renforçant la régénération des PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifPlafond, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifProportion, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifSeuil, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifValeur, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, PompeAPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume pompant les PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume renforçant la régénération des PV et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire(HeaumeGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)

class HeaumeDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_vitesse)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVPompeAPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVPompeAPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVPompeAPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVPompeAPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVPompeAPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVPompeAPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVPompeAPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVPompeAPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVRenforceRegenPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVRenforceRegenPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVRenforceRegenPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVRenforceRegenPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant l'affinité élémentaire et augmentant la priorité tribale."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVPompeAPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVPompeAPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifProportion, PompeAPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVPompeAPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVPompeAPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifValeur, PompeAPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVPompeAPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVPompeAPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVPompeAPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVPompeAPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVRenforceRegenPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVRenforceRegenPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVRenforceRegenPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVRenforceRegenPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifProportion, PompeAPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifValeur, PompeAPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifPlafond, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifProportion, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifSeuil, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifValeur, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumePompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifProportion, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifValeur, PompeAPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, PompeAPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et pompant les PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        PompeAPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifPlafond, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifProportion, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifSeuil, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifValeur, PompeAPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et pompant les PV et renforçant la régénération des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        PompeAPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifPlafond, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif plafonnant les dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifPlafond.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifProportion, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif proportionnel aux dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifProportion.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifSeuil, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant les dégats en dessous d'un seuil et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifSeuil.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)

class HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal(HeaumeGenerique, DefensifValeur, RenforceRegenPV, RenforceRegenPM, Accelerateur, Anoblisseur, Elementaire, EquippementTribal):
    """Un heaume défensif bloquant une valeur fixe de dégats et renforçant la régénération des PV et des PM et augmentant la vitesse et augmentant la priorité tribale et augmentant l'affinité élémentaire."""
    def __init__(self,labyrinthe:Labyrinthe,poids:float,frottements:float,_degats:float,_pv:float,_pm:float,_vitesse:float,_priorite:float,_element:Element|None,_affinite:float,_espece:Espece|None,_taux_stats:float,position:crt.Position=crt.POSITION_ABSENTE):
        HeaumeGenerique.__init__(self,labyrinthe,poids,frottements,position)
        DefensifValeur.__init__(self,labyrinthe,position,_degats)
        RenforceRegenPV.__init__(self,labyrinthe,position,_pv)
        RenforceRegenPM.__init__(self,labyrinthe,position,_pm)
        Accelerateur.__init__(self,labyrinthe,position,_vitesse)
        Anoblisseur.__init__(self,labyrinthe,position,_priorite)
        assert _element is not None
        Elementaire.__init__(self,labyrinthe,position,_element,_affinite)
        assert _espece is not None
        EquippementTribal.__init__(self,labyrinthe,position,_espece,_taux_stats)


equippements: dict[tuple[str, str, str, str, bool, bool, bool, bool], type[EquippementGenerique]] = {
    ("Anneau", "", "", "", False, False, False, False): AnneauGenerique,
    ("Armure", "", "", "", False, False, False, False): ArmureGenerique,
    ("Heaume", "", "", "", False, False, False, False): HeaumeGenerique,
    ("Anneau", "Plafond", "", "", False, False, False, False): AnneauDefensifPlafond,
    ("Armure", "Plafond", "", "", False, False, False, False): ArmureDefensifPlafond,
    ("Heaume", "Plafond", "", "", False, False, False, False): HeaumeDefensifPlafond,
    ("Anneau", "Proportion", "", "", False, False, False, False): AnneauDefensifProportion,
    ("Armure", "Proportion", "", "", False, False, False, False): ArmureDefensifProportion,
    ("Heaume", "Proportion", "", "", False, False, False, False): HeaumeDefensifProportion,
    ("Anneau", "Seuil", "", "", False, False, False, False): AnneauDefensifSeuil,
    ("Armure", "Seuil", "", "", False, False, False, False): ArmureDefensifSeuil,
    ("Heaume", "Seuil", "", "", False, False, False, False): HeaumeDefensifSeuil,
    ("Anneau", "Valeur", "", "", False, False, False, False): AnneauDefensifValeur,
    ("Armure", "Valeur", "", "", False, False, False, False): ArmureDefensifValeur,
    ("Heaume", "Valeur", "", "", False, False, False, False): HeaumeDefensifValeur,
    ("Anneau", "", "PompeAPV", "", False, False, False, False): AnneauPompeAPV,
    ("Armure", "", "PompeAPV", "", False, False, False, False): ArmurePompeAPV,
    ("Heaume", "", "PompeAPV", "", False, False, False, False): HeaumePompeAPV,
    ("Anneau", "Plafond", "PompeAPV", "", False, False, False, False): AnneauDefensifPlafondPompeAPV,
    ("Armure", "Plafond", "PompeAPV", "", False, False, False, False): ArmureDefensifPlafondPompeAPV,
    ("Heaume", "Plafond", "PompeAPV", "", False, False, False, False): HeaumeDefensifPlafondPompeAPV,
    ("Anneau", "Proportion", "PompeAPV", "", False, False, False, False): AnneauDefensifProportionPompeAPV,
    ("Armure", "Proportion", "PompeAPV", "", False, False, False, False): ArmureDefensifProportionPompeAPV,
    ("Heaume", "Proportion", "PompeAPV", "", False, False, False, False): HeaumeDefensifProportionPompeAPV,
    ("Anneau", "Seuil", "PompeAPV", "", False, False, False, False): AnneauDefensifSeuilPompeAPV,
    ("Armure", "Seuil", "PompeAPV", "", False, False, False, False): ArmureDefensifSeuilPompeAPV,
    ("Heaume", "Seuil", "PompeAPV", "", False, False, False, False): HeaumeDefensifSeuilPompeAPV,
    ("Anneau", "Valeur", "PompeAPV", "", False, False, False, False): AnneauDefensifValeurPompeAPV,
    ("Armure", "Valeur", "PompeAPV", "", False, False, False, False): ArmureDefensifValeurPompeAPV,
    ("Heaume", "Valeur", "PompeAPV", "", False, False, False, False): HeaumeDefensifValeurPompeAPV,
    ("Anneau", "", "RenforceRegenPV", "", False, False, False, False): AnneauRenforceRegenPV,
    ("Armure", "", "RenforceRegenPV", "", False, False, False, False): ArmureRenforceRegenPV,
    ("Heaume", "", "RenforceRegenPV", "", False, False, False, False): HeaumeRenforceRegenPV,
    ("Anneau", "Plafond", "RenforceRegenPV", "", False, False, False, False): AnneauDefensifPlafondRenforceRegenPV,
    ("Armure", "Plafond", "RenforceRegenPV", "", False, False, False, False): ArmureDefensifPlafondRenforceRegenPV,
    ("Heaume", "Plafond", "RenforceRegenPV", "", False, False, False, False): HeaumeDefensifPlafondRenforceRegenPV,
    ("Anneau", "Proportion", "RenforceRegenPV", "", False, False, False, False): AnneauDefensifProportionRenforceRegenPV,
    ("Armure", "Proportion", "RenforceRegenPV", "", False, False, False, False): ArmureDefensifProportionRenforceRegenPV,
    ("Heaume", "Proportion", "RenforceRegenPV", "", False, False, False, False): HeaumeDefensifProportionRenforceRegenPV,
    ("Anneau", "Seuil", "RenforceRegenPV", "", False, False, False, False): AnneauDefensifSeuilRenforceRegenPV,
    ("Armure", "Seuil", "RenforceRegenPV", "", False, False, False, False): ArmureDefensifSeuilRenforceRegenPV,
    ("Heaume", "Seuil", "RenforceRegenPV", "", False, False, False, False): HeaumeDefensifSeuilRenforceRegenPV,
    ("Anneau", "Valeur", "RenforceRegenPV", "", False, False, False, False): AnneauDefensifValeurRenforceRegenPV,
    ("Armure", "Valeur", "RenforceRegenPV", "", False, False, False, False): ArmureDefensifValeurRenforceRegenPV,
    ("Heaume", "Valeur", "RenforceRegenPV", "", False, False, False, False): HeaumeDefensifValeurRenforceRegenPV,
    ("Anneau", "", "", "PompeAPM", False, False, False, False): AnneauPompeAPM,
    ("Armure", "", "", "PompeAPM", False, False, False, False): ArmurePompeAPM,
    ("Heaume", "", "", "PompeAPM", False, False, False, False): HeaumePompeAPM,
    ("Anneau", "Plafond", "", "PompeAPM", False, False, False, False): AnneauDefensifPlafondPompeAPM,
    ("Armure", "Plafond", "", "PompeAPM", False, False, False, False): ArmureDefensifPlafondPompeAPM,
    ("Heaume", "Plafond", "", "PompeAPM", False, False, False, False): HeaumeDefensifPlafondPompeAPM,
    ("Anneau", "Proportion", "", "PompeAPM", False, False, False, False): AnneauDefensifProportionPompeAPM,
    ("Armure", "Proportion", "", "PompeAPM", False, False, False, False): ArmureDefensifProportionPompeAPM,
    ("Heaume", "Proportion", "", "PompeAPM", False, False, False, False): HeaumeDefensifProportionPompeAPM,
    ("Anneau", "Seuil", "", "PompeAPM", False, False, False, False): AnneauDefensifSeuilPompeAPM,
    ("Armure", "Seuil", "", "PompeAPM", False, False, False, False): ArmureDefensifSeuilPompeAPM,
    ("Heaume", "Seuil", "", "PompeAPM", False, False, False, False): HeaumeDefensifSeuilPompeAPM,
    ("Anneau", "Valeur", "", "PompeAPM", False, False, False, False): AnneauDefensifValeurPompeAPM,
    ("Armure", "Valeur", "", "PompeAPM", False, False, False, False): ArmureDefensifValeurPompeAPM,
    ("Heaume", "Valeur", "", "PompeAPM", False, False, False, False): HeaumeDefensifValeurPompeAPM,
    ("Anneau", "", "PompeAPV", "PompeAPM", False, False, False, False): AnneauPompeAPVPompeAPM,
    ("Armure", "", "PompeAPV", "PompeAPM", False, False, False, False): ArmurePompeAPVPompeAPM,
    ("Heaume", "", "PompeAPV", "PompeAPM", False, False, False, False): HeaumePompeAPVPompeAPM,
    ("Anneau", "Plafond", "PompeAPV", "PompeAPM", False, False, False, False): AnneauDefensifPlafondPompeAPVPompeAPM,
    ("Armure", "Plafond", "PompeAPV", "PompeAPM", False, False, False, False): ArmureDefensifPlafondPompeAPVPompeAPM,
    ("Heaume", "Plafond", "PompeAPV", "PompeAPM", False, False, False, False): HeaumeDefensifPlafondPompeAPVPompeAPM,
    ("Anneau", "Proportion", "PompeAPV", "PompeAPM", False, False, False, False): AnneauDefensifProportionPompeAPVPompeAPM,
    ("Armure", "Proportion", "PompeAPV", "PompeAPM", False, False, False, False): ArmureDefensifProportionPompeAPVPompeAPM,
    ("Heaume", "Proportion", "PompeAPV", "PompeAPM", False, False, False, False): HeaumeDefensifProportionPompeAPVPompeAPM,
    ("Anneau", "Seuil", "PompeAPV", "PompeAPM", False, False, False, False): AnneauDefensifSeuilPompeAPVPompeAPM,
    ("Armure", "Seuil", "PompeAPV", "PompeAPM", False, False, False, False): ArmureDefensifSeuilPompeAPVPompeAPM,
    ("Heaume", "Seuil", "PompeAPV", "PompeAPM", False, False, False, False): HeaumeDefensifSeuilPompeAPVPompeAPM,
    ("Anneau", "Valeur", "PompeAPV", "PompeAPM", False, False, False, False): AnneauDefensifValeurPompeAPVPompeAPM,
    ("Armure", "Valeur", "PompeAPV", "PompeAPM", False, False, False, False): ArmureDefensifValeurPompeAPVPompeAPM,
    ("Heaume", "Valeur", "PompeAPV", "PompeAPM", False, False, False, False): HeaumeDefensifValeurPompeAPVPompeAPM,
    ("Anneau", "", "RenforceRegenPV", "PompeAPM", False, False, False, False): AnneauRenforceRegenPVPompeAPM,
    ("Armure", "", "RenforceRegenPV", "PompeAPM", False, False, False, False): ArmureRenforceRegenPVPompeAPM,
    ("Heaume", "", "RenforceRegenPV", "PompeAPM", False, False, False, False): HeaumeRenforceRegenPVPompeAPM,
    ("Anneau", "Plafond", "RenforceRegenPV", "PompeAPM", False, False, False, False): AnneauDefensifPlafondRenforceRegenPVPompeAPM,
    ("Armure", "Plafond", "RenforceRegenPV", "PompeAPM", False, False, False, False): ArmureDefensifPlafondRenforceRegenPVPompeAPM,
    ("Heaume", "Plafond", "RenforceRegenPV", "PompeAPM", False, False, False, False): HeaumeDefensifPlafondRenforceRegenPVPompeAPM,
    ("Anneau", "Proportion", "RenforceRegenPV", "PompeAPM", False, False, False, False): AnneauDefensifProportionRenforceRegenPVPompeAPM,
    ("Armure", "Proportion", "RenforceRegenPV", "PompeAPM", False, False, False, False): ArmureDefensifProportionRenforceRegenPVPompeAPM,
    ("Heaume", "Proportion", "RenforceRegenPV", "PompeAPM", False, False, False, False): HeaumeDefensifProportionRenforceRegenPVPompeAPM,
    ("Anneau", "Seuil", "RenforceRegenPV", "PompeAPM", False, False, False, False): AnneauDefensifSeuilRenforceRegenPVPompeAPM,
    ("Armure", "Seuil", "RenforceRegenPV", "PompeAPM", False, False, False, False): ArmureDefensifSeuilRenforceRegenPVPompeAPM,
    ("Heaume", "Seuil", "RenforceRegenPV", "PompeAPM", False, False, False, False): HeaumeDefensifSeuilRenforceRegenPVPompeAPM,
    ("Anneau", "Valeur", "RenforceRegenPV", "PompeAPM", False, False, False, False): AnneauDefensifValeurRenforceRegenPVPompeAPM,
    ("Armure", "Valeur", "RenforceRegenPV", "PompeAPM", False, False, False, False): ArmureDefensifValeurRenforceRegenPVPompeAPM,
    ("Heaume", "Valeur", "RenforceRegenPV", "PompeAPM", False, False, False, False): HeaumeDefensifValeurRenforceRegenPVPompeAPM,
    ("Anneau", "", "", "RenforceRegenPM", False, False, False, False): AnneauRenforceRegenPM,
    ("Armure", "", "", "RenforceRegenPM", False, False, False, False): ArmureRenforceRegenPM,
    ("Heaume", "", "", "RenforceRegenPM", False, False, False, False): HeaumeRenforceRegenPM,
    ("Anneau", "Plafond", "", "RenforceRegenPM", False, False, False, False): AnneauDefensifPlafondRenforceRegenPM,
    ("Armure", "Plafond", "", "RenforceRegenPM", False, False, False, False): ArmureDefensifPlafondRenforceRegenPM,
    ("Heaume", "Plafond", "", "RenforceRegenPM", False, False, False, False): HeaumeDefensifPlafondRenforceRegenPM,
    ("Anneau", "Proportion", "", "RenforceRegenPM", False, False, False, False): AnneauDefensifProportionRenforceRegenPM,
    ("Armure", "Proportion", "", "RenforceRegenPM", False, False, False, False): ArmureDefensifProportionRenforceRegenPM,
    ("Heaume", "Proportion", "", "RenforceRegenPM", False, False, False, False): HeaumeDefensifProportionRenforceRegenPM,
    ("Anneau", "Seuil", "", "RenforceRegenPM", False, False, False, False): AnneauDefensifSeuilRenforceRegenPM,
    ("Armure", "Seuil", "", "RenforceRegenPM", False, False, False, False): ArmureDefensifSeuilRenforceRegenPM,
    ("Heaume", "Seuil", "", "RenforceRegenPM", False, False, False, False): HeaumeDefensifSeuilRenforceRegenPM,
    ("Anneau", "Valeur", "", "RenforceRegenPM", False, False, False, False): AnneauDefensifValeurRenforceRegenPM,
    ("Armure", "Valeur", "", "RenforceRegenPM", False, False, False, False): ArmureDefensifValeurRenforceRegenPM,
    ("Heaume", "Valeur", "", "RenforceRegenPM", False, False, False, False): HeaumeDefensifValeurRenforceRegenPM,
    ("Anneau", "", "PompeAPV", "RenforceRegenPM", False, False, False, False): AnneauPompeAPVRenforceRegenPM,
    ("Armure", "", "PompeAPV", "RenforceRegenPM", False, False, False, False): ArmurePompeAPVRenforceRegenPM,
    ("Heaume", "", "PompeAPV", "RenforceRegenPM", False, False, False, False): HeaumePompeAPVRenforceRegenPM,
    ("Anneau", "Plafond", "PompeAPV", "RenforceRegenPM", False, False, False, False): AnneauDefensifPlafondPompeAPVRenforceRegenPM,
    ("Armure", "Plafond", "PompeAPV", "RenforceRegenPM", False, False, False, False): ArmureDefensifPlafondPompeAPVRenforceRegenPM,
    ("Heaume", "Plafond", "PompeAPV", "RenforceRegenPM", False, False, False, False): HeaumeDefensifPlafondPompeAPVRenforceRegenPM,
    ("Anneau", "Proportion", "PompeAPV", "RenforceRegenPM", False, False, False, False): AnneauDefensifProportionPompeAPVRenforceRegenPM,
    ("Armure", "Proportion", "PompeAPV", "RenforceRegenPM", False, False, False, False): ArmureDefensifProportionPompeAPVRenforceRegenPM,
    ("Heaume", "Proportion", "PompeAPV", "RenforceRegenPM", False, False, False, False): HeaumeDefensifProportionPompeAPVRenforceRegenPM,
    ("Anneau", "Seuil", "PompeAPV", "RenforceRegenPM", False, False, False, False): AnneauDefensifSeuilPompeAPVRenforceRegenPM,
    ("Armure", "Seuil", "PompeAPV", "RenforceRegenPM", False, False, False, False): ArmureDefensifSeuilPompeAPVRenforceRegenPM,
    ("Heaume", "Seuil", "PompeAPV", "RenforceRegenPM", False, False, False, False): HeaumeDefensifSeuilPompeAPVRenforceRegenPM,
    ("Anneau", "Valeur", "PompeAPV", "RenforceRegenPM", False, False, False, False): AnneauDefensifValeurPompeAPVRenforceRegenPM,
    ("Armure", "Valeur", "PompeAPV", "RenforceRegenPM", False, False, False, False): ArmureDefensifValeurPompeAPVRenforceRegenPM,
    ("Heaume", "Valeur", "PompeAPV", "RenforceRegenPM", False, False, False, False): HeaumeDefensifValeurPompeAPVRenforceRegenPM,
    ("Anneau", "", "RenforceRegenPV", "RenforceRegenPM", False, False, False, False): AnneauRenforceRegenPVRenforceRegenPM,
    ("Armure", "", "RenforceRegenPV", "RenforceRegenPM", False, False, False, False): ArmureRenforceRegenPVRenforceRegenPM,
    ("Heaume", "", "RenforceRegenPV", "RenforceRegenPM", False, False, False, False): HeaumeRenforceRegenPVRenforceRegenPM,
    ("Anneau", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, False, False, False): AnneauDefensifPlafondRenforceRegenPVRenforceRegenPM,
    ("Armure", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, False, False, False): ArmureDefensifPlafondRenforceRegenPVRenforceRegenPM,
    ("Heaume", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, False, False, False): HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPM,
    ("Anneau", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, False, False, False): AnneauDefensifProportionRenforceRegenPVRenforceRegenPM,
    ("Armure", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, False, False, False): ArmureDefensifProportionRenforceRegenPVRenforceRegenPM,
    ("Heaume", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, False, False, False): HeaumeDefensifProportionRenforceRegenPVRenforceRegenPM,
    ("Anneau", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, False, False, False): AnneauDefensifSeuilRenforceRegenPVRenforceRegenPM,
    ("Armure", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, False, False, False): ArmureDefensifSeuilRenforceRegenPVRenforceRegenPM,
    ("Heaume", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, False, False, False): HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPM,
    ("Anneau", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, False, False, False): AnneauDefensifValeurRenforceRegenPVRenforceRegenPM,
    ("Armure", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, False, False, False): ArmureDefensifValeurRenforceRegenPVRenforceRegenPM,
    ("Heaume", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, False, False, False): HeaumeDefensifValeurRenforceRegenPVRenforceRegenPM,
    ("Anneau", "", "", "", True, False, False, False): AnneauAccelerateur,
    ("Armure", "", "", "", True, False, False, False): ArmureAccelerateur,
    ("Heaume", "", "", "", True, False, False, False): HeaumeAccelerateur,
    ("Anneau", "Plafond", "", "", True, False, False, False): AnneauDefensifPlafondAccelerateur,
    ("Armure", "Plafond", "", "", True, False, False, False): ArmureDefensifPlafondAccelerateur,
    ("Heaume", "Plafond", "", "", True, False, False, False): HeaumeDefensifPlafondAccelerateur,
    ("Anneau", "Proportion", "", "", True, False, False, False): AnneauDefensifProportionAccelerateur,
    ("Armure", "Proportion", "", "", True, False, False, False): ArmureDefensifProportionAccelerateur,
    ("Heaume", "Proportion", "", "", True, False, False, False): HeaumeDefensifProportionAccelerateur,
    ("Anneau", "Seuil", "", "", True, False, False, False): AnneauDefensifSeuilAccelerateur,
    ("Armure", "Seuil", "", "", True, False, False, False): ArmureDefensifSeuilAccelerateur,
    ("Heaume", "Seuil", "", "", True, False, False, False): HeaumeDefensifSeuilAccelerateur,
    ("Anneau", "Valeur", "", "", True, False, False, False): AnneauDefensifValeurAccelerateur,
    ("Armure", "Valeur", "", "", True, False, False, False): ArmureDefensifValeurAccelerateur,
    ("Heaume", "Valeur", "", "", True, False, False, False): HeaumeDefensifValeurAccelerateur,
    ("Anneau", "", "PompeAPV", "", True, False, False, False): AnneauPompeAPVAccelerateur,
    ("Armure", "", "PompeAPV", "", True, False, False, False): ArmurePompeAPVAccelerateur,
    ("Heaume", "", "PompeAPV", "", True, False, False, False): HeaumePompeAPVAccelerateur,
    ("Anneau", "Plafond", "PompeAPV", "", True, False, False, False): AnneauDefensifPlafondPompeAPVAccelerateur,
    ("Armure", "Plafond", "PompeAPV", "", True, False, False, False): ArmureDefensifPlafondPompeAPVAccelerateur,
    ("Heaume", "Plafond", "PompeAPV", "", True, False, False, False): HeaumeDefensifPlafondPompeAPVAccelerateur,
    ("Anneau", "Proportion", "PompeAPV", "", True, False, False, False): AnneauDefensifProportionPompeAPVAccelerateur,
    ("Armure", "Proportion", "PompeAPV", "", True, False, False, False): ArmureDefensifProportionPompeAPVAccelerateur,
    ("Heaume", "Proportion", "PompeAPV", "", True, False, False, False): HeaumeDefensifProportionPompeAPVAccelerateur,
    ("Anneau", "Seuil", "PompeAPV", "", True, False, False, False): AnneauDefensifSeuilPompeAPVAccelerateur,
    ("Armure", "Seuil", "PompeAPV", "", True, False, False, False): ArmureDefensifSeuilPompeAPVAccelerateur,
    ("Heaume", "Seuil", "PompeAPV", "", True, False, False, False): HeaumeDefensifSeuilPompeAPVAccelerateur,
    ("Anneau", "Valeur", "PompeAPV", "", True, False, False, False): AnneauDefensifValeurPompeAPVAccelerateur,
    ("Armure", "Valeur", "PompeAPV", "", True, False, False, False): ArmureDefensifValeurPompeAPVAccelerateur,
    ("Heaume", "Valeur", "PompeAPV", "", True, False, False, False): HeaumeDefensifValeurPompeAPVAccelerateur,
    ("Anneau", "", "RenforceRegenPV", "", True, False, False, False): AnneauRenforceRegenPVAccelerateur,
    ("Armure", "", "RenforceRegenPV", "", True, False, False, False): ArmureRenforceRegenPVAccelerateur,
    ("Heaume", "", "RenforceRegenPV", "", True, False, False, False): HeaumeRenforceRegenPVAccelerateur,
    ("Anneau", "Plafond", "RenforceRegenPV", "", True, False, False, False): AnneauDefensifPlafondRenforceRegenPVAccelerateur,
    ("Armure", "Plafond", "RenforceRegenPV", "", True, False, False, False): ArmureDefensifPlafondRenforceRegenPVAccelerateur,
    ("Heaume", "Plafond", "RenforceRegenPV", "", True, False, False, False): HeaumeDefensifPlafondRenforceRegenPVAccelerateur,
    ("Anneau", "Proportion", "RenforceRegenPV", "", True, False, False, False): AnneauDefensifProportionRenforceRegenPVAccelerateur,
    ("Armure", "Proportion", "RenforceRegenPV", "", True, False, False, False): ArmureDefensifProportionRenforceRegenPVAccelerateur,
    ("Heaume", "Proportion", "RenforceRegenPV", "", True, False, False, False): HeaumeDefensifProportionRenforceRegenPVAccelerateur,
    ("Anneau", "Seuil", "RenforceRegenPV", "", True, False, False, False): AnneauDefensifSeuilRenforceRegenPVAccelerateur,
    ("Armure", "Seuil", "RenforceRegenPV", "", True, False, False, False): ArmureDefensifSeuilRenforceRegenPVAccelerateur,
    ("Heaume", "Seuil", "RenforceRegenPV", "", True, False, False, False): HeaumeDefensifSeuilRenforceRegenPVAccelerateur,
    ("Anneau", "Valeur", "RenforceRegenPV", "", True, False, False, False): AnneauDefensifValeurRenforceRegenPVAccelerateur,
    ("Armure", "Valeur", "RenforceRegenPV", "", True, False, False, False): ArmureDefensifValeurRenforceRegenPVAccelerateur,
    ("Heaume", "Valeur", "RenforceRegenPV", "", True, False, False, False): HeaumeDefensifValeurRenforceRegenPVAccelerateur,
    ("Anneau", "", "", "PompeAPM", True, False, False, False): AnneauPompeAPMAccelerateur,
    ("Armure", "", "", "PompeAPM", True, False, False, False): ArmurePompeAPMAccelerateur,
    ("Heaume", "", "", "PompeAPM", True, False, False, False): HeaumePompeAPMAccelerateur,
    ("Anneau", "Plafond", "", "PompeAPM", True, False, False, False): AnneauDefensifPlafondPompeAPMAccelerateur,
    ("Armure", "Plafond", "", "PompeAPM", True, False, False, False): ArmureDefensifPlafondPompeAPMAccelerateur,
    ("Heaume", "Plafond", "", "PompeAPM", True, False, False, False): HeaumeDefensifPlafondPompeAPMAccelerateur,
    ("Anneau", "Proportion", "", "PompeAPM", True, False, False, False): AnneauDefensifProportionPompeAPMAccelerateur,
    ("Armure", "Proportion", "", "PompeAPM", True, False, False, False): ArmureDefensifProportionPompeAPMAccelerateur,
    ("Heaume", "Proportion", "", "PompeAPM", True, False, False, False): HeaumeDefensifProportionPompeAPMAccelerateur,
    ("Anneau", "Seuil", "", "PompeAPM", True, False, False, False): AnneauDefensifSeuilPompeAPMAccelerateur,
    ("Armure", "Seuil", "", "PompeAPM", True, False, False, False): ArmureDefensifSeuilPompeAPMAccelerateur,
    ("Heaume", "Seuil", "", "PompeAPM", True, False, False, False): HeaumeDefensifSeuilPompeAPMAccelerateur,
    ("Anneau", "Valeur", "", "PompeAPM", True, False, False, False): AnneauDefensifValeurPompeAPMAccelerateur,
    ("Armure", "Valeur", "", "PompeAPM", True, False, False, False): ArmureDefensifValeurPompeAPMAccelerateur,
    ("Heaume", "Valeur", "", "PompeAPM", True, False, False, False): HeaumeDefensifValeurPompeAPMAccelerateur,
    ("Anneau", "", "PompeAPV", "PompeAPM", True, False, False, False): AnneauPompeAPVPompeAPMAccelerateur,
    ("Armure", "", "PompeAPV", "PompeAPM", True, False, False, False): ArmurePompeAPVPompeAPMAccelerateur,
    ("Heaume", "", "PompeAPV", "PompeAPM", True, False, False, False): HeaumePompeAPVPompeAPMAccelerateur,
    ("Anneau", "Plafond", "PompeAPV", "PompeAPM", True, False, False, False): AnneauDefensifPlafondPompeAPVPompeAPMAccelerateur,
    ("Armure", "Plafond", "PompeAPV", "PompeAPM", True, False, False, False): ArmureDefensifPlafondPompeAPVPompeAPMAccelerateur,
    ("Heaume", "Plafond", "PompeAPV", "PompeAPM", True, False, False, False): HeaumeDefensifPlafondPompeAPVPompeAPMAccelerateur,
    ("Anneau", "Proportion", "PompeAPV", "PompeAPM", True, False, False, False): AnneauDefensifProportionPompeAPVPompeAPMAccelerateur,
    ("Armure", "Proportion", "PompeAPV", "PompeAPM", True, False, False, False): ArmureDefensifProportionPompeAPVPompeAPMAccelerateur,
    ("Heaume", "Proportion", "PompeAPV", "PompeAPM", True, False, False, False): HeaumeDefensifProportionPompeAPVPompeAPMAccelerateur,
    ("Anneau", "Seuil", "PompeAPV", "PompeAPM", True, False, False, False): AnneauDefensifSeuilPompeAPVPompeAPMAccelerateur,
    ("Armure", "Seuil", "PompeAPV", "PompeAPM", True, False, False, False): ArmureDefensifSeuilPompeAPVPompeAPMAccelerateur,
    ("Heaume", "Seuil", "PompeAPV", "PompeAPM", True, False, False, False): HeaumeDefensifSeuilPompeAPVPompeAPMAccelerateur,
    ("Anneau", "Valeur", "PompeAPV", "PompeAPM", True, False, False, False): AnneauDefensifValeurPompeAPVPompeAPMAccelerateur,
    ("Armure", "Valeur", "PompeAPV", "PompeAPM", True, False, False, False): ArmureDefensifValeurPompeAPVPompeAPMAccelerateur,
    ("Heaume", "Valeur", "PompeAPV", "PompeAPM", True, False, False, False): HeaumeDefensifValeurPompeAPVPompeAPMAccelerateur,
    ("Anneau", "", "RenforceRegenPV", "PompeAPM", True, False, False, False): AnneauRenforceRegenPVPompeAPMAccelerateur,
    ("Armure", "", "RenforceRegenPV", "PompeAPM", True, False, False, False): ArmureRenforceRegenPVPompeAPMAccelerateur,
    ("Heaume", "", "RenforceRegenPV", "PompeAPM", True, False, False, False): HeaumeRenforceRegenPVPompeAPMAccelerateur,
    ("Anneau", "Plafond", "RenforceRegenPV", "PompeAPM", True, False, False, False): AnneauDefensifPlafondRenforceRegenPVPompeAPMAccelerateur,
    ("Armure", "Plafond", "RenforceRegenPV", "PompeAPM", True, False, False, False): ArmureDefensifPlafondRenforceRegenPVPompeAPMAccelerateur,
    ("Heaume", "Plafond", "RenforceRegenPV", "PompeAPM", True, False, False, False): HeaumeDefensifPlafondRenforceRegenPVPompeAPMAccelerateur,
    ("Anneau", "Proportion", "RenforceRegenPV", "PompeAPM", True, False, False, False): AnneauDefensifProportionRenforceRegenPVPompeAPMAccelerateur,
    ("Armure", "Proportion", "RenforceRegenPV", "PompeAPM", True, False, False, False): ArmureDefensifProportionRenforceRegenPVPompeAPMAccelerateur,
    ("Heaume", "Proportion", "RenforceRegenPV", "PompeAPM", True, False, False, False): HeaumeDefensifProportionRenforceRegenPVPompeAPMAccelerateur,
    ("Anneau", "Seuil", "RenforceRegenPV", "PompeAPM", True, False, False, False): AnneauDefensifSeuilRenforceRegenPVPompeAPMAccelerateur,
    ("Armure", "Seuil", "RenforceRegenPV", "PompeAPM", True, False, False, False): ArmureDefensifSeuilRenforceRegenPVPompeAPMAccelerateur,
    ("Heaume", "Seuil", "RenforceRegenPV", "PompeAPM", True, False, False, False): HeaumeDefensifSeuilRenforceRegenPVPompeAPMAccelerateur,
    ("Anneau", "Valeur", "RenforceRegenPV", "PompeAPM", True, False, False, False): AnneauDefensifValeurRenforceRegenPVPompeAPMAccelerateur,
    ("Armure", "Valeur", "RenforceRegenPV", "PompeAPM", True, False, False, False): ArmureDefensifValeurRenforceRegenPVPompeAPMAccelerateur,
    ("Heaume", "Valeur", "RenforceRegenPV", "PompeAPM", True, False, False, False): HeaumeDefensifValeurRenforceRegenPVPompeAPMAccelerateur,
    ("Anneau", "", "", "RenforceRegenPM", True, False, False, False): AnneauRenforceRegenPMAccelerateur,
    ("Armure", "", "", "RenforceRegenPM", True, False, False, False): ArmureRenforceRegenPMAccelerateur,
    ("Heaume", "", "", "RenforceRegenPM", True, False, False, False): HeaumeRenforceRegenPMAccelerateur,
    ("Anneau", "Plafond", "", "RenforceRegenPM", True, False, False, False): AnneauDefensifPlafondRenforceRegenPMAccelerateur,
    ("Armure", "Plafond", "", "RenforceRegenPM", True, False, False, False): ArmureDefensifPlafondRenforceRegenPMAccelerateur,
    ("Heaume", "Plafond", "", "RenforceRegenPM", True, False, False, False): HeaumeDefensifPlafondRenforceRegenPMAccelerateur,
    ("Anneau", "Proportion", "", "RenforceRegenPM", True, False, False, False): AnneauDefensifProportionRenforceRegenPMAccelerateur,
    ("Armure", "Proportion", "", "RenforceRegenPM", True, False, False, False): ArmureDefensifProportionRenforceRegenPMAccelerateur,
    ("Heaume", "Proportion", "", "RenforceRegenPM", True, False, False, False): HeaumeDefensifProportionRenforceRegenPMAccelerateur,
    ("Anneau", "Seuil", "", "RenforceRegenPM", True, False, False, False): AnneauDefensifSeuilRenforceRegenPMAccelerateur,
    ("Armure", "Seuil", "", "RenforceRegenPM", True, False, False, False): ArmureDefensifSeuilRenforceRegenPMAccelerateur,
    ("Heaume", "Seuil", "", "RenforceRegenPM", True, False, False, False): HeaumeDefensifSeuilRenforceRegenPMAccelerateur,
    ("Anneau", "Valeur", "", "RenforceRegenPM", True, False, False, False): AnneauDefensifValeurRenforceRegenPMAccelerateur,
    ("Armure", "Valeur", "", "RenforceRegenPM", True, False, False, False): ArmureDefensifValeurRenforceRegenPMAccelerateur,
    ("Heaume", "Valeur", "", "RenforceRegenPM", True, False, False, False): HeaumeDefensifValeurRenforceRegenPMAccelerateur,
    ("Anneau", "", "PompeAPV", "RenforceRegenPM", True, False, False, False): AnneauPompeAPVRenforceRegenPMAccelerateur,
    ("Armure", "", "PompeAPV", "RenforceRegenPM", True, False, False, False): ArmurePompeAPVRenforceRegenPMAccelerateur,
    ("Heaume", "", "PompeAPV", "RenforceRegenPM", True, False, False, False): HeaumePompeAPVRenforceRegenPMAccelerateur,
    ("Anneau", "Plafond", "PompeAPV", "RenforceRegenPM", True, False, False, False): AnneauDefensifPlafondPompeAPVRenforceRegenPMAccelerateur,
    ("Armure", "Plafond", "PompeAPV", "RenforceRegenPM", True, False, False, False): ArmureDefensifPlafondPompeAPVRenforceRegenPMAccelerateur,
    ("Heaume", "Plafond", "PompeAPV", "RenforceRegenPM", True, False, False, False): HeaumeDefensifPlafondPompeAPVRenforceRegenPMAccelerateur,
    ("Anneau", "Proportion", "PompeAPV", "RenforceRegenPM", True, False, False, False): AnneauDefensifProportionPompeAPVRenforceRegenPMAccelerateur,
    ("Armure", "Proportion", "PompeAPV", "RenforceRegenPM", True, False, False, False): ArmureDefensifProportionPompeAPVRenforceRegenPMAccelerateur,
    ("Heaume", "Proportion", "PompeAPV", "RenforceRegenPM", True, False, False, False): HeaumeDefensifProportionPompeAPVRenforceRegenPMAccelerateur,
    ("Anneau", "Seuil", "PompeAPV", "RenforceRegenPM", True, False, False, False): AnneauDefensifSeuilPompeAPVRenforceRegenPMAccelerateur,
    ("Armure", "Seuil", "PompeAPV", "RenforceRegenPM", True, False, False, False): ArmureDefensifSeuilPompeAPVRenforceRegenPMAccelerateur,
    ("Heaume", "Seuil", "PompeAPV", "RenforceRegenPM", True, False, False, False): HeaumeDefensifSeuilPompeAPVRenforceRegenPMAccelerateur,
    ("Anneau", "Valeur", "PompeAPV", "RenforceRegenPM", True, False, False, False): AnneauDefensifValeurPompeAPVRenforceRegenPMAccelerateur,
    ("Armure", "Valeur", "PompeAPV", "RenforceRegenPM", True, False, False, False): ArmureDefensifValeurPompeAPVRenforceRegenPMAccelerateur,
    ("Heaume", "Valeur", "PompeAPV", "RenforceRegenPM", True, False, False, False): HeaumeDefensifValeurPompeAPVRenforceRegenPMAccelerateur,
    ("Anneau", "", "RenforceRegenPV", "RenforceRegenPM", True, False, False, False): AnneauRenforceRegenPVRenforceRegenPMAccelerateur,
    ("Armure", "", "RenforceRegenPV", "RenforceRegenPM", True, False, False, False): ArmureRenforceRegenPVRenforceRegenPMAccelerateur,
    ("Heaume", "", "RenforceRegenPV", "RenforceRegenPM", True, False, False, False): HeaumeRenforceRegenPVRenforceRegenPMAccelerateur,
    ("Anneau", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, False, False, False): AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateur,
    ("Armure", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, False, False, False): ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateur,
    ("Heaume", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, False, False, False): HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateur,
    ("Anneau", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, False, False, False): AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateur,
    ("Armure", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, False, False, False): ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateur,
    ("Heaume", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, False, False, False): HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateur,
    ("Anneau", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, False, False, False): AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateur,
    ("Armure", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, False, False, False): ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateur,
    ("Heaume", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, False, False, False): HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateur,
    ("Anneau", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, False, False, False): AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateur,
    ("Armure", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, False, False, False): ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateur,
    ("Heaume", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, False, False, False): HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateur,
    ("Anneau", "", "", "", False, True, False, False): AnneauAnoblisseur,
    ("Armure", "", "", "", False, True, False, False): ArmureAnoblisseur,
    ("Heaume", "", "", "", False, True, False, False): HeaumeAnoblisseur,
    ("Anneau", "Plafond", "", "", False, True, False, False): AnneauDefensifPlafondAnoblisseur,
    ("Armure", "Plafond", "", "", False, True, False, False): ArmureDefensifPlafondAnoblisseur,
    ("Heaume", "Plafond", "", "", False, True, False, False): HeaumeDefensifPlafondAnoblisseur,
    ("Anneau", "Proportion", "", "", False, True, False, False): AnneauDefensifProportionAnoblisseur,
    ("Armure", "Proportion", "", "", False, True, False, False): ArmureDefensifProportionAnoblisseur,
    ("Heaume", "Proportion", "", "", False, True, False, False): HeaumeDefensifProportionAnoblisseur,
    ("Anneau", "Seuil", "", "", False, True, False, False): AnneauDefensifSeuilAnoblisseur,
    ("Armure", "Seuil", "", "", False, True, False, False): ArmureDefensifSeuilAnoblisseur,
    ("Heaume", "Seuil", "", "", False, True, False, False): HeaumeDefensifSeuilAnoblisseur,
    ("Anneau", "Valeur", "", "", False, True, False, False): AnneauDefensifValeurAnoblisseur,
    ("Armure", "Valeur", "", "", False, True, False, False): ArmureDefensifValeurAnoblisseur,
    ("Heaume", "Valeur", "", "", False, True, False, False): HeaumeDefensifValeurAnoblisseur,
    ("Anneau", "", "PompeAPV", "", False, True, False, False): AnneauPompeAPVAnoblisseur,
    ("Armure", "", "PompeAPV", "", False, True, False, False): ArmurePompeAPVAnoblisseur,
    ("Heaume", "", "PompeAPV", "", False, True, False, False): HeaumePompeAPVAnoblisseur,
    ("Anneau", "Plafond", "PompeAPV", "", False, True, False, False): AnneauDefensifPlafondPompeAPVAnoblisseur,
    ("Armure", "Plafond", "PompeAPV", "", False, True, False, False): ArmureDefensifPlafondPompeAPVAnoblisseur,
    ("Heaume", "Plafond", "PompeAPV", "", False, True, False, False): HeaumeDefensifPlafondPompeAPVAnoblisseur,
    ("Anneau", "Proportion", "PompeAPV", "", False, True, False, False): AnneauDefensifProportionPompeAPVAnoblisseur,
    ("Armure", "Proportion", "PompeAPV", "", False, True, False, False): ArmureDefensifProportionPompeAPVAnoblisseur,
    ("Heaume", "Proportion", "PompeAPV", "", False, True, False, False): HeaumeDefensifProportionPompeAPVAnoblisseur,
    ("Anneau", "Seuil", "PompeAPV", "", False, True, False, False): AnneauDefensifSeuilPompeAPVAnoblisseur,
    ("Armure", "Seuil", "PompeAPV", "", False, True, False, False): ArmureDefensifSeuilPompeAPVAnoblisseur,
    ("Heaume", "Seuil", "PompeAPV", "", False, True, False, False): HeaumeDefensifSeuilPompeAPVAnoblisseur,
    ("Anneau", "Valeur", "PompeAPV", "", False, True, False, False): AnneauDefensifValeurPompeAPVAnoblisseur,
    ("Armure", "Valeur", "PompeAPV", "", False, True, False, False): ArmureDefensifValeurPompeAPVAnoblisseur,
    ("Heaume", "Valeur", "PompeAPV", "", False, True, False, False): HeaumeDefensifValeurPompeAPVAnoblisseur,
    ("Anneau", "", "RenforceRegenPV", "", False, True, False, False): AnneauRenforceRegenPVAnoblisseur,
    ("Armure", "", "RenforceRegenPV", "", False, True, False, False): ArmureRenforceRegenPVAnoblisseur,
    ("Heaume", "", "RenforceRegenPV", "", False, True, False, False): HeaumeRenforceRegenPVAnoblisseur,
    ("Anneau", "Plafond", "RenforceRegenPV", "", False, True, False, False): AnneauDefensifPlafondRenforceRegenPVAnoblisseur,
    ("Armure", "Plafond", "RenforceRegenPV", "", False, True, False, False): ArmureDefensifPlafondRenforceRegenPVAnoblisseur,
    ("Heaume", "Plafond", "RenforceRegenPV", "", False, True, False, False): HeaumeDefensifPlafondRenforceRegenPVAnoblisseur,
    ("Anneau", "Proportion", "RenforceRegenPV", "", False, True, False, False): AnneauDefensifProportionRenforceRegenPVAnoblisseur,
    ("Armure", "Proportion", "RenforceRegenPV", "", False, True, False, False): ArmureDefensifProportionRenforceRegenPVAnoblisseur,
    ("Heaume", "Proportion", "RenforceRegenPV", "", False, True, False, False): HeaumeDefensifProportionRenforceRegenPVAnoblisseur,
    ("Anneau", "Seuil", "RenforceRegenPV", "", False, True, False, False): AnneauDefensifSeuilRenforceRegenPVAnoblisseur,
    ("Armure", "Seuil", "RenforceRegenPV", "", False, True, False, False): ArmureDefensifSeuilRenforceRegenPVAnoblisseur,
    ("Heaume", "Seuil", "RenforceRegenPV", "", False, True, False, False): HeaumeDefensifSeuilRenforceRegenPVAnoblisseur,
    ("Anneau", "Valeur", "RenforceRegenPV", "", False, True, False, False): AnneauDefensifValeurRenforceRegenPVAnoblisseur,
    ("Armure", "Valeur", "RenforceRegenPV", "", False, True, False, False): ArmureDefensifValeurRenforceRegenPVAnoblisseur,
    ("Heaume", "Valeur", "RenforceRegenPV", "", False, True, False, False): HeaumeDefensifValeurRenforceRegenPVAnoblisseur,
    ("Anneau", "", "", "PompeAPM", False, True, False, False): AnneauPompeAPMAnoblisseur,
    ("Armure", "", "", "PompeAPM", False, True, False, False): ArmurePompeAPMAnoblisseur,
    ("Heaume", "", "", "PompeAPM", False, True, False, False): HeaumePompeAPMAnoblisseur,
    ("Anneau", "Plafond", "", "PompeAPM", False, True, False, False): AnneauDefensifPlafondPompeAPMAnoblisseur,
    ("Armure", "Plafond", "", "PompeAPM", False, True, False, False): ArmureDefensifPlafondPompeAPMAnoblisseur,
    ("Heaume", "Plafond", "", "PompeAPM", False, True, False, False): HeaumeDefensifPlafondPompeAPMAnoblisseur,
    ("Anneau", "Proportion", "", "PompeAPM", False, True, False, False): AnneauDefensifProportionPompeAPMAnoblisseur,
    ("Armure", "Proportion", "", "PompeAPM", False, True, False, False): ArmureDefensifProportionPompeAPMAnoblisseur,
    ("Heaume", "Proportion", "", "PompeAPM", False, True, False, False): HeaumeDefensifProportionPompeAPMAnoblisseur,
    ("Anneau", "Seuil", "", "PompeAPM", False, True, False, False): AnneauDefensifSeuilPompeAPMAnoblisseur,
    ("Armure", "Seuil", "", "PompeAPM", False, True, False, False): ArmureDefensifSeuilPompeAPMAnoblisseur,
    ("Heaume", "Seuil", "", "PompeAPM", False, True, False, False): HeaumeDefensifSeuilPompeAPMAnoblisseur,
    ("Anneau", "Valeur", "", "PompeAPM", False, True, False, False): AnneauDefensifValeurPompeAPMAnoblisseur,
    ("Armure", "Valeur", "", "PompeAPM", False, True, False, False): ArmureDefensifValeurPompeAPMAnoblisseur,
    ("Heaume", "Valeur", "", "PompeAPM", False, True, False, False): HeaumeDefensifValeurPompeAPMAnoblisseur,
    ("Anneau", "", "PompeAPV", "PompeAPM", False, True, False, False): AnneauPompeAPVPompeAPMAnoblisseur,
    ("Armure", "", "PompeAPV", "PompeAPM", False, True, False, False): ArmurePompeAPVPompeAPMAnoblisseur,
    ("Heaume", "", "PompeAPV", "PompeAPM", False, True, False, False): HeaumePompeAPVPompeAPMAnoblisseur,
    ("Anneau", "Plafond", "PompeAPV", "PompeAPM", False, True, False, False): AnneauDefensifPlafondPompeAPVPompeAPMAnoblisseur,
    ("Armure", "Plafond", "PompeAPV", "PompeAPM", False, True, False, False): ArmureDefensifPlafondPompeAPVPompeAPMAnoblisseur,
    ("Heaume", "Plafond", "PompeAPV", "PompeAPM", False, True, False, False): HeaumeDefensifPlafondPompeAPVPompeAPMAnoblisseur,
    ("Anneau", "Proportion", "PompeAPV", "PompeAPM", False, True, False, False): AnneauDefensifProportionPompeAPVPompeAPMAnoblisseur,
    ("Armure", "Proportion", "PompeAPV", "PompeAPM", False, True, False, False): ArmureDefensifProportionPompeAPVPompeAPMAnoblisseur,
    ("Heaume", "Proportion", "PompeAPV", "PompeAPM", False, True, False, False): HeaumeDefensifProportionPompeAPVPompeAPMAnoblisseur,
    ("Anneau", "Seuil", "PompeAPV", "PompeAPM", False, True, False, False): AnneauDefensifSeuilPompeAPVPompeAPMAnoblisseur,
    ("Armure", "Seuil", "PompeAPV", "PompeAPM", False, True, False, False): ArmureDefensifSeuilPompeAPVPompeAPMAnoblisseur,
    ("Heaume", "Seuil", "PompeAPV", "PompeAPM", False, True, False, False): HeaumeDefensifSeuilPompeAPVPompeAPMAnoblisseur,
    ("Anneau", "Valeur", "PompeAPV", "PompeAPM", False, True, False, False): AnneauDefensifValeurPompeAPVPompeAPMAnoblisseur,
    ("Armure", "Valeur", "PompeAPV", "PompeAPM", False, True, False, False): ArmureDefensifValeurPompeAPVPompeAPMAnoblisseur,
    ("Heaume", "Valeur", "PompeAPV", "PompeAPM", False, True, False, False): HeaumeDefensifValeurPompeAPVPompeAPMAnoblisseur,
    ("Anneau", "", "RenforceRegenPV", "PompeAPM", False, True, False, False): AnneauRenforceRegenPVPompeAPMAnoblisseur,
    ("Armure", "", "RenforceRegenPV", "PompeAPM", False, True, False, False): ArmureRenforceRegenPVPompeAPMAnoblisseur,
    ("Heaume", "", "RenforceRegenPV", "PompeAPM", False, True, False, False): HeaumeRenforceRegenPVPompeAPMAnoblisseur,
    ("Anneau", "Plafond", "RenforceRegenPV", "PompeAPM", False, True, False, False): AnneauDefensifPlafondRenforceRegenPVPompeAPMAnoblisseur,
    ("Armure", "Plafond", "RenforceRegenPV", "PompeAPM", False, True, False, False): ArmureDefensifPlafondRenforceRegenPVPompeAPMAnoblisseur,
    ("Heaume", "Plafond", "RenforceRegenPV", "PompeAPM", False, True, False, False): HeaumeDefensifPlafondRenforceRegenPVPompeAPMAnoblisseur,
    ("Anneau", "Proportion", "RenforceRegenPV", "PompeAPM", False, True, False, False): AnneauDefensifProportionRenforceRegenPVPompeAPMAnoblisseur,
    ("Armure", "Proportion", "RenforceRegenPV", "PompeAPM", False, True, False, False): ArmureDefensifProportionRenforceRegenPVPompeAPMAnoblisseur,
    ("Heaume", "Proportion", "RenforceRegenPV", "PompeAPM", False, True, False, False): HeaumeDefensifProportionRenforceRegenPVPompeAPMAnoblisseur,
    ("Anneau", "Seuil", "RenforceRegenPV", "PompeAPM", False, True, False, False): AnneauDefensifSeuilRenforceRegenPVPompeAPMAnoblisseur,
    ("Armure", "Seuil", "RenforceRegenPV", "PompeAPM", False, True, False, False): ArmureDefensifSeuilRenforceRegenPVPompeAPMAnoblisseur,
    ("Heaume", "Seuil", "RenforceRegenPV", "PompeAPM", False, True, False, False): HeaumeDefensifSeuilRenforceRegenPVPompeAPMAnoblisseur,
    ("Anneau", "Valeur", "RenforceRegenPV", "PompeAPM", False, True, False, False): AnneauDefensifValeurRenforceRegenPVPompeAPMAnoblisseur,
    ("Armure", "Valeur", "RenforceRegenPV", "PompeAPM", False, True, False, False): ArmureDefensifValeurRenforceRegenPVPompeAPMAnoblisseur,
    ("Heaume", "Valeur", "RenforceRegenPV", "PompeAPM", False, True, False, False): HeaumeDefensifValeurRenforceRegenPVPompeAPMAnoblisseur,
    ("Anneau", "", "", "RenforceRegenPM", False, True, False, False): AnneauRenforceRegenPMAnoblisseur,
    ("Armure", "", "", "RenforceRegenPM", False, True, False, False): ArmureRenforceRegenPMAnoblisseur,
    ("Heaume", "", "", "RenforceRegenPM", False, True, False, False): HeaumeRenforceRegenPMAnoblisseur,
    ("Anneau", "Plafond", "", "RenforceRegenPM", False, True, False, False): AnneauDefensifPlafondRenforceRegenPMAnoblisseur,
    ("Armure", "Plafond", "", "RenforceRegenPM", False, True, False, False): ArmureDefensifPlafondRenforceRegenPMAnoblisseur,
    ("Heaume", "Plafond", "", "RenforceRegenPM", False, True, False, False): HeaumeDefensifPlafondRenforceRegenPMAnoblisseur,
    ("Anneau", "Proportion", "", "RenforceRegenPM", False, True, False, False): AnneauDefensifProportionRenforceRegenPMAnoblisseur,
    ("Armure", "Proportion", "", "RenforceRegenPM", False, True, False, False): ArmureDefensifProportionRenforceRegenPMAnoblisseur,
    ("Heaume", "Proportion", "", "RenforceRegenPM", False, True, False, False): HeaumeDefensifProportionRenforceRegenPMAnoblisseur,
    ("Anneau", "Seuil", "", "RenforceRegenPM", False, True, False, False): AnneauDefensifSeuilRenforceRegenPMAnoblisseur,
    ("Armure", "Seuil", "", "RenforceRegenPM", False, True, False, False): ArmureDefensifSeuilRenforceRegenPMAnoblisseur,
    ("Heaume", "Seuil", "", "RenforceRegenPM", False, True, False, False): HeaumeDefensifSeuilRenforceRegenPMAnoblisseur,
    ("Anneau", "Valeur", "", "RenforceRegenPM", False, True, False, False): AnneauDefensifValeurRenforceRegenPMAnoblisseur,
    ("Armure", "Valeur", "", "RenforceRegenPM", False, True, False, False): ArmureDefensifValeurRenforceRegenPMAnoblisseur,
    ("Heaume", "Valeur", "", "RenforceRegenPM", False, True, False, False): HeaumeDefensifValeurRenforceRegenPMAnoblisseur,
    ("Anneau", "", "PompeAPV", "RenforceRegenPM", False, True, False, False): AnneauPompeAPVRenforceRegenPMAnoblisseur,
    ("Armure", "", "PompeAPV", "RenforceRegenPM", False, True, False, False): ArmurePompeAPVRenforceRegenPMAnoblisseur,
    ("Heaume", "", "PompeAPV", "RenforceRegenPM", False, True, False, False): HeaumePompeAPVRenforceRegenPMAnoblisseur,
    ("Anneau", "Plafond", "PompeAPV", "RenforceRegenPM", False, True, False, False): AnneauDefensifPlafondPompeAPVRenforceRegenPMAnoblisseur,
    ("Armure", "Plafond", "PompeAPV", "RenforceRegenPM", False, True, False, False): ArmureDefensifPlafondPompeAPVRenforceRegenPMAnoblisseur,
    ("Heaume", "Plafond", "PompeAPV", "RenforceRegenPM", False, True, False, False): HeaumeDefensifPlafondPompeAPVRenforceRegenPMAnoblisseur,
    ("Anneau", "Proportion", "PompeAPV", "RenforceRegenPM", False, True, False, False): AnneauDefensifProportionPompeAPVRenforceRegenPMAnoblisseur,
    ("Armure", "Proportion", "PompeAPV", "RenforceRegenPM", False, True, False, False): ArmureDefensifProportionPompeAPVRenforceRegenPMAnoblisseur,
    ("Heaume", "Proportion", "PompeAPV", "RenforceRegenPM", False, True, False, False): HeaumeDefensifProportionPompeAPVRenforceRegenPMAnoblisseur,
    ("Anneau", "Seuil", "PompeAPV", "RenforceRegenPM", False, True, False, False): AnneauDefensifSeuilPompeAPVRenforceRegenPMAnoblisseur,
    ("Armure", "Seuil", "PompeAPV", "RenforceRegenPM", False, True, False, False): ArmureDefensifSeuilPompeAPVRenforceRegenPMAnoblisseur,
    ("Heaume", "Seuil", "PompeAPV", "RenforceRegenPM", False, True, False, False): HeaumeDefensifSeuilPompeAPVRenforceRegenPMAnoblisseur,
    ("Anneau", "Valeur", "PompeAPV", "RenforceRegenPM", False, True, False, False): AnneauDefensifValeurPompeAPVRenforceRegenPMAnoblisseur,
    ("Armure", "Valeur", "PompeAPV", "RenforceRegenPM", False, True, False, False): ArmureDefensifValeurPompeAPVRenforceRegenPMAnoblisseur,
    ("Heaume", "Valeur", "PompeAPV", "RenforceRegenPM", False, True, False, False): HeaumeDefensifValeurPompeAPVRenforceRegenPMAnoblisseur,
    ("Anneau", "", "RenforceRegenPV", "RenforceRegenPM", False, True, False, False): AnneauRenforceRegenPVRenforceRegenPMAnoblisseur,
    ("Armure", "", "RenforceRegenPV", "RenforceRegenPM", False, True, False, False): ArmureRenforceRegenPVRenforceRegenPMAnoblisseur,
    ("Heaume", "", "RenforceRegenPV", "RenforceRegenPM", False, True, False, False): HeaumeRenforceRegenPVRenforceRegenPMAnoblisseur,
    ("Anneau", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, True, False, False): AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseur,
    ("Armure", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, True, False, False): ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseur,
    ("Heaume", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, True, False, False): HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseur,
    ("Anneau", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, True, False, False): AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseur,
    ("Armure", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, True, False, False): ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseur,
    ("Heaume", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, True, False, False): HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseur,
    ("Anneau", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, True, False, False): AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseur,
    ("Armure", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, True, False, False): ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseur,
    ("Heaume", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, True, False, False): HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseur,
    ("Anneau", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, True, False, False): AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseur,
    ("Armure", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, True, False, False): ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseur,
    ("Heaume", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, True, False, False): HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseur,
    ("Anneau", "", "", "", True, True, False, False): AnneauAccelerateurAnoblisseur,
    ("Armure", "", "", "", True, True, False, False): ArmureAccelerateurAnoblisseur,
    ("Heaume", "", "", "", True, True, False, False): HeaumeAccelerateurAnoblisseur,
    ("Anneau", "Plafond", "", "", True, True, False, False): AnneauDefensifPlafondAccelerateurAnoblisseur,
    ("Armure", "Plafond", "", "", True, True, False, False): ArmureDefensifPlafondAccelerateurAnoblisseur,
    ("Heaume", "Plafond", "", "", True, True, False, False): HeaumeDefensifPlafondAccelerateurAnoblisseur,
    ("Anneau", "Proportion", "", "", True, True, False, False): AnneauDefensifProportionAccelerateurAnoblisseur,
    ("Armure", "Proportion", "", "", True, True, False, False): ArmureDefensifProportionAccelerateurAnoblisseur,
    ("Heaume", "Proportion", "", "", True, True, False, False): HeaumeDefensifProportionAccelerateurAnoblisseur,
    ("Anneau", "Seuil", "", "", True, True, False, False): AnneauDefensifSeuilAccelerateurAnoblisseur,
    ("Armure", "Seuil", "", "", True, True, False, False): ArmureDefensifSeuilAccelerateurAnoblisseur,
    ("Heaume", "Seuil", "", "", True, True, False, False): HeaumeDefensifSeuilAccelerateurAnoblisseur,
    ("Anneau", "Valeur", "", "", True, True, False, False): AnneauDefensifValeurAccelerateurAnoblisseur,
    ("Armure", "Valeur", "", "", True, True, False, False): ArmureDefensifValeurAccelerateurAnoblisseur,
    ("Heaume", "Valeur", "", "", True, True, False, False): HeaumeDefensifValeurAccelerateurAnoblisseur,
    ("Anneau", "", "PompeAPV", "", True, True, False, False): AnneauPompeAPVAccelerateurAnoblisseur,
    ("Armure", "", "PompeAPV", "", True, True, False, False): ArmurePompeAPVAccelerateurAnoblisseur,
    ("Heaume", "", "PompeAPV", "", True, True, False, False): HeaumePompeAPVAccelerateurAnoblisseur,
    ("Anneau", "Plafond", "PompeAPV", "", True, True, False, False): AnneauDefensifPlafondPompeAPVAccelerateurAnoblisseur,
    ("Armure", "Plafond", "PompeAPV", "", True, True, False, False): ArmureDefensifPlafondPompeAPVAccelerateurAnoblisseur,
    ("Heaume", "Plafond", "PompeAPV", "", True, True, False, False): HeaumeDefensifPlafondPompeAPVAccelerateurAnoblisseur,
    ("Anneau", "Proportion", "PompeAPV", "", True, True, False, False): AnneauDefensifProportionPompeAPVAccelerateurAnoblisseur,
    ("Armure", "Proportion", "PompeAPV", "", True, True, False, False): ArmureDefensifProportionPompeAPVAccelerateurAnoblisseur,
    ("Heaume", "Proportion", "PompeAPV", "", True, True, False, False): HeaumeDefensifProportionPompeAPVAccelerateurAnoblisseur,
    ("Anneau", "Seuil", "PompeAPV", "", True, True, False, False): AnneauDefensifSeuilPompeAPVAccelerateurAnoblisseur,
    ("Armure", "Seuil", "PompeAPV", "", True, True, False, False): ArmureDefensifSeuilPompeAPVAccelerateurAnoblisseur,
    ("Heaume", "Seuil", "PompeAPV", "", True, True, False, False): HeaumeDefensifSeuilPompeAPVAccelerateurAnoblisseur,
    ("Anneau", "Valeur", "PompeAPV", "", True, True, False, False): AnneauDefensifValeurPompeAPVAccelerateurAnoblisseur,
    ("Armure", "Valeur", "PompeAPV", "", True, True, False, False): ArmureDefensifValeurPompeAPVAccelerateurAnoblisseur,
    ("Heaume", "Valeur", "PompeAPV", "", True, True, False, False): HeaumeDefensifValeurPompeAPVAccelerateurAnoblisseur,
    ("Anneau", "", "RenforceRegenPV", "", True, True, False, False): AnneauRenforceRegenPVAccelerateurAnoblisseur,
    ("Armure", "", "RenforceRegenPV", "", True, True, False, False): ArmureRenforceRegenPVAccelerateurAnoblisseur,
    ("Heaume", "", "RenforceRegenPV", "", True, True, False, False): HeaumeRenforceRegenPVAccelerateurAnoblisseur,
    ("Anneau", "Plafond", "RenforceRegenPV", "", True, True, False, False): AnneauDefensifPlafondRenforceRegenPVAccelerateurAnoblisseur,
    ("Armure", "Plafond", "RenforceRegenPV", "", True, True, False, False): ArmureDefensifPlafondRenforceRegenPVAccelerateurAnoblisseur,
    ("Heaume", "Plafond", "RenforceRegenPV", "", True, True, False, False): HeaumeDefensifPlafondRenforceRegenPVAccelerateurAnoblisseur,
    ("Anneau", "Proportion", "RenforceRegenPV", "", True, True, False, False): AnneauDefensifProportionRenforceRegenPVAccelerateurAnoblisseur,
    ("Armure", "Proportion", "RenforceRegenPV", "", True, True, False, False): ArmureDefensifProportionRenforceRegenPVAccelerateurAnoblisseur,
    ("Heaume", "Proportion", "RenforceRegenPV", "", True, True, False, False): HeaumeDefensifProportionRenforceRegenPVAccelerateurAnoblisseur,
    ("Anneau", "Seuil", "RenforceRegenPV", "", True, True, False, False): AnneauDefensifSeuilRenforceRegenPVAccelerateurAnoblisseur,
    ("Armure", "Seuil", "RenforceRegenPV", "", True, True, False, False): ArmureDefensifSeuilRenforceRegenPVAccelerateurAnoblisseur,
    ("Heaume", "Seuil", "RenforceRegenPV", "", True, True, False, False): HeaumeDefensifSeuilRenforceRegenPVAccelerateurAnoblisseur,
    ("Anneau", "Valeur", "RenforceRegenPV", "", True, True, False, False): AnneauDefensifValeurRenforceRegenPVAccelerateurAnoblisseur,
    ("Armure", "Valeur", "RenforceRegenPV", "", True, True, False, False): ArmureDefensifValeurRenforceRegenPVAccelerateurAnoblisseur,
    ("Heaume", "Valeur", "RenforceRegenPV", "", True, True, False, False): HeaumeDefensifValeurRenforceRegenPVAccelerateurAnoblisseur,
    ("Anneau", "", "", "PompeAPM", True, True, False, False): AnneauPompeAPMAccelerateurAnoblisseur,
    ("Armure", "", "", "PompeAPM", True, True, False, False): ArmurePompeAPMAccelerateurAnoblisseur,
    ("Heaume", "", "", "PompeAPM", True, True, False, False): HeaumePompeAPMAccelerateurAnoblisseur,
    ("Anneau", "Plafond", "", "PompeAPM", True, True, False, False): AnneauDefensifPlafondPompeAPMAccelerateurAnoblisseur,
    ("Armure", "Plafond", "", "PompeAPM", True, True, False, False): ArmureDefensifPlafondPompeAPMAccelerateurAnoblisseur,
    ("Heaume", "Plafond", "", "PompeAPM", True, True, False, False): HeaumeDefensifPlafondPompeAPMAccelerateurAnoblisseur,
    ("Anneau", "Proportion", "", "PompeAPM", True, True, False, False): AnneauDefensifProportionPompeAPMAccelerateurAnoblisseur,
    ("Armure", "Proportion", "", "PompeAPM", True, True, False, False): ArmureDefensifProportionPompeAPMAccelerateurAnoblisseur,
    ("Heaume", "Proportion", "", "PompeAPM", True, True, False, False): HeaumeDefensifProportionPompeAPMAccelerateurAnoblisseur,
    ("Anneau", "Seuil", "", "PompeAPM", True, True, False, False): AnneauDefensifSeuilPompeAPMAccelerateurAnoblisseur,
    ("Armure", "Seuil", "", "PompeAPM", True, True, False, False): ArmureDefensifSeuilPompeAPMAccelerateurAnoblisseur,
    ("Heaume", "Seuil", "", "PompeAPM", True, True, False, False): HeaumeDefensifSeuilPompeAPMAccelerateurAnoblisseur,
    ("Anneau", "Valeur", "", "PompeAPM", True, True, False, False): AnneauDefensifValeurPompeAPMAccelerateurAnoblisseur,
    ("Armure", "Valeur", "", "PompeAPM", True, True, False, False): ArmureDefensifValeurPompeAPMAccelerateurAnoblisseur,
    ("Heaume", "Valeur", "", "PompeAPM", True, True, False, False): HeaumeDefensifValeurPompeAPMAccelerateurAnoblisseur,
    ("Anneau", "", "PompeAPV", "PompeAPM", True, True, False, False): AnneauPompeAPVPompeAPMAccelerateurAnoblisseur,
    ("Armure", "", "PompeAPV", "PompeAPM", True, True, False, False): ArmurePompeAPVPompeAPMAccelerateurAnoblisseur,
    ("Heaume", "", "PompeAPV", "PompeAPM", True, True, False, False): HeaumePompeAPVPompeAPMAccelerateurAnoblisseur,
    ("Anneau", "Plafond", "PompeAPV", "PompeAPM", True, True, False, False): AnneauDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseur,
    ("Armure", "Plafond", "PompeAPV", "PompeAPM", True, True, False, False): ArmureDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseur,
    ("Heaume", "Plafond", "PompeAPV", "PompeAPM", True, True, False, False): HeaumeDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseur,
    ("Anneau", "Proportion", "PompeAPV", "PompeAPM", True, True, False, False): AnneauDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseur,
    ("Armure", "Proportion", "PompeAPV", "PompeAPM", True, True, False, False): ArmureDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseur,
    ("Heaume", "Proportion", "PompeAPV", "PompeAPM", True, True, False, False): HeaumeDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseur,
    ("Anneau", "Seuil", "PompeAPV", "PompeAPM", True, True, False, False): AnneauDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseur,
    ("Armure", "Seuil", "PompeAPV", "PompeAPM", True, True, False, False): ArmureDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseur,
    ("Heaume", "Seuil", "PompeAPV", "PompeAPM", True, True, False, False): HeaumeDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseur,
    ("Anneau", "Valeur", "PompeAPV", "PompeAPM", True, True, False, False): AnneauDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseur,
    ("Armure", "Valeur", "PompeAPV", "PompeAPM", True, True, False, False): ArmureDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseur,
    ("Heaume", "Valeur", "PompeAPV", "PompeAPM", True, True, False, False): HeaumeDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseur,
    ("Anneau", "", "RenforceRegenPV", "PompeAPM", True, True, False, False): AnneauRenforceRegenPVPompeAPMAccelerateurAnoblisseur,
    ("Armure", "", "RenforceRegenPV", "PompeAPM", True, True, False, False): ArmureRenforceRegenPVPompeAPMAccelerateurAnoblisseur,
    ("Heaume", "", "RenforceRegenPV", "PompeAPM", True, True, False, False): HeaumeRenforceRegenPVPompeAPMAccelerateurAnoblisseur,
    ("Anneau", "Plafond", "RenforceRegenPV", "PompeAPM", True, True, False, False): AnneauDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseur,
    ("Armure", "Plafond", "RenforceRegenPV", "PompeAPM", True, True, False, False): ArmureDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseur,
    ("Heaume", "Plafond", "RenforceRegenPV", "PompeAPM", True, True, False, False): HeaumeDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseur,
    ("Anneau", "Proportion", "RenforceRegenPV", "PompeAPM", True, True, False, False): AnneauDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseur,
    ("Armure", "Proportion", "RenforceRegenPV", "PompeAPM", True, True, False, False): ArmureDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseur,
    ("Heaume", "Proportion", "RenforceRegenPV", "PompeAPM", True, True, False, False): HeaumeDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseur,
    ("Anneau", "Seuil", "RenforceRegenPV", "PompeAPM", True, True, False, False): AnneauDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseur,
    ("Armure", "Seuil", "RenforceRegenPV", "PompeAPM", True, True, False, False): ArmureDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseur,
    ("Heaume", "Seuil", "RenforceRegenPV", "PompeAPM", True, True, False, False): HeaumeDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseur,
    ("Anneau", "Valeur", "RenforceRegenPV", "PompeAPM", True, True, False, False): AnneauDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseur,
    ("Armure", "Valeur", "RenforceRegenPV", "PompeAPM", True, True, False, False): ArmureDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseur,
    ("Heaume", "Valeur", "RenforceRegenPV", "PompeAPM", True, True, False, False): HeaumeDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseur,
    ("Anneau", "", "", "RenforceRegenPM", True, True, False, False): AnneauRenforceRegenPMAccelerateurAnoblisseur,
    ("Armure", "", "", "RenforceRegenPM", True, True, False, False): ArmureRenforceRegenPMAccelerateurAnoblisseur,
    ("Heaume", "", "", "RenforceRegenPM", True, True, False, False): HeaumeRenforceRegenPMAccelerateurAnoblisseur,
    ("Anneau", "Plafond", "", "RenforceRegenPM", True, True, False, False): AnneauDefensifPlafondRenforceRegenPMAccelerateurAnoblisseur,
    ("Armure", "Plafond", "", "RenforceRegenPM", True, True, False, False): ArmureDefensifPlafondRenforceRegenPMAccelerateurAnoblisseur,
    ("Heaume", "Plafond", "", "RenforceRegenPM", True, True, False, False): HeaumeDefensifPlafondRenforceRegenPMAccelerateurAnoblisseur,
    ("Anneau", "Proportion", "", "RenforceRegenPM", True, True, False, False): AnneauDefensifProportionRenforceRegenPMAccelerateurAnoblisseur,
    ("Armure", "Proportion", "", "RenforceRegenPM", True, True, False, False): ArmureDefensifProportionRenforceRegenPMAccelerateurAnoblisseur,
    ("Heaume", "Proportion", "", "RenforceRegenPM", True, True, False, False): HeaumeDefensifProportionRenforceRegenPMAccelerateurAnoblisseur,
    ("Anneau", "Seuil", "", "RenforceRegenPM", True, True, False, False): AnneauDefensifSeuilRenforceRegenPMAccelerateurAnoblisseur,
    ("Armure", "Seuil", "", "RenforceRegenPM", True, True, False, False): ArmureDefensifSeuilRenforceRegenPMAccelerateurAnoblisseur,
    ("Heaume", "Seuil", "", "RenforceRegenPM", True, True, False, False): HeaumeDefensifSeuilRenforceRegenPMAccelerateurAnoblisseur,
    ("Anneau", "Valeur", "", "RenforceRegenPM", True, True, False, False): AnneauDefensifValeurRenforceRegenPMAccelerateurAnoblisseur,
    ("Armure", "Valeur", "", "RenforceRegenPM", True, True, False, False): ArmureDefensifValeurRenforceRegenPMAccelerateurAnoblisseur,
    ("Heaume", "Valeur", "", "RenforceRegenPM", True, True, False, False): HeaumeDefensifValeurRenforceRegenPMAccelerateurAnoblisseur,
    ("Anneau", "", "PompeAPV", "RenforceRegenPM", True, True, False, False): AnneauPompeAPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Armure", "", "PompeAPV", "RenforceRegenPM", True, True, False, False): ArmurePompeAPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Heaume", "", "PompeAPV", "RenforceRegenPM", True, True, False, False): HeaumePompeAPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Anneau", "Plafond", "PompeAPV", "RenforceRegenPM", True, True, False, False): AnneauDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Armure", "Plafond", "PompeAPV", "RenforceRegenPM", True, True, False, False): ArmureDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Heaume", "Plafond", "PompeAPV", "RenforceRegenPM", True, True, False, False): HeaumeDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Anneau", "Proportion", "PompeAPV", "RenforceRegenPM", True, True, False, False): AnneauDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Armure", "Proportion", "PompeAPV", "RenforceRegenPM", True, True, False, False): ArmureDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Heaume", "Proportion", "PompeAPV", "RenforceRegenPM", True, True, False, False): HeaumeDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Anneau", "Seuil", "PompeAPV", "RenforceRegenPM", True, True, False, False): AnneauDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Armure", "Seuil", "PompeAPV", "RenforceRegenPM", True, True, False, False): ArmureDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Heaume", "Seuil", "PompeAPV", "RenforceRegenPM", True, True, False, False): HeaumeDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Anneau", "Valeur", "PompeAPV", "RenforceRegenPM", True, True, False, False): AnneauDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Armure", "Valeur", "PompeAPV", "RenforceRegenPM", True, True, False, False): ArmureDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Heaume", "Valeur", "PompeAPV", "RenforceRegenPM", True, True, False, False): HeaumeDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Anneau", "", "RenforceRegenPV", "RenforceRegenPM", True, True, False, False): AnneauRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Armure", "", "RenforceRegenPV", "RenforceRegenPM", True, True, False, False): ArmureRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Heaume", "", "RenforceRegenPV", "RenforceRegenPM", True, True, False, False): HeaumeRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Anneau", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, True, False, False): AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Armure", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, True, False, False): ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Heaume", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, True, False, False): HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Anneau", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, True, False, False): AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Armure", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, True, False, False): ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Heaume", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, True, False, False): HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Anneau", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, True, False, False): AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Armure", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, True, False, False): ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Heaume", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, True, False, False): HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Anneau", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, True, False, False): AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Armure", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, True, False, False): ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Heaume", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, True, False, False): HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseur,
    ("Anneau", "", "", "", False, False, True, False): AnneauElementaire,
    ("Armure", "", "", "", False, False, True, False): ArmureElementaire,
    ("Heaume", "", "", "", False, False, True, False): HeaumeElementaire,
    ("Anneau", "Plafond", "", "", False, False, True, False): AnneauDefensifPlafondElementaire,
    ("Armure", "Plafond", "", "", False, False, True, False): ArmureDefensifPlafondElementaire,
    ("Heaume", "Plafond", "", "", False, False, True, False): HeaumeDefensifPlafondElementaire,
    ("Anneau", "Proportion", "", "", False, False, True, False): AnneauDefensifProportionElementaire,
    ("Armure", "Proportion", "", "", False, False, True, False): ArmureDefensifProportionElementaire,
    ("Heaume", "Proportion", "", "", False, False, True, False): HeaumeDefensifProportionElementaire,
    ("Anneau", "Seuil", "", "", False, False, True, False): AnneauDefensifSeuilElementaire,
    ("Armure", "Seuil", "", "", False, False, True, False): ArmureDefensifSeuilElementaire,
    ("Heaume", "Seuil", "", "", False, False, True, False): HeaumeDefensifSeuilElementaire,
    ("Anneau", "Valeur", "", "", False, False, True, False): AnneauDefensifValeurElementaire,
    ("Armure", "Valeur", "", "", False, False, True, False): ArmureDefensifValeurElementaire,
    ("Heaume", "Valeur", "", "", False, False, True, False): HeaumeDefensifValeurElementaire,
    ("Anneau", "", "PompeAPV", "", False, False, True, False): AnneauPompeAPVElementaire,
    ("Armure", "", "PompeAPV", "", False, False, True, False): ArmurePompeAPVElementaire,
    ("Heaume", "", "PompeAPV", "", False, False, True, False): HeaumePompeAPVElementaire,
    ("Anneau", "Plafond", "PompeAPV", "", False, False, True, False): AnneauDefensifPlafondPompeAPVElementaire,
    ("Armure", "Plafond", "PompeAPV", "", False, False, True, False): ArmureDefensifPlafondPompeAPVElementaire,
    ("Heaume", "Plafond", "PompeAPV", "", False, False, True, False): HeaumeDefensifPlafondPompeAPVElementaire,
    ("Anneau", "Proportion", "PompeAPV", "", False, False, True, False): AnneauDefensifProportionPompeAPVElementaire,
    ("Armure", "Proportion", "PompeAPV", "", False, False, True, False): ArmureDefensifProportionPompeAPVElementaire,
    ("Heaume", "Proportion", "PompeAPV", "", False, False, True, False): HeaumeDefensifProportionPompeAPVElementaire,
    ("Anneau", "Seuil", "PompeAPV", "", False, False, True, False): AnneauDefensifSeuilPompeAPVElementaire,
    ("Armure", "Seuil", "PompeAPV", "", False, False, True, False): ArmureDefensifSeuilPompeAPVElementaire,
    ("Heaume", "Seuil", "PompeAPV", "", False, False, True, False): HeaumeDefensifSeuilPompeAPVElementaire,
    ("Anneau", "Valeur", "PompeAPV", "", False, False, True, False): AnneauDefensifValeurPompeAPVElementaire,
    ("Armure", "Valeur", "PompeAPV", "", False, False, True, False): ArmureDefensifValeurPompeAPVElementaire,
    ("Heaume", "Valeur", "PompeAPV", "", False, False, True, False): HeaumeDefensifValeurPompeAPVElementaire,
    ("Anneau", "", "RenforceRegenPV", "", False, False, True, False): AnneauRenforceRegenPVElementaire,
    ("Armure", "", "RenforceRegenPV", "", False, False, True, False): ArmureRenforceRegenPVElementaire,
    ("Heaume", "", "RenforceRegenPV", "", False, False, True, False): HeaumeRenforceRegenPVElementaire,
    ("Anneau", "Plafond", "RenforceRegenPV", "", False, False, True, False): AnneauDefensifPlafondRenforceRegenPVElementaire,
    ("Armure", "Plafond", "RenforceRegenPV", "", False, False, True, False): ArmureDefensifPlafondRenforceRegenPVElementaire,
    ("Heaume", "Plafond", "RenforceRegenPV", "", False, False, True, False): HeaumeDefensifPlafondRenforceRegenPVElementaire,
    ("Anneau", "Proportion", "RenforceRegenPV", "", False, False, True, False): AnneauDefensifProportionRenforceRegenPVElementaire,
    ("Armure", "Proportion", "RenforceRegenPV", "", False, False, True, False): ArmureDefensifProportionRenforceRegenPVElementaire,
    ("Heaume", "Proportion", "RenforceRegenPV", "", False, False, True, False): HeaumeDefensifProportionRenforceRegenPVElementaire,
    ("Anneau", "Seuil", "RenforceRegenPV", "", False, False, True, False): AnneauDefensifSeuilRenforceRegenPVElementaire,
    ("Armure", "Seuil", "RenforceRegenPV", "", False, False, True, False): ArmureDefensifSeuilRenforceRegenPVElementaire,
    ("Heaume", "Seuil", "RenforceRegenPV", "", False, False, True, False): HeaumeDefensifSeuilRenforceRegenPVElementaire,
    ("Anneau", "Valeur", "RenforceRegenPV", "", False, False, True, False): AnneauDefensifValeurRenforceRegenPVElementaire,
    ("Armure", "Valeur", "RenforceRegenPV", "", False, False, True, False): ArmureDefensifValeurRenforceRegenPVElementaire,
    ("Heaume", "Valeur", "RenforceRegenPV", "", False, False, True, False): HeaumeDefensifValeurRenforceRegenPVElementaire,
    ("Anneau", "", "", "PompeAPM", False, False, True, False): AnneauPompeAPMElementaire,
    ("Armure", "", "", "PompeAPM", False, False, True, False): ArmurePompeAPMElementaire,
    ("Heaume", "", "", "PompeAPM", False, False, True, False): HeaumePompeAPMElementaire,
    ("Anneau", "Plafond", "", "PompeAPM", False, False, True, False): AnneauDefensifPlafondPompeAPMElementaire,
    ("Armure", "Plafond", "", "PompeAPM", False, False, True, False): ArmureDefensifPlafondPompeAPMElementaire,
    ("Heaume", "Plafond", "", "PompeAPM", False, False, True, False): HeaumeDefensifPlafondPompeAPMElementaire,
    ("Anneau", "Proportion", "", "PompeAPM", False, False, True, False): AnneauDefensifProportionPompeAPMElementaire,
    ("Armure", "Proportion", "", "PompeAPM", False, False, True, False): ArmureDefensifProportionPompeAPMElementaire,
    ("Heaume", "Proportion", "", "PompeAPM", False, False, True, False): HeaumeDefensifProportionPompeAPMElementaire,
    ("Anneau", "Seuil", "", "PompeAPM", False, False, True, False): AnneauDefensifSeuilPompeAPMElementaire,
    ("Armure", "Seuil", "", "PompeAPM", False, False, True, False): ArmureDefensifSeuilPompeAPMElementaire,
    ("Heaume", "Seuil", "", "PompeAPM", False, False, True, False): HeaumeDefensifSeuilPompeAPMElementaire,
    ("Anneau", "Valeur", "", "PompeAPM", False, False, True, False): AnneauDefensifValeurPompeAPMElementaire,
    ("Armure", "Valeur", "", "PompeAPM", False, False, True, False): ArmureDefensifValeurPompeAPMElementaire,
    ("Heaume", "Valeur", "", "PompeAPM", False, False, True, False): HeaumeDefensifValeurPompeAPMElementaire,
    ("Anneau", "", "PompeAPV", "PompeAPM", False, False, True, False): AnneauPompeAPVPompeAPMElementaire,
    ("Armure", "", "PompeAPV", "PompeAPM", False, False, True, False): ArmurePompeAPVPompeAPMElementaire,
    ("Heaume", "", "PompeAPV", "PompeAPM", False, False, True, False): HeaumePompeAPVPompeAPMElementaire,
    ("Anneau", "Plafond", "PompeAPV", "PompeAPM", False, False, True, False): AnneauDefensifPlafondPompeAPVPompeAPMElementaire,
    ("Armure", "Plafond", "PompeAPV", "PompeAPM", False, False, True, False): ArmureDefensifPlafondPompeAPVPompeAPMElementaire,
    ("Heaume", "Plafond", "PompeAPV", "PompeAPM", False, False, True, False): HeaumeDefensifPlafondPompeAPVPompeAPMElementaire,
    ("Anneau", "Proportion", "PompeAPV", "PompeAPM", False, False, True, False): AnneauDefensifProportionPompeAPVPompeAPMElementaire,
    ("Armure", "Proportion", "PompeAPV", "PompeAPM", False, False, True, False): ArmureDefensifProportionPompeAPVPompeAPMElementaire,
    ("Heaume", "Proportion", "PompeAPV", "PompeAPM", False, False, True, False): HeaumeDefensifProportionPompeAPVPompeAPMElementaire,
    ("Anneau", "Seuil", "PompeAPV", "PompeAPM", False, False, True, False): AnneauDefensifSeuilPompeAPVPompeAPMElementaire,
    ("Armure", "Seuil", "PompeAPV", "PompeAPM", False, False, True, False): ArmureDefensifSeuilPompeAPVPompeAPMElementaire,
    ("Heaume", "Seuil", "PompeAPV", "PompeAPM", False, False, True, False): HeaumeDefensifSeuilPompeAPVPompeAPMElementaire,
    ("Anneau", "Valeur", "PompeAPV", "PompeAPM", False, False, True, False): AnneauDefensifValeurPompeAPVPompeAPMElementaire,
    ("Armure", "Valeur", "PompeAPV", "PompeAPM", False, False, True, False): ArmureDefensifValeurPompeAPVPompeAPMElementaire,
    ("Heaume", "Valeur", "PompeAPV", "PompeAPM", False, False, True, False): HeaumeDefensifValeurPompeAPVPompeAPMElementaire,
    ("Anneau", "", "RenforceRegenPV", "PompeAPM", False, False, True, False): AnneauRenforceRegenPVPompeAPMElementaire,
    ("Armure", "", "RenforceRegenPV", "PompeAPM", False, False, True, False): ArmureRenforceRegenPVPompeAPMElementaire,
    ("Heaume", "", "RenforceRegenPV", "PompeAPM", False, False, True, False): HeaumeRenforceRegenPVPompeAPMElementaire,
    ("Anneau", "Plafond", "RenforceRegenPV", "PompeAPM", False, False, True, False): AnneauDefensifPlafondRenforceRegenPVPompeAPMElementaire,
    ("Armure", "Plafond", "RenforceRegenPV", "PompeAPM", False, False, True, False): ArmureDefensifPlafondRenforceRegenPVPompeAPMElementaire,
    ("Heaume", "Plafond", "RenforceRegenPV", "PompeAPM", False, False, True, False): HeaumeDefensifPlafondRenforceRegenPVPompeAPMElementaire,
    ("Anneau", "Proportion", "RenforceRegenPV", "PompeAPM", False, False, True, False): AnneauDefensifProportionRenforceRegenPVPompeAPMElementaire,
    ("Armure", "Proportion", "RenforceRegenPV", "PompeAPM", False, False, True, False): ArmureDefensifProportionRenforceRegenPVPompeAPMElementaire,
    ("Heaume", "Proportion", "RenforceRegenPV", "PompeAPM", False, False, True, False): HeaumeDefensifProportionRenforceRegenPVPompeAPMElementaire,
    ("Anneau", "Seuil", "RenforceRegenPV", "PompeAPM", False, False, True, False): AnneauDefensifSeuilRenforceRegenPVPompeAPMElementaire,
    ("Armure", "Seuil", "RenforceRegenPV", "PompeAPM", False, False, True, False): ArmureDefensifSeuilRenforceRegenPVPompeAPMElementaire,
    ("Heaume", "Seuil", "RenforceRegenPV", "PompeAPM", False, False, True, False): HeaumeDefensifSeuilRenforceRegenPVPompeAPMElementaire,
    ("Anneau", "Valeur", "RenforceRegenPV", "PompeAPM", False, False, True, False): AnneauDefensifValeurRenforceRegenPVPompeAPMElementaire,
    ("Armure", "Valeur", "RenforceRegenPV", "PompeAPM", False, False, True, False): ArmureDefensifValeurRenforceRegenPVPompeAPMElementaire,
    ("Heaume", "Valeur", "RenforceRegenPV", "PompeAPM", False, False, True, False): HeaumeDefensifValeurRenforceRegenPVPompeAPMElementaire,
    ("Anneau", "", "", "RenforceRegenPM", False, False, True, False): AnneauRenforceRegenPMElementaire,
    ("Armure", "", "", "RenforceRegenPM", False, False, True, False): ArmureRenforceRegenPMElementaire,
    ("Heaume", "", "", "RenforceRegenPM", False, False, True, False): HeaumeRenforceRegenPMElementaire,
    ("Anneau", "Plafond", "", "RenforceRegenPM", False, False, True, False): AnneauDefensifPlafondRenforceRegenPMElementaire,
    ("Armure", "Plafond", "", "RenforceRegenPM", False, False, True, False): ArmureDefensifPlafondRenforceRegenPMElementaire,
    ("Heaume", "Plafond", "", "RenforceRegenPM", False, False, True, False): HeaumeDefensifPlafondRenforceRegenPMElementaire,
    ("Anneau", "Proportion", "", "RenforceRegenPM", False, False, True, False): AnneauDefensifProportionRenforceRegenPMElementaire,
    ("Armure", "Proportion", "", "RenforceRegenPM", False, False, True, False): ArmureDefensifProportionRenforceRegenPMElementaire,
    ("Heaume", "Proportion", "", "RenforceRegenPM", False, False, True, False): HeaumeDefensifProportionRenforceRegenPMElementaire,
    ("Anneau", "Seuil", "", "RenforceRegenPM", False, False, True, False): AnneauDefensifSeuilRenforceRegenPMElementaire,
    ("Armure", "Seuil", "", "RenforceRegenPM", False, False, True, False): ArmureDefensifSeuilRenforceRegenPMElementaire,
    ("Heaume", "Seuil", "", "RenforceRegenPM", False, False, True, False): HeaumeDefensifSeuilRenforceRegenPMElementaire,
    ("Anneau", "Valeur", "", "RenforceRegenPM", False, False, True, False): AnneauDefensifValeurRenforceRegenPMElementaire,
    ("Armure", "Valeur", "", "RenforceRegenPM", False, False, True, False): ArmureDefensifValeurRenforceRegenPMElementaire,
    ("Heaume", "Valeur", "", "RenforceRegenPM", False, False, True, False): HeaumeDefensifValeurRenforceRegenPMElementaire,
    ("Anneau", "", "PompeAPV", "RenforceRegenPM", False, False, True, False): AnneauPompeAPVRenforceRegenPMElementaire,
    ("Armure", "", "PompeAPV", "RenforceRegenPM", False, False, True, False): ArmurePompeAPVRenforceRegenPMElementaire,
    ("Heaume", "", "PompeAPV", "RenforceRegenPM", False, False, True, False): HeaumePompeAPVRenforceRegenPMElementaire,
    ("Anneau", "Plafond", "PompeAPV", "RenforceRegenPM", False, False, True, False): AnneauDefensifPlafondPompeAPVRenforceRegenPMElementaire,
    ("Armure", "Plafond", "PompeAPV", "RenforceRegenPM", False, False, True, False): ArmureDefensifPlafondPompeAPVRenforceRegenPMElementaire,
    ("Heaume", "Plafond", "PompeAPV", "RenforceRegenPM", False, False, True, False): HeaumeDefensifPlafondPompeAPVRenforceRegenPMElementaire,
    ("Anneau", "Proportion", "PompeAPV", "RenforceRegenPM", False, False, True, False): AnneauDefensifProportionPompeAPVRenforceRegenPMElementaire,
    ("Armure", "Proportion", "PompeAPV", "RenforceRegenPM", False, False, True, False): ArmureDefensifProportionPompeAPVRenforceRegenPMElementaire,
    ("Heaume", "Proportion", "PompeAPV", "RenforceRegenPM", False, False, True, False): HeaumeDefensifProportionPompeAPVRenforceRegenPMElementaire,
    ("Anneau", "Seuil", "PompeAPV", "RenforceRegenPM", False, False, True, False): AnneauDefensifSeuilPompeAPVRenforceRegenPMElementaire,
    ("Armure", "Seuil", "PompeAPV", "RenforceRegenPM", False, False, True, False): ArmureDefensifSeuilPompeAPVRenforceRegenPMElementaire,
    ("Heaume", "Seuil", "PompeAPV", "RenforceRegenPM", False, False, True, False): HeaumeDefensifSeuilPompeAPVRenforceRegenPMElementaire,
    ("Anneau", "Valeur", "PompeAPV", "RenforceRegenPM", False, False, True, False): AnneauDefensifValeurPompeAPVRenforceRegenPMElementaire,
    ("Armure", "Valeur", "PompeAPV", "RenforceRegenPM", False, False, True, False): ArmureDefensifValeurPompeAPVRenforceRegenPMElementaire,
    ("Heaume", "Valeur", "PompeAPV", "RenforceRegenPM", False, False, True, False): HeaumeDefensifValeurPompeAPVRenforceRegenPMElementaire,
    ("Anneau", "", "RenforceRegenPV", "RenforceRegenPM", False, False, True, False): AnneauRenforceRegenPVRenforceRegenPMElementaire,
    ("Armure", "", "RenforceRegenPV", "RenforceRegenPM", False, False, True, False): ArmureRenforceRegenPVRenforceRegenPMElementaire,
    ("Heaume", "", "RenforceRegenPV", "RenforceRegenPM", False, False, True, False): HeaumeRenforceRegenPVRenforceRegenPMElementaire,
    ("Anneau", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, False, True, False): AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMElementaire,
    ("Armure", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, False, True, False): ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMElementaire,
    ("Heaume", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, False, True, False): HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMElementaire,
    ("Anneau", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, False, True, False): AnneauDefensifProportionRenforceRegenPVRenforceRegenPMElementaire,
    ("Armure", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, False, True, False): ArmureDefensifProportionRenforceRegenPVRenforceRegenPMElementaire,
    ("Heaume", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, False, True, False): HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMElementaire,
    ("Anneau", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, False, True, False): AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMElementaire,
    ("Armure", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, False, True, False): ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMElementaire,
    ("Heaume", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, False, True, False): HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMElementaire,
    ("Anneau", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, False, True, False): AnneauDefensifValeurRenforceRegenPVRenforceRegenPMElementaire,
    ("Armure", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, False, True, False): ArmureDefensifValeurRenforceRegenPVRenforceRegenPMElementaire,
    ("Heaume", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, False, True, False): HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMElementaire,
    ("Anneau", "", "", "", True, False, True, False): AnneauAccelerateurElementaire,
    ("Armure", "", "", "", True, False, True, False): ArmureAccelerateurElementaire,
    ("Heaume", "", "", "", True, False, True, False): HeaumeAccelerateurElementaire,
    ("Anneau", "Plafond", "", "", True, False, True, False): AnneauDefensifPlafondAccelerateurElementaire,
    ("Armure", "Plafond", "", "", True, False, True, False): ArmureDefensifPlafondAccelerateurElementaire,
    ("Heaume", "Plafond", "", "", True, False, True, False): HeaumeDefensifPlafondAccelerateurElementaire,
    ("Anneau", "Proportion", "", "", True, False, True, False): AnneauDefensifProportionAccelerateurElementaire,
    ("Armure", "Proportion", "", "", True, False, True, False): ArmureDefensifProportionAccelerateurElementaire,
    ("Heaume", "Proportion", "", "", True, False, True, False): HeaumeDefensifProportionAccelerateurElementaire,
    ("Anneau", "Seuil", "", "", True, False, True, False): AnneauDefensifSeuilAccelerateurElementaire,
    ("Armure", "Seuil", "", "", True, False, True, False): ArmureDefensifSeuilAccelerateurElementaire,
    ("Heaume", "Seuil", "", "", True, False, True, False): HeaumeDefensifSeuilAccelerateurElementaire,
    ("Anneau", "Valeur", "", "", True, False, True, False): AnneauDefensifValeurAccelerateurElementaire,
    ("Armure", "Valeur", "", "", True, False, True, False): ArmureDefensifValeurAccelerateurElementaire,
    ("Heaume", "Valeur", "", "", True, False, True, False): HeaumeDefensifValeurAccelerateurElementaire,
    ("Anneau", "", "PompeAPV", "", True, False, True, False): AnneauPompeAPVAccelerateurElementaire,
    ("Armure", "", "PompeAPV", "", True, False, True, False): ArmurePompeAPVAccelerateurElementaire,
    ("Heaume", "", "PompeAPV", "", True, False, True, False): HeaumePompeAPVAccelerateurElementaire,
    ("Anneau", "Plafond", "PompeAPV", "", True, False, True, False): AnneauDefensifPlafondPompeAPVAccelerateurElementaire,
    ("Armure", "Plafond", "PompeAPV", "", True, False, True, False): ArmureDefensifPlafondPompeAPVAccelerateurElementaire,
    ("Heaume", "Plafond", "PompeAPV", "", True, False, True, False): HeaumeDefensifPlafondPompeAPVAccelerateurElementaire,
    ("Anneau", "Proportion", "PompeAPV", "", True, False, True, False): AnneauDefensifProportionPompeAPVAccelerateurElementaire,
    ("Armure", "Proportion", "PompeAPV", "", True, False, True, False): ArmureDefensifProportionPompeAPVAccelerateurElementaire,
    ("Heaume", "Proportion", "PompeAPV", "", True, False, True, False): HeaumeDefensifProportionPompeAPVAccelerateurElementaire,
    ("Anneau", "Seuil", "PompeAPV", "", True, False, True, False): AnneauDefensifSeuilPompeAPVAccelerateurElementaire,
    ("Armure", "Seuil", "PompeAPV", "", True, False, True, False): ArmureDefensifSeuilPompeAPVAccelerateurElementaire,
    ("Heaume", "Seuil", "PompeAPV", "", True, False, True, False): HeaumeDefensifSeuilPompeAPVAccelerateurElementaire,
    ("Anneau", "Valeur", "PompeAPV", "", True, False, True, False): AnneauDefensifValeurPompeAPVAccelerateurElementaire,
    ("Armure", "Valeur", "PompeAPV", "", True, False, True, False): ArmureDefensifValeurPompeAPVAccelerateurElementaire,
    ("Heaume", "Valeur", "PompeAPV", "", True, False, True, False): HeaumeDefensifValeurPompeAPVAccelerateurElementaire,
    ("Anneau", "", "RenforceRegenPV", "", True, False, True, False): AnneauRenforceRegenPVAccelerateurElementaire,
    ("Armure", "", "RenforceRegenPV", "", True, False, True, False): ArmureRenforceRegenPVAccelerateurElementaire,
    ("Heaume", "", "RenforceRegenPV", "", True, False, True, False): HeaumeRenforceRegenPVAccelerateurElementaire,
    ("Anneau", "Plafond", "RenforceRegenPV", "", True, False, True, False): AnneauDefensifPlafondRenforceRegenPVAccelerateurElementaire,
    ("Armure", "Plafond", "RenforceRegenPV", "", True, False, True, False): ArmureDefensifPlafondRenforceRegenPVAccelerateurElementaire,
    ("Heaume", "Plafond", "RenforceRegenPV", "", True, False, True, False): HeaumeDefensifPlafondRenforceRegenPVAccelerateurElementaire,
    ("Anneau", "Proportion", "RenforceRegenPV", "", True, False, True, False): AnneauDefensifProportionRenforceRegenPVAccelerateurElementaire,
    ("Armure", "Proportion", "RenforceRegenPV", "", True, False, True, False): ArmureDefensifProportionRenforceRegenPVAccelerateurElementaire,
    ("Heaume", "Proportion", "RenforceRegenPV", "", True, False, True, False): HeaumeDefensifProportionRenforceRegenPVAccelerateurElementaire,
    ("Anneau", "Seuil", "RenforceRegenPV", "", True, False, True, False): AnneauDefensifSeuilRenforceRegenPVAccelerateurElementaire,
    ("Armure", "Seuil", "RenforceRegenPV", "", True, False, True, False): ArmureDefensifSeuilRenforceRegenPVAccelerateurElementaire,
    ("Heaume", "Seuil", "RenforceRegenPV", "", True, False, True, False): HeaumeDefensifSeuilRenforceRegenPVAccelerateurElementaire,
    ("Anneau", "Valeur", "RenforceRegenPV", "", True, False, True, False): AnneauDefensifValeurRenforceRegenPVAccelerateurElementaire,
    ("Armure", "Valeur", "RenforceRegenPV", "", True, False, True, False): ArmureDefensifValeurRenforceRegenPVAccelerateurElementaire,
    ("Heaume", "Valeur", "RenforceRegenPV", "", True, False, True, False): HeaumeDefensifValeurRenforceRegenPVAccelerateurElementaire,
    ("Anneau", "", "", "PompeAPM", True, False, True, False): AnneauPompeAPMAccelerateurElementaire,
    ("Armure", "", "", "PompeAPM", True, False, True, False): ArmurePompeAPMAccelerateurElementaire,
    ("Heaume", "", "", "PompeAPM", True, False, True, False): HeaumePompeAPMAccelerateurElementaire,
    ("Anneau", "Plafond", "", "PompeAPM", True, False, True, False): AnneauDefensifPlafondPompeAPMAccelerateurElementaire,
    ("Armure", "Plafond", "", "PompeAPM", True, False, True, False): ArmureDefensifPlafondPompeAPMAccelerateurElementaire,
    ("Heaume", "Plafond", "", "PompeAPM", True, False, True, False): HeaumeDefensifPlafondPompeAPMAccelerateurElementaire,
    ("Anneau", "Proportion", "", "PompeAPM", True, False, True, False): AnneauDefensifProportionPompeAPMAccelerateurElementaire,
    ("Armure", "Proportion", "", "PompeAPM", True, False, True, False): ArmureDefensifProportionPompeAPMAccelerateurElementaire,
    ("Heaume", "Proportion", "", "PompeAPM", True, False, True, False): HeaumeDefensifProportionPompeAPMAccelerateurElementaire,
    ("Anneau", "Seuil", "", "PompeAPM", True, False, True, False): AnneauDefensifSeuilPompeAPMAccelerateurElementaire,
    ("Armure", "Seuil", "", "PompeAPM", True, False, True, False): ArmureDefensifSeuilPompeAPMAccelerateurElementaire,
    ("Heaume", "Seuil", "", "PompeAPM", True, False, True, False): HeaumeDefensifSeuilPompeAPMAccelerateurElementaire,
    ("Anneau", "Valeur", "", "PompeAPM", True, False, True, False): AnneauDefensifValeurPompeAPMAccelerateurElementaire,
    ("Armure", "Valeur", "", "PompeAPM", True, False, True, False): ArmureDefensifValeurPompeAPMAccelerateurElementaire,
    ("Heaume", "Valeur", "", "PompeAPM", True, False, True, False): HeaumeDefensifValeurPompeAPMAccelerateurElementaire,
    ("Anneau", "", "PompeAPV", "PompeAPM", True, False, True, False): AnneauPompeAPVPompeAPMAccelerateurElementaire,
    ("Armure", "", "PompeAPV", "PompeAPM", True, False, True, False): ArmurePompeAPVPompeAPMAccelerateurElementaire,
    ("Heaume", "", "PompeAPV", "PompeAPM", True, False, True, False): HeaumePompeAPVPompeAPMAccelerateurElementaire,
    ("Anneau", "Plafond", "PompeAPV", "PompeAPM", True, False, True, False): AnneauDefensifPlafondPompeAPVPompeAPMAccelerateurElementaire,
    ("Armure", "Plafond", "PompeAPV", "PompeAPM", True, False, True, False): ArmureDefensifPlafondPompeAPVPompeAPMAccelerateurElementaire,
    ("Heaume", "Plafond", "PompeAPV", "PompeAPM", True, False, True, False): HeaumeDefensifPlafondPompeAPVPompeAPMAccelerateurElementaire,
    ("Anneau", "Proportion", "PompeAPV", "PompeAPM", True, False, True, False): AnneauDefensifProportionPompeAPVPompeAPMAccelerateurElementaire,
    ("Armure", "Proportion", "PompeAPV", "PompeAPM", True, False, True, False): ArmureDefensifProportionPompeAPVPompeAPMAccelerateurElementaire,
    ("Heaume", "Proportion", "PompeAPV", "PompeAPM", True, False, True, False): HeaumeDefensifProportionPompeAPVPompeAPMAccelerateurElementaire,
    ("Anneau", "Seuil", "PompeAPV", "PompeAPM", True, False, True, False): AnneauDefensifSeuilPompeAPVPompeAPMAccelerateurElementaire,
    ("Armure", "Seuil", "PompeAPV", "PompeAPM", True, False, True, False): ArmureDefensifSeuilPompeAPVPompeAPMAccelerateurElementaire,
    ("Heaume", "Seuil", "PompeAPV", "PompeAPM", True, False, True, False): HeaumeDefensifSeuilPompeAPVPompeAPMAccelerateurElementaire,
    ("Anneau", "Valeur", "PompeAPV", "PompeAPM", True, False, True, False): AnneauDefensifValeurPompeAPVPompeAPMAccelerateurElementaire,
    ("Armure", "Valeur", "PompeAPV", "PompeAPM", True, False, True, False): ArmureDefensifValeurPompeAPVPompeAPMAccelerateurElementaire,
    ("Heaume", "Valeur", "PompeAPV", "PompeAPM", True, False, True, False): HeaumeDefensifValeurPompeAPVPompeAPMAccelerateurElementaire,
    ("Anneau", "", "RenforceRegenPV", "PompeAPM", True, False, True, False): AnneauRenforceRegenPVPompeAPMAccelerateurElementaire,
    ("Armure", "", "RenforceRegenPV", "PompeAPM", True, False, True, False): ArmureRenforceRegenPVPompeAPMAccelerateurElementaire,
    ("Heaume", "", "RenforceRegenPV", "PompeAPM", True, False, True, False): HeaumeRenforceRegenPVPompeAPMAccelerateurElementaire,
    ("Anneau", "Plafond", "RenforceRegenPV", "PompeAPM", True, False, True, False): AnneauDefensifPlafondRenforceRegenPVPompeAPMAccelerateurElementaire,
    ("Armure", "Plafond", "RenforceRegenPV", "PompeAPM", True, False, True, False): ArmureDefensifPlafondRenforceRegenPVPompeAPMAccelerateurElementaire,
    ("Heaume", "Plafond", "RenforceRegenPV", "PompeAPM", True, False, True, False): HeaumeDefensifPlafondRenforceRegenPVPompeAPMAccelerateurElementaire,
    ("Anneau", "Proportion", "RenforceRegenPV", "PompeAPM", True, False, True, False): AnneauDefensifProportionRenforceRegenPVPompeAPMAccelerateurElementaire,
    ("Armure", "Proportion", "RenforceRegenPV", "PompeAPM", True, False, True, False): ArmureDefensifProportionRenforceRegenPVPompeAPMAccelerateurElementaire,
    ("Heaume", "Proportion", "RenforceRegenPV", "PompeAPM", True, False, True, False): HeaumeDefensifProportionRenforceRegenPVPompeAPMAccelerateurElementaire,
    ("Anneau", "Seuil", "RenforceRegenPV", "PompeAPM", True, False, True, False): AnneauDefensifSeuilRenforceRegenPVPompeAPMAccelerateurElementaire,
    ("Armure", "Seuil", "RenforceRegenPV", "PompeAPM", True, False, True, False): ArmureDefensifSeuilRenforceRegenPVPompeAPMAccelerateurElementaire,
    ("Heaume", "Seuil", "RenforceRegenPV", "PompeAPM", True, False, True, False): HeaumeDefensifSeuilRenforceRegenPVPompeAPMAccelerateurElementaire,
    ("Anneau", "Valeur", "RenforceRegenPV", "PompeAPM", True, False, True, False): AnneauDefensifValeurRenforceRegenPVPompeAPMAccelerateurElementaire,
    ("Armure", "Valeur", "RenforceRegenPV", "PompeAPM", True, False, True, False): ArmureDefensifValeurRenforceRegenPVPompeAPMAccelerateurElementaire,
    ("Heaume", "Valeur", "RenforceRegenPV", "PompeAPM", True, False, True, False): HeaumeDefensifValeurRenforceRegenPVPompeAPMAccelerateurElementaire,
    ("Anneau", "", "", "RenforceRegenPM", True, False, True, False): AnneauRenforceRegenPMAccelerateurElementaire,
    ("Armure", "", "", "RenforceRegenPM", True, False, True, False): ArmureRenforceRegenPMAccelerateurElementaire,
    ("Heaume", "", "", "RenforceRegenPM", True, False, True, False): HeaumeRenforceRegenPMAccelerateurElementaire,
    ("Anneau", "Plafond", "", "RenforceRegenPM", True, False, True, False): AnneauDefensifPlafondRenforceRegenPMAccelerateurElementaire,
    ("Armure", "Plafond", "", "RenforceRegenPM", True, False, True, False): ArmureDefensifPlafondRenforceRegenPMAccelerateurElementaire,
    ("Heaume", "Plafond", "", "RenforceRegenPM", True, False, True, False): HeaumeDefensifPlafondRenforceRegenPMAccelerateurElementaire,
    ("Anneau", "Proportion", "", "RenforceRegenPM", True, False, True, False): AnneauDefensifProportionRenforceRegenPMAccelerateurElementaire,
    ("Armure", "Proportion", "", "RenforceRegenPM", True, False, True, False): ArmureDefensifProportionRenforceRegenPMAccelerateurElementaire,
    ("Heaume", "Proportion", "", "RenforceRegenPM", True, False, True, False): HeaumeDefensifProportionRenforceRegenPMAccelerateurElementaire,
    ("Anneau", "Seuil", "", "RenforceRegenPM", True, False, True, False): AnneauDefensifSeuilRenforceRegenPMAccelerateurElementaire,
    ("Armure", "Seuil", "", "RenforceRegenPM", True, False, True, False): ArmureDefensifSeuilRenforceRegenPMAccelerateurElementaire,
    ("Heaume", "Seuil", "", "RenforceRegenPM", True, False, True, False): HeaumeDefensifSeuilRenforceRegenPMAccelerateurElementaire,
    ("Anneau", "Valeur", "", "RenforceRegenPM", True, False, True, False): AnneauDefensifValeurRenforceRegenPMAccelerateurElementaire,
    ("Armure", "Valeur", "", "RenforceRegenPM", True, False, True, False): ArmureDefensifValeurRenforceRegenPMAccelerateurElementaire,
    ("Heaume", "Valeur", "", "RenforceRegenPM", True, False, True, False): HeaumeDefensifValeurRenforceRegenPMAccelerateurElementaire,
    ("Anneau", "", "PompeAPV", "RenforceRegenPM", True, False, True, False): AnneauPompeAPVRenforceRegenPMAccelerateurElementaire,
    ("Armure", "", "PompeAPV", "RenforceRegenPM", True, False, True, False): ArmurePompeAPVRenforceRegenPMAccelerateurElementaire,
    ("Heaume", "", "PompeAPV", "RenforceRegenPM", True, False, True, False): HeaumePompeAPVRenforceRegenPMAccelerateurElementaire,
    ("Anneau", "Plafond", "PompeAPV", "RenforceRegenPM", True, False, True, False): AnneauDefensifPlafondPompeAPVRenforceRegenPMAccelerateurElementaire,
    ("Armure", "Plafond", "PompeAPV", "RenforceRegenPM", True, False, True, False): ArmureDefensifPlafondPompeAPVRenforceRegenPMAccelerateurElementaire,
    ("Heaume", "Plafond", "PompeAPV", "RenforceRegenPM", True, False, True, False): HeaumeDefensifPlafondPompeAPVRenforceRegenPMAccelerateurElementaire,
    ("Anneau", "Proportion", "PompeAPV", "RenforceRegenPM", True, False, True, False): AnneauDefensifProportionPompeAPVRenforceRegenPMAccelerateurElementaire,
    ("Armure", "Proportion", "PompeAPV", "RenforceRegenPM", True, False, True, False): ArmureDefensifProportionPompeAPVRenforceRegenPMAccelerateurElementaire,
    ("Heaume", "Proportion", "PompeAPV", "RenforceRegenPM", True, False, True, False): HeaumeDefensifProportionPompeAPVRenforceRegenPMAccelerateurElementaire,
    ("Anneau", "Seuil", "PompeAPV", "RenforceRegenPM", True, False, True, False): AnneauDefensifSeuilPompeAPVRenforceRegenPMAccelerateurElementaire,
    ("Armure", "Seuil", "PompeAPV", "RenforceRegenPM", True, False, True, False): ArmureDefensifSeuilPompeAPVRenforceRegenPMAccelerateurElementaire,
    ("Heaume", "Seuil", "PompeAPV", "RenforceRegenPM", True, False, True, False): HeaumeDefensifSeuilPompeAPVRenforceRegenPMAccelerateurElementaire,
    ("Anneau", "Valeur", "PompeAPV", "RenforceRegenPM", True, False, True, False): AnneauDefensifValeurPompeAPVRenforceRegenPMAccelerateurElementaire,
    ("Armure", "Valeur", "PompeAPV", "RenforceRegenPM", True, False, True, False): ArmureDefensifValeurPompeAPVRenforceRegenPMAccelerateurElementaire,
    ("Heaume", "Valeur", "PompeAPV", "RenforceRegenPM", True, False, True, False): HeaumeDefensifValeurPompeAPVRenforceRegenPMAccelerateurElementaire,
    ("Anneau", "", "RenforceRegenPV", "RenforceRegenPM", True, False, True, False): AnneauRenforceRegenPVRenforceRegenPMAccelerateurElementaire,
    ("Armure", "", "RenforceRegenPV", "RenforceRegenPM", True, False, True, False): ArmureRenforceRegenPVRenforceRegenPMAccelerateurElementaire,
    ("Heaume", "", "RenforceRegenPV", "RenforceRegenPM", True, False, True, False): HeaumeRenforceRegenPVRenforceRegenPMAccelerateurElementaire,
    ("Anneau", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, False, True, False): AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurElementaire,
    ("Armure", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, False, True, False): ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurElementaire,
    ("Heaume", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, False, True, False): HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurElementaire,
    ("Anneau", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, False, True, False): AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurElementaire,
    ("Armure", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, False, True, False): ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurElementaire,
    ("Heaume", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, False, True, False): HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurElementaire,
    ("Anneau", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, False, True, False): AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurElementaire,
    ("Armure", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, False, True, False): ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurElementaire,
    ("Heaume", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, False, True, False): HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurElementaire,
    ("Anneau", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, False, True, False): AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurElementaire,
    ("Armure", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, False, True, False): ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurElementaire,
    ("Heaume", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, False, True, False): HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurElementaire,
    ("Anneau", "", "", "", False, True, True, False): AnneauAnoblisseurElementaire,
    ("Armure", "", "", "", False, True, True, False): ArmureAnoblisseurElementaire,
    ("Heaume", "", "", "", False, True, True, False): HeaumeAnoblisseurElementaire,
    ("Anneau", "Plafond", "", "", False, True, True, False): AnneauDefensifPlafondAnoblisseurElementaire,
    ("Armure", "Plafond", "", "", False, True, True, False): ArmureDefensifPlafondAnoblisseurElementaire,
    ("Heaume", "Plafond", "", "", False, True, True, False): HeaumeDefensifPlafondAnoblisseurElementaire,
    ("Anneau", "Proportion", "", "", False, True, True, False): AnneauDefensifProportionAnoblisseurElementaire,
    ("Armure", "Proportion", "", "", False, True, True, False): ArmureDefensifProportionAnoblisseurElementaire,
    ("Heaume", "Proportion", "", "", False, True, True, False): HeaumeDefensifProportionAnoblisseurElementaire,
    ("Anneau", "Seuil", "", "", False, True, True, False): AnneauDefensifSeuilAnoblisseurElementaire,
    ("Armure", "Seuil", "", "", False, True, True, False): ArmureDefensifSeuilAnoblisseurElementaire,
    ("Heaume", "Seuil", "", "", False, True, True, False): HeaumeDefensifSeuilAnoblisseurElementaire,
    ("Anneau", "Valeur", "", "", False, True, True, False): AnneauDefensifValeurAnoblisseurElementaire,
    ("Armure", "Valeur", "", "", False, True, True, False): ArmureDefensifValeurAnoblisseurElementaire,
    ("Heaume", "Valeur", "", "", False, True, True, False): HeaumeDefensifValeurAnoblisseurElementaire,
    ("Anneau", "", "PompeAPV", "", False, True, True, False): AnneauPompeAPVAnoblisseurElementaire,
    ("Armure", "", "PompeAPV", "", False, True, True, False): ArmurePompeAPVAnoblisseurElementaire,
    ("Heaume", "", "PompeAPV", "", False, True, True, False): HeaumePompeAPVAnoblisseurElementaire,
    ("Anneau", "Plafond", "PompeAPV", "", False, True, True, False): AnneauDefensifPlafondPompeAPVAnoblisseurElementaire,
    ("Armure", "Plafond", "PompeAPV", "", False, True, True, False): ArmureDefensifPlafondPompeAPVAnoblisseurElementaire,
    ("Heaume", "Plafond", "PompeAPV", "", False, True, True, False): HeaumeDefensifPlafondPompeAPVAnoblisseurElementaire,
    ("Anneau", "Proportion", "PompeAPV", "", False, True, True, False): AnneauDefensifProportionPompeAPVAnoblisseurElementaire,
    ("Armure", "Proportion", "PompeAPV", "", False, True, True, False): ArmureDefensifProportionPompeAPVAnoblisseurElementaire,
    ("Heaume", "Proportion", "PompeAPV", "", False, True, True, False): HeaumeDefensifProportionPompeAPVAnoblisseurElementaire,
    ("Anneau", "Seuil", "PompeAPV", "", False, True, True, False): AnneauDefensifSeuilPompeAPVAnoblisseurElementaire,
    ("Armure", "Seuil", "PompeAPV", "", False, True, True, False): ArmureDefensifSeuilPompeAPVAnoblisseurElementaire,
    ("Heaume", "Seuil", "PompeAPV", "", False, True, True, False): HeaumeDefensifSeuilPompeAPVAnoblisseurElementaire,
    ("Anneau", "Valeur", "PompeAPV", "", False, True, True, False): AnneauDefensifValeurPompeAPVAnoblisseurElementaire,
    ("Armure", "Valeur", "PompeAPV", "", False, True, True, False): ArmureDefensifValeurPompeAPVAnoblisseurElementaire,
    ("Heaume", "Valeur", "PompeAPV", "", False, True, True, False): HeaumeDefensifValeurPompeAPVAnoblisseurElementaire,
    ("Anneau", "", "RenforceRegenPV", "", False, True, True, False): AnneauRenforceRegenPVAnoblisseurElementaire,
    ("Armure", "", "RenforceRegenPV", "", False, True, True, False): ArmureRenforceRegenPVAnoblisseurElementaire,
    ("Heaume", "", "RenforceRegenPV", "", False, True, True, False): HeaumeRenforceRegenPVAnoblisseurElementaire,
    ("Anneau", "Plafond", "RenforceRegenPV", "", False, True, True, False): AnneauDefensifPlafondRenforceRegenPVAnoblisseurElementaire,
    ("Armure", "Plafond", "RenforceRegenPV", "", False, True, True, False): ArmureDefensifPlafondRenforceRegenPVAnoblisseurElementaire,
    ("Heaume", "Plafond", "RenforceRegenPV", "", False, True, True, False): HeaumeDefensifPlafondRenforceRegenPVAnoblisseurElementaire,
    ("Anneau", "Proportion", "RenforceRegenPV", "", False, True, True, False): AnneauDefensifProportionRenforceRegenPVAnoblisseurElementaire,
    ("Armure", "Proportion", "RenforceRegenPV", "", False, True, True, False): ArmureDefensifProportionRenforceRegenPVAnoblisseurElementaire,
    ("Heaume", "Proportion", "RenforceRegenPV", "", False, True, True, False): HeaumeDefensifProportionRenforceRegenPVAnoblisseurElementaire,
    ("Anneau", "Seuil", "RenforceRegenPV", "", False, True, True, False): AnneauDefensifSeuilRenforceRegenPVAnoblisseurElementaire,
    ("Armure", "Seuil", "RenforceRegenPV", "", False, True, True, False): ArmureDefensifSeuilRenforceRegenPVAnoblisseurElementaire,
    ("Heaume", "Seuil", "RenforceRegenPV", "", False, True, True, False): HeaumeDefensifSeuilRenforceRegenPVAnoblisseurElementaire,
    ("Anneau", "Valeur", "RenforceRegenPV", "", False, True, True, False): AnneauDefensifValeurRenforceRegenPVAnoblisseurElementaire,
    ("Armure", "Valeur", "RenforceRegenPV", "", False, True, True, False): ArmureDefensifValeurRenforceRegenPVAnoblisseurElementaire,
    ("Heaume", "Valeur", "RenforceRegenPV", "", False, True, True, False): HeaumeDefensifValeurRenforceRegenPVAnoblisseurElementaire,
    ("Anneau", "", "", "PompeAPM", False, True, True, False): AnneauPompeAPMAnoblisseurElementaire,
    ("Armure", "", "", "PompeAPM", False, True, True, False): ArmurePompeAPMAnoblisseurElementaire,
    ("Heaume", "", "", "PompeAPM", False, True, True, False): HeaumePompeAPMAnoblisseurElementaire,
    ("Anneau", "Plafond", "", "PompeAPM", False, True, True, False): AnneauDefensifPlafondPompeAPMAnoblisseurElementaire,
    ("Armure", "Plafond", "", "PompeAPM", False, True, True, False): ArmureDefensifPlafondPompeAPMAnoblisseurElementaire,
    ("Heaume", "Plafond", "", "PompeAPM", False, True, True, False): HeaumeDefensifPlafondPompeAPMAnoblisseurElementaire,
    ("Anneau", "Proportion", "", "PompeAPM", False, True, True, False): AnneauDefensifProportionPompeAPMAnoblisseurElementaire,
    ("Armure", "Proportion", "", "PompeAPM", False, True, True, False): ArmureDefensifProportionPompeAPMAnoblisseurElementaire,
    ("Heaume", "Proportion", "", "PompeAPM", False, True, True, False): HeaumeDefensifProportionPompeAPMAnoblisseurElementaire,
    ("Anneau", "Seuil", "", "PompeAPM", False, True, True, False): AnneauDefensifSeuilPompeAPMAnoblisseurElementaire,
    ("Armure", "Seuil", "", "PompeAPM", False, True, True, False): ArmureDefensifSeuilPompeAPMAnoblisseurElementaire,
    ("Heaume", "Seuil", "", "PompeAPM", False, True, True, False): HeaumeDefensifSeuilPompeAPMAnoblisseurElementaire,
    ("Anneau", "Valeur", "", "PompeAPM", False, True, True, False): AnneauDefensifValeurPompeAPMAnoblisseurElementaire,
    ("Armure", "Valeur", "", "PompeAPM", False, True, True, False): ArmureDefensifValeurPompeAPMAnoblisseurElementaire,
    ("Heaume", "Valeur", "", "PompeAPM", False, True, True, False): HeaumeDefensifValeurPompeAPMAnoblisseurElementaire,
    ("Anneau", "", "PompeAPV", "PompeAPM", False, True, True, False): AnneauPompeAPVPompeAPMAnoblisseurElementaire,
    ("Armure", "", "PompeAPV", "PompeAPM", False, True, True, False): ArmurePompeAPVPompeAPMAnoblisseurElementaire,
    ("Heaume", "", "PompeAPV", "PompeAPM", False, True, True, False): HeaumePompeAPVPompeAPMAnoblisseurElementaire,
    ("Anneau", "Plafond", "PompeAPV", "PompeAPM", False, True, True, False): AnneauDefensifPlafondPompeAPVPompeAPMAnoblisseurElementaire,
    ("Armure", "Plafond", "PompeAPV", "PompeAPM", False, True, True, False): ArmureDefensifPlafondPompeAPVPompeAPMAnoblisseurElementaire,
    ("Heaume", "Plafond", "PompeAPV", "PompeAPM", False, True, True, False): HeaumeDefensifPlafondPompeAPVPompeAPMAnoblisseurElementaire,
    ("Anneau", "Proportion", "PompeAPV", "PompeAPM", False, True, True, False): AnneauDefensifProportionPompeAPVPompeAPMAnoblisseurElementaire,
    ("Armure", "Proportion", "PompeAPV", "PompeAPM", False, True, True, False): ArmureDefensifProportionPompeAPVPompeAPMAnoblisseurElementaire,
    ("Heaume", "Proportion", "PompeAPV", "PompeAPM", False, True, True, False): HeaumeDefensifProportionPompeAPVPompeAPMAnoblisseurElementaire,
    ("Anneau", "Seuil", "PompeAPV", "PompeAPM", False, True, True, False): AnneauDefensifSeuilPompeAPVPompeAPMAnoblisseurElementaire,
    ("Armure", "Seuil", "PompeAPV", "PompeAPM", False, True, True, False): ArmureDefensifSeuilPompeAPVPompeAPMAnoblisseurElementaire,
    ("Heaume", "Seuil", "PompeAPV", "PompeAPM", False, True, True, False): HeaumeDefensifSeuilPompeAPVPompeAPMAnoblisseurElementaire,
    ("Anneau", "Valeur", "PompeAPV", "PompeAPM", False, True, True, False): AnneauDefensifValeurPompeAPVPompeAPMAnoblisseurElementaire,
    ("Armure", "Valeur", "PompeAPV", "PompeAPM", False, True, True, False): ArmureDefensifValeurPompeAPVPompeAPMAnoblisseurElementaire,
    ("Heaume", "Valeur", "PompeAPV", "PompeAPM", False, True, True, False): HeaumeDefensifValeurPompeAPVPompeAPMAnoblisseurElementaire,
    ("Anneau", "", "RenforceRegenPV", "PompeAPM", False, True, True, False): AnneauRenforceRegenPVPompeAPMAnoblisseurElementaire,
    ("Armure", "", "RenforceRegenPV", "PompeAPM", False, True, True, False): ArmureRenforceRegenPVPompeAPMAnoblisseurElementaire,
    ("Heaume", "", "RenforceRegenPV", "PompeAPM", False, True, True, False): HeaumeRenforceRegenPVPompeAPMAnoblisseurElementaire,
    ("Anneau", "Plafond", "RenforceRegenPV", "PompeAPM", False, True, True, False): AnneauDefensifPlafondRenforceRegenPVPompeAPMAnoblisseurElementaire,
    ("Armure", "Plafond", "RenforceRegenPV", "PompeAPM", False, True, True, False): ArmureDefensifPlafondRenforceRegenPVPompeAPMAnoblisseurElementaire,
    ("Heaume", "Plafond", "RenforceRegenPV", "PompeAPM", False, True, True, False): HeaumeDefensifPlafondRenforceRegenPVPompeAPMAnoblisseurElementaire,
    ("Anneau", "Proportion", "RenforceRegenPV", "PompeAPM", False, True, True, False): AnneauDefensifProportionRenforceRegenPVPompeAPMAnoblisseurElementaire,
    ("Armure", "Proportion", "RenforceRegenPV", "PompeAPM", False, True, True, False): ArmureDefensifProportionRenforceRegenPVPompeAPMAnoblisseurElementaire,
    ("Heaume", "Proportion", "RenforceRegenPV", "PompeAPM", False, True, True, False): HeaumeDefensifProportionRenforceRegenPVPompeAPMAnoblisseurElementaire,
    ("Anneau", "Seuil", "RenforceRegenPV", "PompeAPM", False, True, True, False): AnneauDefensifSeuilRenforceRegenPVPompeAPMAnoblisseurElementaire,
    ("Armure", "Seuil", "RenforceRegenPV", "PompeAPM", False, True, True, False): ArmureDefensifSeuilRenforceRegenPVPompeAPMAnoblisseurElementaire,
    ("Heaume", "Seuil", "RenforceRegenPV", "PompeAPM", False, True, True, False): HeaumeDefensifSeuilRenforceRegenPVPompeAPMAnoblisseurElementaire,
    ("Anneau", "Valeur", "RenforceRegenPV", "PompeAPM", False, True, True, False): AnneauDefensifValeurRenforceRegenPVPompeAPMAnoblisseurElementaire,
    ("Armure", "Valeur", "RenforceRegenPV", "PompeAPM", False, True, True, False): ArmureDefensifValeurRenforceRegenPVPompeAPMAnoblisseurElementaire,
    ("Heaume", "Valeur", "RenforceRegenPV", "PompeAPM", False, True, True, False): HeaumeDefensifValeurRenforceRegenPVPompeAPMAnoblisseurElementaire,
    ("Anneau", "", "", "RenforceRegenPM", False, True, True, False): AnneauRenforceRegenPMAnoblisseurElementaire,
    ("Armure", "", "", "RenforceRegenPM", False, True, True, False): ArmureRenforceRegenPMAnoblisseurElementaire,
    ("Heaume", "", "", "RenforceRegenPM", False, True, True, False): HeaumeRenforceRegenPMAnoblisseurElementaire,
    ("Anneau", "Plafond", "", "RenforceRegenPM", False, True, True, False): AnneauDefensifPlafondRenforceRegenPMAnoblisseurElementaire,
    ("Armure", "Plafond", "", "RenforceRegenPM", False, True, True, False): ArmureDefensifPlafondRenforceRegenPMAnoblisseurElementaire,
    ("Heaume", "Plafond", "", "RenforceRegenPM", False, True, True, False): HeaumeDefensifPlafondRenforceRegenPMAnoblisseurElementaire,
    ("Anneau", "Proportion", "", "RenforceRegenPM", False, True, True, False): AnneauDefensifProportionRenforceRegenPMAnoblisseurElementaire,
    ("Armure", "Proportion", "", "RenforceRegenPM", False, True, True, False): ArmureDefensifProportionRenforceRegenPMAnoblisseurElementaire,
    ("Heaume", "Proportion", "", "RenforceRegenPM", False, True, True, False): HeaumeDefensifProportionRenforceRegenPMAnoblisseurElementaire,
    ("Anneau", "Seuil", "", "RenforceRegenPM", False, True, True, False): AnneauDefensifSeuilRenforceRegenPMAnoblisseurElementaire,
    ("Armure", "Seuil", "", "RenforceRegenPM", False, True, True, False): ArmureDefensifSeuilRenforceRegenPMAnoblisseurElementaire,
    ("Heaume", "Seuil", "", "RenforceRegenPM", False, True, True, False): HeaumeDefensifSeuilRenforceRegenPMAnoblisseurElementaire,
    ("Anneau", "Valeur", "", "RenforceRegenPM", False, True, True, False): AnneauDefensifValeurRenforceRegenPMAnoblisseurElementaire,
    ("Armure", "Valeur", "", "RenforceRegenPM", False, True, True, False): ArmureDefensifValeurRenforceRegenPMAnoblisseurElementaire,
    ("Heaume", "Valeur", "", "RenforceRegenPM", False, True, True, False): HeaumeDefensifValeurRenforceRegenPMAnoblisseurElementaire,
    ("Anneau", "", "PompeAPV", "RenforceRegenPM", False, True, True, False): AnneauPompeAPVRenforceRegenPMAnoblisseurElementaire,
    ("Armure", "", "PompeAPV", "RenforceRegenPM", False, True, True, False): ArmurePompeAPVRenforceRegenPMAnoblisseurElementaire,
    ("Heaume", "", "PompeAPV", "RenforceRegenPM", False, True, True, False): HeaumePompeAPVRenforceRegenPMAnoblisseurElementaire,
    ("Anneau", "Plafond", "PompeAPV", "RenforceRegenPM", False, True, True, False): AnneauDefensifPlafondPompeAPVRenforceRegenPMAnoblisseurElementaire,
    ("Armure", "Plafond", "PompeAPV", "RenforceRegenPM", False, True, True, False): ArmureDefensifPlafondPompeAPVRenforceRegenPMAnoblisseurElementaire,
    ("Heaume", "Plafond", "PompeAPV", "RenforceRegenPM", False, True, True, False): HeaumeDefensifPlafondPompeAPVRenforceRegenPMAnoblisseurElementaire,
    ("Anneau", "Proportion", "PompeAPV", "RenforceRegenPM", False, True, True, False): AnneauDefensifProportionPompeAPVRenforceRegenPMAnoblisseurElementaire,
    ("Armure", "Proportion", "PompeAPV", "RenforceRegenPM", False, True, True, False): ArmureDefensifProportionPompeAPVRenforceRegenPMAnoblisseurElementaire,
    ("Heaume", "Proportion", "PompeAPV", "RenforceRegenPM", False, True, True, False): HeaumeDefensifProportionPompeAPVRenforceRegenPMAnoblisseurElementaire,
    ("Anneau", "Seuil", "PompeAPV", "RenforceRegenPM", False, True, True, False): AnneauDefensifSeuilPompeAPVRenforceRegenPMAnoblisseurElementaire,
    ("Armure", "Seuil", "PompeAPV", "RenforceRegenPM", False, True, True, False): ArmureDefensifSeuilPompeAPVRenforceRegenPMAnoblisseurElementaire,
    ("Heaume", "Seuil", "PompeAPV", "RenforceRegenPM", False, True, True, False): HeaumeDefensifSeuilPompeAPVRenforceRegenPMAnoblisseurElementaire,
    ("Anneau", "Valeur", "PompeAPV", "RenforceRegenPM", False, True, True, False): AnneauDefensifValeurPompeAPVRenforceRegenPMAnoblisseurElementaire,
    ("Armure", "Valeur", "PompeAPV", "RenforceRegenPM", False, True, True, False): ArmureDefensifValeurPompeAPVRenforceRegenPMAnoblisseurElementaire,
    ("Heaume", "Valeur", "PompeAPV", "RenforceRegenPM", False, True, True, False): HeaumeDefensifValeurPompeAPVRenforceRegenPMAnoblisseurElementaire,
    ("Anneau", "", "RenforceRegenPV", "RenforceRegenPM", False, True, True, False): AnneauRenforceRegenPVRenforceRegenPMAnoblisseurElementaire,
    ("Armure", "", "RenforceRegenPV", "RenforceRegenPM", False, True, True, False): ArmureRenforceRegenPVRenforceRegenPMAnoblisseurElementaire,
    ("Heaume", "", "RenforceRegenPV", "RenforceRegenPM", False, True, True, False): HeaumeRenforceRegenPVRenforceRegenPMAnoblisseurElementaire,
    ("Anneau", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, True, True, False): AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseurElementaire,
    ("Armure", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, True, True, False): ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseurElementaire,
    ("Heaume", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, True, True, False): HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseurElementaire,
    ("Anneau", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, True, True, False): AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseurElementaire,
    ("Armure", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, True, True, False): ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseurElementaire,
    ("Heaume", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, True, True, False): HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseurElementaire,
    ("Anneau", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, True, True, False): AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseurElementaire,
    ("Armure", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, True, True, False): ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseurElementaire,
    ("Heaume", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, True, True, False): HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseurElementaire,
    ("Anneau", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, True, True, False): AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseurElementaire,
    ("Armure", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, True, True, False): ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseurElementaire,
    ("Heaume", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, True, True, False): HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseurElementaire,
    ("Anneau", "", "", "", True, True, True, False): AnneauAccelerateurAnoblisseurElementaire,
    ("Armure", "", "", "", True, True, True, False): ArmureAccelerateurAnoblisseurElementaire,
    ("Heaume", "", "", "", True, True, True, False): HeaumeAccelerateurAnoblisseurElementaire,
    ("Anneau", "Plafond", "", "", True, True, True, False): AnneauDefensifPlafondAccelerateurAnoblisseurElementaire,
    ("Armure", "Plafond", "", "", True, True, True, False): ArmureDefensifPlafondAccelerateurAnoblisseurElementaire,
    ("Heaume", "Plafond", "", "", True, True, True, False): HeaumeDefensifPlafondAccelerateurAnoblisseurElementaire,
    ("Anneau", "Proportion", "", "", True, True, True, False): AnneauDefensifProportionAccelerateurAnoblisseurElementaire,
    ("Armure", "Proportion", "", "", True, True, True, False): ArmureDefensifProportionAccelerateurAnoblisseurElementaire,
    ("Heaume", "Proportion", "", "", True, True, True, False): HeaumeDefensifProportionAccelerateurAnoblisseurElementaire,
    ("Anneau", "Seuil", "", "", True, True, True, False): AnneauDefensifSeuilAccelerateurAnoblisseurElementaire,
    ("Armure", "Seuil", "", "", True, True, True, False): ArmureDefensifSeuilAccelerateurAnoblisseurElementaire,
    ("Heaume", "Seuil", "", "", True, True, True, False): HeaumeDefensifSeuilAccelerateurAnoblisseurElementaire,
    ("Anneau", "Valeur", "", "", True, True, True, False): AnneauDefensifValeurAccelerateurAnoblisseurElementaire,
    ("Armure", "Valeur", "", "", True, True, True, False): ArmureDefensifValeurAccelerateurAnoblisseurElementaire,
    ("Heaume", "Valeur", "", "", True, True, True, False): HeaumeDefensifValeurAccelerateurAnoblisseurElementaire,
    ("Anneau", "", "PompeAPV", "", True, True, True, False): AnneauPompeAPVAccelerateurAnoblisseurElementaire,
    ("Armure", "", "PompeAPV", "", True, True, True, False): ArmurePompeAPVAccelerateurAnoblisseurElementaire,
    ("Heaume", "", "PompeAPV", "", True, True, True, False): HeaumePompeAPVAccelerateurAnoblisseurElementaire,
    ("Anneau", "Plafond", "PompeAPV", "", True, True, True, False): AnneauDefensifPlafondPompeAPVAccelerateurAnoblisseurElementaire,
    ("Armure", "Plafond", "PompeAPV", "", True, True, True, False): ArmureDefensifPlafondPompeAPVAccelerateurAnoblisseurElementaire,
    ("Heaume", "Plafond", "PompeAPV", "", True, True, True, False): HeaumeDefensifPlafondPompeAPVAccelerateurAnoblisseurElementaire,
    ("Anneau", "Proportion", "PompeAPV", "", True, True, True, False): AnneauDefensifProportionPompeAPVAccelerateurAnoblisseurElementaire,
    ("Armure", "Proportion", "PompeAPV", "", True, True, True, False): ArmureDefensifProportionPompeAPVAccelerateurAnoblisseurElementaire,
    ("Heaume", "Proportion", "PompeAPV", "", True, True, True, False): HeaumeDefensifProportionPompeAPVAccelerateurAnoblisseurElementaire,
    ("Anneau", "Seuil", "PompeAPV", "", True, True, True, False): AnneauDefensifSeuilPompeAPVAccelerateurAnoblisseurElementaire,
    ("Armure", "Seuil", "PompeAPV", "", True, True, True, False): ArmureDefensifSeuilPompeAPVAccelerateurAnoblisseurElementaire,
    ("Heaume", "Seuil", "PompeAPV", "", True, True, True, False): HeaumeDefensifSeuilPompeAPVAccelerateurAnoblisseurElementaire,
    ("Anneau", "Valeur", "PompeAPV", "", True, True, True, False): AnneauDefensifValeurPompeAPVAccelerateurAnoblisseurElementaire,
    ("Armure", "Valeur", "PompeAPV", "", True, True, True, False): ArmureDefensifValeurPompeAPVAccelerateurAnoblisseurElementaire,
    ("Heaume", "Valeur", "PompeAPV", "", True, True, True, False): HeaumeDefensifValeurPompeAPVAccelerateurAnoblisseurElementaire,
    ("Anneau", "", "RenforceRegenPV", "", True, True, True, False): AnneauRenforceRegenPVAccelerateurAnoblisseurElementaire,
    ("Armure", "", "RenforceRegenPV", "", True, True, True, False): ArmureRenforceRegenPVAccelerateurAnoblisseurElementaire,
    ("Heaume", "", "RenforceRegenPV", "", True, True, True, False): HeaumeRenforceRegenPVAccelerateurAnoblisseurElementaire,
    ("Anneau", "Plafond", "RenforceRegenPV", "", True, True, True, False): AnneauDefensifPlafondRenforceRegenPVAccelerateurAnoblisseurElementaire,
    ("Armure", "Plafond", "RenforceRegenPV", "", True, True, True, False): ArmureDefensifPlafondRenforceRegenPVAccelerateurAnoblisseurElementaire,
    ("Heaume", "Plafond", "RenforceRegenPV", "", True, True, True, False): HeaumeDefensifPlafondRenforceRegenPVAccelerateurAnoblisseurElementaire,
    ("Anneau", "Proportion", "RenforceRegenPV", "", True, True, True, False): AnneauDefensifProportionRenforceRegenPVAccelerateurAnoblisseurElementaire,
    ("Armure", "Proportion", "RenforceRegenPV", "", True, True, True, False): ArmureDefensifProportionRenforceRegenPVAccelerateurAnoblisseurElementaire,
    ("Heaume", "Proportion", "RenforceRegenPV", "", True, True, True, False): HeaumeDefensifProportionRenforceRegenPVAccelerateurAnoblisseurElementaire,
    ("Anneau", "Seuil", "RenforceRegenPV", "", True, True, True, False): AnneauDefensifSeuilRenforceRegenPVAccelerateurAnoblisseurElementaire,
    ("Armure", "Seuil", "RenforceRegenPV", "", True, True, True, False): ArmureDefensifSeuilRenforceRegenPVAccelerateurAnoblisseurElementaire,
    ("Heaume", "Seuil", "RenforceRegenPV", "", True, True, True, False): HeaumeDefensifSeuilRenforceRegenPVAccelerateurAnoblisseurElementaire,
    ("Anneau", "Valeur", "RenforceRegenPV", "", True, True, True, False): AnneauDefensifValeurRenforceRegenPVAccelerateurAnoblisseurElementaire,
    ("Armure", "Valeur", "RenforceRegenPV", "", True, True, True, False): ArmureDefensifValeurRenforceRegenPVAccelerateurAnoblisseurElementaire,
    ("Heaume", "Valeur", "RenforceRegenPV", "", True, True, True, False): HeaumeDefensifValeurRenforceRegenPVAccelerateurAnoblisseurElementaire,
    ("Anneau", "", "", "PompeAPM", True, True, True, False): AnneauPompeAPMAccelerateurAnoblisseurElementaire,
    ("Armure", "", "", "PompeAPM", True, True, True, False): ArmurePompeAPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "", "", "PompeAPM", True, True, True, False): HeaumePompeAPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Plafond", "", "PompeAPM", True, True, True, False): AnneauDefensifPlafondPompeAPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Plafond", "", "PompeAPM", True, True, True, False): ArmureDefensifPlafondPompeAPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Plafond", "", "PompeAPM", True, True, True, False): HeaumeDefensifPlafondPompeAPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Proportion", "", "PompeAPM", True, True, True, False): AnneauDefensifProportionPompeAPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Proportion", "", "PompeAPM", True, True, True, False): ArmureDefensifProportionPompeAPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Proportion", "", "PompeAPM", True, True, True, False): HeaumeDefensifProportionPompeAPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Seuil", "", "PompeAPM", True, True, True, False): AnneauDefensifSeuilPompeAPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Seuil", "", "PompeAPM", True, True, True, False): ArmureDefensifSeuilPompeAPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Seuil", "", "PompeAPM", True, True, True, False): HeaumeDefensifSeuilPompeAPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Valeur", "", "PompeAPM", True, True, True, False): AnneauDefensifValeurPompeAPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Valeur", "", "PompeAPM", True, True, True, False): ArmureDefensifValeurPompeAPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Valeur", "", "PompeAPM", True, True, True, False): HeaumeDefensifValeurPompeAPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "", "PompeAPV", "PompeAPM", True, True, True, False): AnneauPompeAPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Armure", "", "PompeAPV", "PompeAPM", True, True, True, False): ArmurePompeAPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "", "PompeAPV", "PompeAPM", True, True, True, False): HeaumePompeAPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Plafond", "PompeAPV", "PompeAPM", True, True, True, False): AnneauDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Plafond", "PompeAPV", "PompeAPM", True, True, True, False): ArmureDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Plafond", "PompeAPV", "PompeAPM", True, True, True, False): HeaumeDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Proportion", "PompeAPV", "PompeAPM", True, True, True, False): AnneauDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Proportion", "PompeAPV", "PompeAPM", True, True, True, False): ArmureDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Proportion", "PompeAPV", "PompeAPM", True, True, True, False): HeaumeDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Seuil", "PompeAPV", "PompeAPM", True, True, True, False): AnneauDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Seuil", "PompeAPV", "PompeAPM", True, True, True, False): ArmureDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Seuil", "PompeAPV", "PompeAPM", True, True, True, False): HeaumeDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Valeur", "PompeAPV", "PompeAPM", True, True, True, False): AnneauDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Valeur", "PompeAPV", "PompeAPM", True, True, True, False): ArmureDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Valeur", "PompeAPV", "PompeAPM", True, True, True, False): HeaumeDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "", "RenforceRegenPV", "PompeAPM", True, True, True, False): AnneauRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Armure", "", "RenforceRegenPV", "PompeAPM", True, True, True, False): ArmureRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "", "RenforceRegenPV", "PompeAPM", True, True, True, False): HeaumeRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Plafond", "RenforceRegenPV", "PompeAPM", True, True, True, False): AnneauDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Plafond", "RenforceRegenPV", "PompeAPM", True, True, True, False): ArmureDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Plafond", "RenforceRegenPV", "PompeAPM", True, True, True, False): HeaumeDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Proportion", "RenforceRegenPV", "PompeAPM", True, True, True, False): AnneauDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Proportion", "RenforceRegenPV", "PompeAPM", True, True, True, False): ArmureDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Proportion", "RenforceRegenPV", "PompeAPM", True, True, True, False): HeaumeDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Seuil", "RenforceRegenPV", "PompeAPM", True, True, True, False): AnneauDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Seuil", "RenforceRegenPV", "PompeAPM", True, True, True, False): ArmureDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Seuil", "RenforceRegenPV", "PompeAPM", True, True, True, False): HeaumeDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Valeur", "RenforceRegenPV", "PompeAPM", True, True, True, False): AnneauDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Valeur", "RenforceRegenPV", "PompeAPM", True, True, True, False): ArmureDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Valeur", "RenforceRegenPV", "PompeAPM", True, True, True, False): HeaumeDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "", "", "RenforceRegenPM", True, True, True, False): AnneauRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Armure", "", "", "RenforceRegenPM", True, True, True, False): ArmureRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "", "", "RenforceRegenPM", True, True, True, False): HeaumeRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Plafond", "", "RenforceRegenPM", True, True, True, False): AnneauDefensifPlafondRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Plafond", "", "RenforceRegenPM", True, True, True, False): ArmureDefensifPlafondRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Plafond", "", "RenforceRegenPM", True, True, True, False): HeaumeDefensifPlafondRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Proportion", "", "RenforceRegenPM", True, True, True, False): AnneauDefensifProportionRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Proportion", "", "RenforceRegenPM", True, True, True, False): ArmureDefensifProportionRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Proportion", "", "RenforceRegenPM", True, True, True, False): HeaumeDefensifProportionRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Seuil", "", "RenforceRegenPM", True, True, True, False): AnneauDefensifSeuilRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Seuil", "", "RenforceRegenPM", True, True, True, False): ArmureDefensifSeuilRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Seuil", "", "RenforceRegenPM", True, True, True, False): HeaumeDefensifSeuilRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Valeur", "", "RenforceRegenPM", True, True, True, False): AnneauDefensifValeurRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Valeur", "", "RenforceRegenPM", True, True, True, False): ArmureDefensifValeurRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Valeur", "", "RenforceRegenPM", True, True, True, False): HeaumeDefensifValeurRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "", "PompeAPV", "RenforceRegenPM", True, True, True, False): AnneauPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Armure", "", "PompeAPV", "RenforceRegenPM", True, True, True, False): ArmurePompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "", "PompeAPV", "RenforceRegenPM", True, True, True, False): HeaumePompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Plafond", "PompeAPV", "RenforceRegenPM", True, True, True, False): AnneauDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Plafond", "PompeAPV", "RenforceRegenPM", True, True, True, False): ArmureDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Plafond", "PompeAPV", "RenforceRegenPM", True, True, True, False): HeaumeDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Proportion", "PompeAPV", "RenforceRegenPM", True, True, True, False): AnneauDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Proportion", "PompeAPV", "RenforceRegenPM", True, True, True, False): ArmureDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Proportion", "PompeAPV", "RenforceRegenPM", True, True, True, False): HeaumeDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Seuil", "PompeAPV", "RenforceRegenPM", True, True, True, False): AnneauDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Seuil", "PompeAPV", "RenforceRegenPM", True, True, True, False): ArmureDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Seuil", "PompeAPV", "RenforceRegenPM", True, True, True, False): HeaumeDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Valeur", "PompeAPV", "RenforceRegenPM", True, True, True, False): AnneauDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Valeur", "PompeAPV", "RenforceRegenPM", True, True, True, False): ArmureDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Valeur", "PompeAPV", "RenforceRegenPM", True, True, True, False): HeaumeDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "", "RenforceRegenPV", "RenforceRegenPM", True, True, True, False): AnneauRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Armure", "", "RenforceRegenPV", "RenforceRegenPM", True, True, True, False): ArmureRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "", "RenforceRegenPV", "RenforceRegenPM", True, True, True, False): HeaumeRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, True, True, False): AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, True, True, False): ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, True, True, False): HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, True, True, False): AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, True, True, False): ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, True, True, False): HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, True, True, False): AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, True, True, False): ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, True, True, False): HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, True, True, False): AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Armure", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, True, True, False): ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Heaume", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, True, True, False): HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaire,
    ("Anneau", "", "", "", False, False, False, True): AnneauTribal,
    ("Armure", "", "", "", False, False, False, True): ArmureTribal,
    ("Heaume", "", "", "", False, False, False, True): HeaumeTribal,
    ("Anneau", "Plafond", "", "", False, False, False, True): AnneauDefensifPlafondTribal,
    ("Armure", "Plafond", "", "", False, False, False, True): ArmureDefensifPlafondTribal,
    ("Heaume", "Plafond", "", "", False, False, False, True): HeaumeDefensifPlafondTribal,
    ("Anneau", "Proportion", "", "", False, False, False, True): AnneauDefensifProportionTribal,
    ("Armure", "Proportion", "", "", False, False, False, True): ArmureDefensifProportionTribal,
    ("Heaume", "Proportion", "", "", False, False, False, True): HeaumeDefensifProportionTribal,
    ("Anneau", "Seuil", "", "", False, False, False, True): AnneauDefensifSeuilTribal,
    ("Armure", "Seuil", "", "", False, False, False, True): ArmureDefensifSeuilTribal,
    ("Heaume", "Seuil", "", "", False, False, False, True): HeaumeDefensifSeuilTribal,
    ("Anneau", "Valeur", "", "", False, False, False, True): AnneauDefensifValeurTribal,
    ("Armure", "Valeur", "", "", False, False, False, True): ArmureDefensifValeurTribal,
    ("Heaume", "Valeur", "", "", False, False, False, True): HeaumeDefensifValeurTribal,
    ("Anneau", "", "PompeAPV", "", False, False, False, True): AnneauPompeAPVTribal,
    ("Armure", "", "PompeAPV", "", False, False, False, True): ArmurePompeAPVTribal,
    ("Heaume", "", "PompeAPV", "", False, False, False, True): HeaumePompeAPVTribal,
    ("Anneau", "Plafond", "PompeAPV", "", False, False, False, True): AnneauDefensifPlafondPompeAPVTribal,
    ("Armure", "Plafond", "PompeAPV", "", False, False, False, True): ArmureDefensifPlafondPompeAPVTribal,
    ("Heaume", "Plafond", "PompeAPV", "", False, False, False, True): HeaumeDefensifPlafondPompeAPVTribal,
    ("Anneau", "Proportion", "PompeAPV", "", False, False, False, True): AnneauDefensifProportionPompeAPVTribal,
    ("Armure", "Proportion", "PompeAPV", "", False, False, False, True): ArmureDefensifProportionPompeAPVTribal,
    ("Heaume", "Proportion", "PompeAPV", "", False, False, False, True): HeaumeDefensifProportionPompeAPVTribal,
    ("Anneau", "Seuil", "PompeAPV", "", False, False, False, True): AnneauDefensifSeuilPompeAPVTribal,
    ("Armure", "Seuil", "PompeAPV", "", False, False, False, True): ArmureDefensifSeuilPompeAPVTribal,
    ("Heaume", "Seuil", "PompeAPV", "", False, False, False, True): HeaumeDefensifSeuilPompeAPVTribal,
    ("Anneau", "Valeur", "PompeAPV", "", False, False, False, True): AnneauDefensifValeurPompeAPVTribal,
    ("Armure", "Valeur", "PompeAPV", "", False, False, False, True): ArmureDefensifValeurPompeAPVTribal,
    ("Heaume", "Valeur", "PompeAPV", "", False, False, False, True): HeaumeDefensifValeurPompeAPVTribal,
    ("Anneau", "", "RenforceRegenPV", "", False, False, False, True): AnneauRenforceRegenPVTribal,
    ("Armure", "", "RenforceRegenPV", "", False, False, False, True): ArmureRenforceRegenPVTribal,
    ("Heaume", "", "RenforceRegenPV", "", False, False, False, True): HeaumeRenforceRegenPVTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "", False, False, False, True): AnneauDefensifPlafondRenforceRegenPVTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "", False, False, False, True): ArmureDefensifPlafondRenforceRegenPVTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "", False, False, False, True): HeaumeDefensifPlafondRenforceRegenPVTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "", False, False, False, True): AnneauDefensifProportionRenforceRegenPVTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "", False, False, False, True): ArmureDefensifProportionRenforceRegenPVTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "", False, False, False, True): HeaumeDefensifProportionRenforceRegenPVTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "", False, False, False, True): AnneauDefensifSeuilRenforceRegenPVTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "", False, False, False, True): ArmureDefensifSeuilRenforceRegenPVTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "", False, False, False, True): HeaumeDefensifSeuilRenforceRegenPVTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "", False, False, False, True): AnneauDefensifValeurRenforceRegenPVTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "", False, False, False, True): ArmureDefensifValeurRenforceRegenPVTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "", False, False, False, True): HeaumeDefensifValeurRenforceRegenPVTribal,
    ("Anneau", "", "", "PompeAPM", False, False, False, True): AnneauPompeAPMTribal,
    ("Armure", "", "", "PompeAPM", False, False, False, True): ArmurePompeAPMTribal,
    ("Heaume", "", "", "PompeAPM", False, False, False, True): HeaumePompeAPMTribal,
    ("Anneau", "Plafond", "", "PompeAPM", False, False, False, True): AnneauDefensifPlafondPompeAPMTribal,
    ("Armure", "Plafond", "", "PompeAPM", False, False, False, True): ArmureDefensifPlafondPompeAPMTribal,
    ("Heaume", "Plafond", "", "PompeAPM", False, False, False, True): HeaumeDefensifPlafondPompeAPMTribal,
    ("Anneau", "Proportion", "", "PompeAPM", False, False, False, True): AnneauDefensifProportionPompeAPMTribal,
    ("Armure", "Proportion", "", "PompeAPM", False, False, False, True): ArmureDefensifProportionPompeAPMTribal,
    ("Heaume", "Proportion", "", "PompeAPM", False, False, False, True): HeaumeDefensifProportionPompeAPMTribal,
    ("Anneau", "Seuil", "", "PompeAPM", False, False, False, True): AnneauDefensifSeuilPompeAPMTribal,
    ("Armure", "Seuil", "", "PompeAPM", False, False, False, True): ArmureDefensifSeuilPompeAPMTribal,
    ("Heaume", "Seuil", "", "PompeAPM", False, False, False, True): HeaumeDefensifSeuilPompeAPMTribal,
    ("Anneau", "Valeur", "", "PompeAPM", False, False, False, True): AnneauDefensifValeurPompeAPMTribal,
    ("Armure", "Valeur", "", "PompeAPM", False, False, False, True): ArmureDefensifValeurPompeAPMTribal,
    ("Heaume", "Valeur", "", "PompeAPM", False, False, False, True): HeaumeDefensifValeurPompeAPMTribal,
    ("Anneau", "", "PompeAPV", "PompeAPM", False, False, False, True): AnneauPompeAPVPompeAPMTribal,
    ("Armure", "", "PompeAPV", "PompeAPM", False, False, False, True): ArmurePompeAPVPompeAPMTribal,
    ("Heaume", "", "PompeAPV", "PompeAPM", False, False, False, True): HeaumePompeAPVPompeAPMTribal,
    ("Anneau", "Plafond", "PompeAPV", "PompeAPM", False, False, False, True): AnneauDefensifPlafondPompeAPVPompeAPMTribal,
    ("Armure", "Plafond", "PompeAPV", "PompeAPM", False, False, False, True): ArmureDefensifPlafondPompeAPVPompeAPMTribal,
    ("Heaume", "Plafond", "PompeAPV", "PompeAPM", False, False, False, True): HeaumeDefensifPlafondPompeAPVPompeAPMTribal,
    ("Anneau", "Proportion", "PompeAPV", "PompeAPM", False, False, False, True): AnneauDefensifProportionPompeAPVPompeAPMTribal,
    ("Armure", "Proportion", "PompeAPV", "PompeAPM", False, False, False, True): ArmureDefensifProportionPompeAPVPompeAPMTribal,
    ("Heaume", "Proportion", "PompeAPV", "PompeAPM", False, False, False, True): HeaumeDefensifProportionPompeAPVPompeAPMTribal,
    ("Anneau", "Seuil", "PompeAPV", "PompeAPM", False, False, False, True): AnneauDefensifSeuilPompeAPVPompeAPMTribal,
    ("Armure", "Seuil", "PompeAPV", "PompeAPM", False, False, False, True): ArmureDefensifSeuilPompeAPVPompeAPMTribal,
    ("Heaume", "Seuil", "PompeAPV", "PompeAPM", False, False, False, True): HeaumeDefensifSeuilPompeAPVPompeAPMTribal,
    ("Anneau", "Valeur", "PompeAPV", "PompeAPM", False, False, False, True): AnneauDefensifValeurPompeAPVPompeAPMTribal,
    ("Armure", "Valeur", "PompeAPV", "PompeAPM", False, False, False, True): ArmureDefensifValeurPompeAPVPompeAPMTribal,
    ("Heaume", "Valeur", "PompeAPV", "PompeAPM", False, False, False, True): HeaumeDefensifValeurPompeAPVPompeAPMTribal,
    ("Anneau", "", "RenforceRegenPV", "PompeAPM", False, False, False, True): AnneauRenforceRegenPVPompeAPMTribal,
    ("Armure", "", "RenforceRegenPV", "PompeAPM", False, False, False, True): ArmureRenforceRegenPVPompeAPMTribal,
    ("Heaume", "", "RenforceRegenPV", "PompeAPM", False, False, False, True): HeaumeRenforceRegenPVPompeAPMTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "PompeAPM", False, False, False, True): AnneauDefensifPlafondRenforceRegenPVPompeAPMTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "PompeAPM", False, False, False, True): ArmureDefensifPlafondRenforceRegenPVPompeAPMTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "PompeAPM", False, False, False, True): HeaumeDefensifPlafondRenforceRegenPVPompeAPMTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "PompeAPM", False, False, False, True): AnneauDefensifProportionRenforceRegenPVPompeAPMTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "PompeAPM", False, False, False, True): ArmureDefensifProportionRenforceRegenPVPompeAPMTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "PompeAPM", False, False, False, True): HeaumeDefensifProportionRenforceRegenPVPompeAPMTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "PompeAPM", False, False, False, True): AnneauDefensifSeuilRenforceRegenPVPompeAPMTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "PompeAPM", False, False, False, True): ArmureDefensifSeuilRenforceRegenPVPompeAPMTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "PompeAPM", False, False, False, True): HeaumeDefensifSeuilRenforceRegenPVPompeAPMTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "PompeAPM", False, False, False, True): AnneauDefensifValeurRenforceRegenPVPompeAPMTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "PompeAPM", False, False, False, True): ArmureDefensifValeurRenforceRegenPVPompeAPMTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "PompeAPM", False, False, False, True): HeaumeDefensifValeurRenforceRegenPVPompeAPMTribal,
    ("Anneau", "", "", "RenforceRegenPM", False, False, False, True): AnneauRenforceRegenPMTribal,
    ("Armure", "", "", "RenforceRegenPM", False, False, False, True): ArmureRenforceRegenPMTribal,
    ("Heaume", "", "", "RenforceRegenPM", False, False, False, True): HeaumeRenforceRegenPMTribal,
    ("Anneau", "Plafond", "", "RenforceRegenPM", False, False, False, True): AnneauDefensifPlafondRenforceRegenPMTribal,
    ("Armure", "Plafond", "", "RenforceRegenPM", False, False, False, True): ArmureDefensifPlafondRenforceRegenPMTribal,
    ("Heaume", "Plafond", "", "RenforceRegenPM", False, False, False, True): HeaumeDefensifPlafondRenforceRegenPMTribal,
    ("Anneau", "Proportion", "", "RenforceRegenPM", False, False, False, True): AnneauDefensifProportionRenforceRegenPMTribal,
    ("Armure", "Proportion", "", "RenforceRegenPM", False, False, False, True): ArmureDefensifProportionRenforceRegenPMTribal,
    ("Heaume", "Proportion", "", "RenforceRegenPM", False, False, False, True): HeaumeDefensifProportionRenforceRegenPMTribal,
    ("Anneau", "Seuil", "", "RenforceRegenPM", False, False, False, True): AnneauDefensifSeuilRenforceRegenPMTribal,
    ("Armure", "Seuil", "", "RenforceRegenPM", False, False, False, True): ArmureDefensifSeuilRenforceRegenPMTribal,
    ("Heaume", "Seuil", "", "RenforceRegenPM", False, False, False, True): HeaumeDefensifSeuilRenforceRegenPMTribal,
    ("Anneau", "Valeur", "", "RenforceRegenPM", False, False, False, True): AnneauDefensifValeurRenforceRegenPMTribal,
    ("Armure", "Valeur", "", "RenforceRegenPM", False, False, False, True): ArmureDefensifValeurRenforceRegenPMTribal,
    ("Heaume", "Valeur", "", "RenforceRegenPM", False, False, False, True): HeaumeDefensifValeurRenforceRegenPMTribal,
    ("Anneau", "", "PompeAPV", "RenforceRegenPM", False, False, False, True): AnneauPompeAPVRenforceRegenPMTribal,
    ("Armure", "", "PompeAPV", "RenforceRegenPM", False, False, False, True): ArmurePompeAPVRenforceRegenPMTribal,
    ("Heaume", "", "PompeAPV", "RenforceRegenPM", False, False, False, True): HeaumePompeAPVRenforceRegenPMTribal,
    ("Anneau", "Plafond", "PompeAPV", "RenforceRegenPM", False, False, False, True): AnneauDefensifPlafondPompeAPVRenforceRegenPMTribal,
    ("Armure", "Plafond", "PompeAPV", "RenforceRegenPM", False, False, False, True): ArmureDefensifPlafondPompeAPVRenforceRegenPMTribal,
    ("Heaume", "Plafond", "PompeAPV", "RenforceRegenPM", False, False, False, True): HeaumeDefensifPlafondPompeAPVRenforceRegenPMTribal,
    ("Anneau", "Proportion", "PompeAPV", "RenforceRegenPM", False, False, False, True): AnneauDefensifProportionPompeAPVRenforceRegenPMTribal,
    ("Armure", "Proportion", "PompeAPV", "RenforceRegenPM", False, False, False, True): ArmureDefensifProportionPompeAPVRenforceRegenPMTribal,
    ("Heaume", "Proportion", "PompeAPV", "RenforceRegenPM", False, False, False, True): HeaumeDefensifProportionPompeAPVRenforceRegenPMTribal,
    ("Anneau", "Seuil", "PompeAPV", "RenforceRegenPM", False, False, False, True): AnneauDefensifSeuilPompeAPVRenforceRegenPMTribal,
    ("Armure", "Seuil", "PompeAPV", "RenforceRegenPM", False, False, False, True): ArmureDefensifSeuilPompeAPVRenforceRegenPMTribal,
    ("Heaume", "Seuil", "PompeAPV", "RenforceRegenPM", False, False, False, True): HeaumeDefensifSeuilPompeAPVRenforceRegenPMTribal,
    ("Anneau", "Valeur", "PompeAPV", "RenforceRegenPM", False, False, False, True): AnneauDefensifValeurPompeAPVRenforceRegenPMTribal,
    ("Armure", "Valeur", "PompeAPV", "RenforceRegenPM", False, False, False, True): ArmureDefensifValeurPompeAPVRenforceRegenPMTribal,
    ("Heaume", "Valeur", "PompeAPV", "RenforceRegenPM", False, False, False, True): HeaumeDefensifValeurPompeAPVRenforceRegenPMTribal,
    ("Anneau", "", "RenforceRegenPV", "RenforceRegenPM", False, False, False, True): AnneauRenforceRegenPVRenforceRegenPMTribal,
    ("Armure", "", "RenforceRegenPV", "RenforceRegenPM", False, False, False, True): ArmureRenforceRegenPVRenforceRegenPMTribal,
    ("Heaume", "", "RenforceRegenPV", "RenforceRegenPM", False, False, False, True): HeaumeRenforceRegenPVRenforceRegenPMTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, False, False, True): AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, False, False, True): ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, False, False, True): HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, False, False, True): AnneauDefensifProportionRenforceRegenPVRenforceRegenPMTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, False, False, True): ArmureDefensifProportionRenforceRegenPVRenforceRegenPMTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, False, False, True): HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, False, False, True): AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, False, False, True): ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, False, False, True): HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, False, False, True): AnneauDefensifValeurRenforceRegenPVRenforceRegenPMTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, False, False, True): ArmureDefensifValeurRenforceRegenPVRenforceRegenPMTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, False, False, True): HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMTribal,
    ("Anneau", "", "", "", True, False, False, True): AnneauAccelerateurTribal,
    ("Armure", "", "", "", True, False, False, True): ArmureAccelerateurTribal,
    ("Heaume", "", "", "", True, False, False, True): HeaumeAccelerateurTribal,
    ("Anneau", "Plafond", "", "", True, False, False, True): AnneauDefensifPlafondAccelerateurTribal,
    ("Armure", "Plafond", "", "", True, False, False, True): ArmureDefensifPlafondAccelerateurTribal,
    ("Heaume", "Plafond", "", "", True, False, False, True): HeaumeDefensifPlafondAccelerateurTribal,
    ("Anneau", "Proportion", "", "", True, False, False, True): AnneauDefensifProportionAccelerateurTribal,
    ("Armure", "Proportion", "", "", True, False, False, True): ArmureDefensifProportionAccelerateurTribal,
    ("Heaume", "Proportion", "", "", True, False, False, True): HeaumeDefensifProportionAccelerateurTribal,
    ("Anneau", "Seuil", "", "", True, False, False, True): AnneauDefensifSeuilAccelerateurTribal,
    ("Armure", "Seuil", "", "", True, False, False, True): ArmureDefensifSeuilAccelerateurTribal,
    ("Heaume", "Seuil", "", "", True, False, False, True): HeaumeDefensifSeuilAccelerateurTribal,
    ("Anneau", "Valeur", "", "", True, False, False, True): AnneauDefensifValeurAccelerateurTribal,
    ("Armure", "Valeur", "", "", True, False, False, True): ArmureDefensifValeurAccelerateurTribal,
    ("Heaume", "Valeur", "", "", True, False, False, True): HeaumeDefensifValeurAccelerateurTribal,
    ("Anneau", "", "PompeAPV", "", True, False, False, True): AnneauPompeAPVAccelerateurTribal,
    ("Armure", "", "PompeAPV", "", True, False, False, True): ArmurePompeAPVAccelerateurTribal,
    ("Heaume", "", "PompeAPV", "", True, False, False, True): HeaumePompeAPVAccelerateurTribal,
    ("Anneau", "Plafond", "PompeAPV", "", True, False, False, True): AnneauDefensifPlafondPompeAPVAccelerateurTribal,
    ("Armure", "Plafond", "PompeAPV", "", True, False, False, True): ArmureDefensifPlafondPompeAPVAccelerateurTribal,
    ("Heaume", "Plafond", "PompeAPV", "", True, False, False, True): HeaumeDefensifPlafondPompeAPVAccelerateurTribal,
    ("Anneau", "Proportion", "PompeAPV", "", True, False, False, True): AnneauDefensifProportionPompeAPVAccelerateurTribal,
    ("Armure", "Proportion", "PompeAPV", "", True, False, False, True): ArmureDefensifProportionPompeAPVAccelerateurTribal,
    ("Heaume", "Proportion", "PompeAPV", "", True, False, False, True): HeaumeDefensifProportionPompeAPVAccelerateurTribal,
    ("Anneau", "Seuil", "PompeAPV", "", True, False, False, True): AnneauDefensifSeuilPompeAPVAccelerateurTribal,
    ("Armure", "Seuil", "PompeAPV", "", True, False, False, True): ArmureDefensifSeuilPompeAPVAccelerateurTribal,
    ("Heaume", "Seuil", "PompeAPV", "", True, False, False, True): HeaumeDefensifSeuilPompeAPVAccelerateurTribal,
    ("Anneau", "Valeur", "PompeAPV", "", True, False, False, True): AnneauDefensifValeurPompeAPVAccelerateurTribal,
    ("Armure", "Valeur", "PompeAPV", "", True, False, False, True): ArmureDefensifValeurPompeAPVAccelerateurTribal,
    ("Heaume", "Valeur", "PompeAPV", "", True, False, False, True): HeaumeDefensifValeurPompeAPVAccelerateurTribal,
    ("Anneau", "", "RenforceRegenPV", "", True, False, False, True): AnneauRenforceRegenPVAccelerateurTribal,
    ("Armure", "", "RenforceRegenPV", "", True, False, False, True): ArmureRenforceRegenPVAccelerateurTribal,
    ("Heaume", "", "RenforceRegenPV", "", True, False, False, True): HeaumeRenforceRegenPVAccelerateurTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "", True, False, False, True): AnneauDefensifPlafondRenforceRegenPVAccelerateurTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "", True, False, False, True): ArmureDefensifPlafondRenforceRegenPVAccelerateurTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "", True, False, False, True): HeaumeDefensifPlafondRenforceRegenPVAccelerateurTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "", True, False, False, True): AnneauDefensifProportionRenforceRegenPVAccelerateurTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "", True, False, False, True): ArmureDefensifProportionRenforceRegenPVAccelerateurTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "", True, False, False, True): HeaumeDefensifProportionRenforceRegenPVAccelerateurTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "", True, False, False, True): AnneauDefensifSeuilRenforceRegenPVAccelerateurTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "", True, False, False, True): ArmureDefensifSeuilRenforceRegenPVAccelerateurTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "", True, False, False, True): HeaumeDefensifSeuilRenforceRegenPVAccelerateurTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "", True, False, False, True): AnneauDefensifValeurRenforceRegenPVAccelerateurTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "", True, False, False, True): ArmureDefensifValeurRenforceRegenPVAccelerateurTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "", True, False, False, True): HeaumeDefensifValeurRenforceRegenPVAccelerateurTribal,
    ("Anneau", "", "", "PompeAPM", True, False, False, True): AnneauPompeAPMAccelerateurTribal,
    ("Armure", "", "", "PompeAPM", True, False, False, True): ArmurePompeAPMAccelerateurTribal,
    ("Heaume", "", "", "PompeAPM", True, False, False, True): HeaumePompeAPMAccelerateurTribal,
    ("Anneau", "Plafond", "", "PompeAPM", True, False, False, True): AnneauDefensifPlafondPompeAPMAccelerateurTribal,
    ("Armure", "Plafond", "", "PompeAPM", True, False, False, True): ArmureDefensifPlafondPompeAPMAccelerateurTribal,
    ("Heaume", "Plafond", "", "PompeAPM", True, False, False, True): HeaumeDefensifPlafondPompeAPMAccelerateurTribal,
    ("Anneau", "Proportion", "", "PompeAPM", True, False, False, True): AnneauDefensifProportionPompeAPMAccelerateurTribal,
    ("Armure", "Proportion", "", "PompeAPM", True, False, False, True): ArmureDefensifProportionPompeAPMAccelerateurTribal,
    ("Heaume", "Proportion", "", "PompeAPM", True, False, False, True): HeaumeDefensifProportionPompeAPMAccelerateurTribal,
    ("Anneau", "Seuil", "", "PompeAPM", True, False, False, True): AnneauDefensifSeuilPompeAPMAccelerateurTribal,
    ("Armure", "Seuil", "", "PompeAPM", True, False, False, True): ArmureDefensifSeuilPompeAPMAccelerateurTribal,
    ("Heaume", "Seuil", "", "PompeAPM", True, False, False, True): HeaumeDefensifSeuilPompeAPMAccelerateurTribal,
    ("Anneau", "Valeur", "", "PompeAPM", True, False, False, True): AnneauDefensifValeurPompeAPMAccelerateurTribal,
    ("Armure", "Valeur", "", "PompeAPM", True, False, False, True): ArmureDefensifValeurPompeAPMAccelerateurTribal,
    ("Heaume", "Valeur", "", "PompeAPM", True, False, False, True): HeaumeDefensifValeurPompeAPMAccelerateurTribal,
    ("Anneau", "", "PompeAPV", "PompeAPM", True, False, False, True): AnneauPompeAPVPompeAPMAccelerateurTribal,
    ("Armure", "", "PompeAPV", "PompeAPM", True, False, False, True): ArmurePompeAPVPompeAPMAccelerateurTribal,
    ("Heaume", "", "PompeAPV", "PompeAPM", True, False, False, True): HeaumePompeAPVPompeAPMAccelerateurTribal,
    ("Anneau", "Plafond", "PompeAPV", "PompeAPM", True, False, False, True): AnneauDefensifPlafondPompeAPVPompeAPMAccelerateurTribal,
    ("Armure", "Plafond", "PompeAPV", "PompeAPM", True, False, False, True): ArmureDefensifPlafondPompeAPVPompeAPMAccelerateurTribal,
    ("Heaume", "Plafond", "PompeAPV", "PompeAPM", True, False, False, True): HeaumeDefensifPlafondPompeAPVPompeAPMAccelerateurTribal,
    ("Anneau", "Proportion", "PompeAPV", "PompeAPM", True, False, False, True): AnneauDefensifProportionPompeAPVPompeAPMAccelerateurTribal,
    ("Armure", "Proportion", "PompeAPV", "PompeAPM", True, False, False, True): ArmureDefensifProportionPompeAPVPompeAPMAccelerateurTribal,
    ("Heaume", "Proportion", "PompeAPV", "PompeAPM", True, False, False, True): HeaumeDefensifProportionPompeAPVPompeAPMAccelerateurTribal,
    ("Anneau", "Seuil", "PompeAPV", "PompeAPM", True, False, False, True): AnneauDefensifSeuilPompeAPVPompeAPMAccelerateurTribal,
    ("Armure", "Seuil", "PompeAPV", "PompeAPM", True, False, False, True): ArmureDefensifSeuilPompeAPVPompeAPMAccelerateurTribal,
    ("Heaume", "Seuil", "PompeAPV", "PompeAPM", True, False, False, True): HeaumeDefensifSeuilPompeAPVPompeAPMAccelerateurTribal,
    ("Anneau", "Valeur", "PompeAPV", "PompeAPM", True, False, False, True): AnneauDefensifValeurPompeAPVPompeAPMAccelerateurTribal,
    ("Armure", "Valeur", "PompeAPV", "PompeAPM", True, False, False, True): ArmureDefensifValeurPompeAPVPompeAPMAccelerateurTribal,
    ("Heaume", "Valeur", "PompeAPV", "PompeAPM", True, False, False, True): HeaumeDefensifValeurPompeAPVPompeAPMAccelerateurTribal,
    ("Anneau", "", "RenforceRegenPV", "PompeAPM", True, False, False, True): AnneauRenforceRegenPVPompeAPMAccelerateurTribal,
    ("Armure", "", "RenforceRegenPV", "PompeAPM", True, False, False, True): ArmureRenforceRegenPVPompeAPMAccelerateurTribal,
    ("Heaume", "", "RenforceRegenPV", "PompeAPM", True, False, False, True): HeaumeRenforceRegenPVPompeAPMAccelerateurTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "PompeAPM", True, False, False, True): AnneauDefensifPlafondRenforceRegenPVPompeAPMAccelerateurTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "PompeAPM", True, False, False, True): ArmureDefensifPlafondRenforceRegenPVPompeAPMAccelerateurTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "PompeAPM", True, False, False, True): HeaumeDefensifPlafondRenforceRegenPVPompeAPMAccelerateurTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "PompeAPM", True, False, False, True): AnneauDefensifProportionRenforceRegenPVPompeAPMAccelerateurTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "PompeAPM", True, False, False, True): ArmureDefensifProportionRenforceRegenPVPompeAPMAccelerateurTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "PompeAPM", True, False, False, True): HeaumeDefensifProportionRenforceRegenPVPompeAPMAccelerateurTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "PompeAPM", True, False, False, True): AnneauDefensifSeuilRenforceRegenPVPompeAPMAccelerateurTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "PompeAPM", True, False, False, True): ArmureDefensifSeuilRenforceRegenPVPompeAPMAccelerateurTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "PompeAPM", True, False, False, True): HeaumeDefensifSeuilRenforceRegenPVPompeAPMAccelerateurTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "PompeAPM", True, False, False, True): AnneauDefensifValeurRenforceRegenPVPompeAPMAccelerateurTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "PompeAPM", True, False, False, True): ArmureDefensifValeurRenforceRegenPVPompeAPMAccelerateurTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "PompeAPM", True, False, False, True): HeaumeDefensifValeurRenforceRegenPVPompeAPMAccelerateurTribal,
    ("Anneau", "", "", "RenforceRegenPM", True, False, False, True): AnneauRenforceRegenPMAccelerateurTribal,
    ("Armure", "", "", "RenforceRegenPM", True, False, False, True): ArmureRenforceRegenPMAccelerateurTribal,
    ("Heaume", "", "", "RenforceRegenPM", True, False, False, True): HeaumeRenforceRegenPMAccelerateurTribal,
    ("Anneau", "Plafond", "", "RenforceRegenPM", True, False, False, True): AnneauDefensifPlafondRenforceRegenPMAccelerateurTribal,
    ("Armure", "Plafond", "", "RenforceRegenPM", True, False, False, True): ArmureDefensifPlafondRenforceRegenPMAccelerateurTribal,
    ("Heaume", "Plafond", "", "RenforceRegenPM", True, False, False, True): HeaumeDefensifPlafondRenforceRegenPMAccelerateurTribal,
    ("Anneau", "Proportion", "", "RenforceRegenPM", True, False, False, True): AnneauDefensifProportionRenforceRegenPMAccelerateurTribal,
    ("Armure", "Proportion", "", "RenforceRegenPM", True, False, False, True): ArmureDefensifProportionRenforceRegenPMAccelerateurTribal,
    ("Heaume", "Proportion", "", "RenforceRegenPM", True, False, False, True): HeaumeDefensifProportionRenforceRegenPMAccelerateurTribal,
    ("Anneau", "Seuil", "", "RenforceRegenPM", True, False, False, True): AnneauDefensifSeuilRenforceRegenPMAccelerateurTribal,
    ("Armure", "Seuil", "", "RenforceRegenPM", True, False, False, True): ArmureDefensifSeuilRenforceRegenPMAccelerateurTribal,
    ("Heaume", "Seuil", "", "RenforceRegenPM", True, False, False, True): HeaumeDefensifSeuilRenforceRegenPMAccelerateurTribal,
    ("Anneau", "Valeur", "", "RenforceRegenPM", True, False, False, True): AnneauDefensifValeurRenforceRegenPMAccelerateurTribal,
    ("Armure", "Valeur", "", "RenforceRegenPM", True, False, False, True): ArmureDefensifValeurRenforceRegenPMAccelerateurTribal,
    ("Heaume", "Valeur", "", "RenforceRegenPM", True, False, False, True): HeaumeDefensifValeurRenforceRegenPMAccelerateurTribal,
    ("Anneau", "", "PompeAPV", "RenforceRegenPM", True, False, False, True): AnneauPompeAPVRenforceRegenPMAccelerateurTribal,
    ("Armure", "", "PompeAPV", "RenforceRegenPM", True, False, False, True): ArmurePompeAPVRenforceRegenPMAccelerateurTribal,
    ("Heaume", "", "PompeAPV", "RenforceRegenPM", True, False, False, True): HeaumePompeAPVRenforceRegenPMAccelerateurTribal,
    ("Anneau", "Plafond", "PompeAPV", "RenforceRegenPM", True, False, False, True): AnneauDefensifPlafondPompeAPVRenforceRegenPMAccelerateurTribal,
    ("Armure", "Plafond", "PompeAPV", "RenforceRegenPM", True, False, False, True): ArmureDefensifPlafondPompeAPVRenforceRegenPMAccelerateurTribal,
    ("Heaume", "Plafond", "PompeAPV", "RenforceRegenPM", True, False, False, True): HeaumeDefensifPlafondPompeAPVRenforceRegenPMAccelerateurTribal,
    ("Anneau", "Proportion", "PompeAPV", "RenforceRegenPM", True, False, False, True): AnneauDefensifProportionPompeAPVRenforceRegenPMAccelerateurTribal,
    ("Armure", "Proportion", "PompeAPV", "RenforceRegenPM", True, False, False, True): ArmureDefensifProportionPompeAPVRenforceRegenPMAccelerateurTribal,
    ("Heaume", "Proportion", "PompeAPV", "RenforceRegenPM", True, False, False, True): HeaumeDefensifProportionPompeAPVRenforceRegenPMAccelerateurTribal,
    ("Anneau", "Seuil", "PompeAPV", "RenforceRegenPM", True, False, False, True): AnneauDefensifSeuilPompeAPVRenforceRegenPMAccelerateurTribal,
    ("Armure", "Seuil", "PompeAPV", "RenforceRegenPM", True, False, False, True): ArmureDefensifSeuilPompeAPVRenforceRegenPMAccelerateurTribal,
    ("Heaume", "Seuil", "PompeAPV", "RenforceRegenPM", True, False, False, True): HeaumeDefensifSeuilPompeAPVRenforceRegenPMAccelerateurTribal,
    ("Anneau", "Valeur", "PompeAPV", "RenforceRegenPM", True, False, False, True): AnneauDefensifValeurPompeAPVRenforceRegenPMAccelerateurTribal,
    ("Armure", "Valeur", "PompeAPV", "RenforceRegenPM", True, False, False, True): ArmureDefensifValeurPompeAPVRenforceRegenPMAccelerateurTribal,
    ("Heaume", "Valeur", "PompeAPV", "RenforceRegenPM", True, False, False, True): HeaumeDefensifValeurPompeAPVRenforceRegenPMAccelerateurTribal,
    ("Anneau", "", "RenforceRegenPV", "RenforceRegenPM", True, False, False, True): AnneauRenforceRegenPVRenforceRegenPMAccelerateurTribal,
    ("Armure", "", "RenforceRegenPV", "RenforceRegenPM", True, False, False, True): ArmureRenforceRegenPVRenforceRegenPMAccelerateurTribal,
    ("Heaume", "", "RenforceRegenPV", "RenforceRegenPM", True, False, False, True): HeaumeRenforceRegenPVRenforceRegenPMAccelerateurTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, False, False, True): AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, False, False, True): ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, False, False, True): HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, False, False, True): AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, False, False, True): ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, False, False, True): HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, False, False, True): AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, False, False, True): ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, False, False, True): HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, False, False, True): AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, False, False, True): ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, False, False, True): HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurTribal,
    ("Anneau", "", "", "", False, True, False, True): AnneauAnoblisseurTribal,
    ("Armure", "", "", "", False, True, False, True): ArmureAnoblisseurTribal,
    ("Heaume", "", "", "", False, True, False, True): HeaumeAnoblisseurTribal,
    ("Anneau", "Plafond", "", "", False, True, False, True): AnneauDefensifPlafondAnoblisseurTribal,
    ("Armure", "Plafond", "", "", False, True, False, True): ArmureDefensifPlafondAnoblisseurTribal,
    ("Heaume", "Plafond", "", "", False, True, False, True): HeaumeDefensifPlafondAnoblisseurTribal,
    ("Anneau", "Proportion", "", "", False, True, False, True): AnneauDefensifProportionAnoblisseurTribal,
    ("Armure", "Proportion", "", "", False, True, False, True): ArmureDefensifProportionAnoblisseurTribal,
    ("Heaume", "Proportion", "", "", False, True, False, True): HeaumeDefensifProportionAnoblisseurTribal,
    ("Anneau", "Seuil", "", "", False, True, False, True): AnneauDefensifSeuilAnoblisseurTribal,
    ("Armure", "Seuil", "", "", False, True, False, True): ArmureDefensifSeuilAnoblisseurTribal,
    ("Heaume", "Seuil", "", "", False, True, False, True): HeaumeDefensifSeuilAnoblisseurTribal,
    ("Anneau", "Valeur", "", "", False, True, False, True): AnneauDefensifValeurAnoblisseurTribal,
    ("Armure", "Valeur", "", "", False, True, False, True): ArmureDefensifValeurAnoblisseurTribal,
    ("Heaume", "Valeur", "", "", False, True, False, True): HeaumeDefensifValeurAnoblisseurTribal,
    ("Anneau", "", "PompeAPV", "", False, True, False, True): AnneauPompeAPVAnoblisseurTribal,
    ("Armure", "", "PompeAPV", "", False, True, False, True): ArmurePompeAPVAnoblisseurTribal,
    ("Heaume", "", "PompeAPV", "", False, True, False, True): HeaumePompeAPVAnoblisseurTribal,
    ("Anneau", "Plafond", "PompeAPV", "", False, True, False, True): AnneauDefensifPlafondPompeAPVAnoblisseurTribal,
    ("Armure", "Plafond", "PompeAPV", "", False, True, False, True): ArmureDefensifPlafondPompeAPVAnoblisseurTribal,
    ("Heaume", "Plafond", "PompeAPV", "", False, True, False, True): HeaumeDefensifPlafondPompeAPVAnoblisseurTribal,
    ("Anneau", "Proportion", "PompeAPV", "", False, True, False, True): AnneauDefensifProportionPompeAPVAnoblisseurTribal,
    ("Armure", "Proportion", "PompeAPV", "", False, True, False, True): ArmureDefensifProportionPompeAPVAnoblisseurTribal,
    ("Heaume", "Proportion", "PompeAPV", "", False, True, False, True): HeaumeDefensifProportionPompeAPVAnoblisseurTribal,
    ("Anneau", "Seuil", "PompeAPV", "", False, True, False, True): AnneauDefensifSeuilPompeAPVAnoblisseurTribal,
    ("Armure", "Seuil", "PompeAPV", "", False, True, False, True): ArmureDefensifSeuilPompeAPVAnoblisseurTribal,
    ("Heaume", "Seuil", "PompeAPV", "", False, True, False, True): HeaumeDefensifSeuilPompeAPVAnoblisseurTribal,
    ("Anneau", "Valeur", "PompeAPV", "", False, True, False, True): AnneauDefensifValeurPompeAPVAnoblisseurTribal,
    ("Armure", "Valeur", "PompeAPV", "", False, True, False, True): ArmureDefensifValeurPompeAPVAnoblisseurTribal,
    ("Heaume", "Valeur", "PompeAPV", "", False, True, False, True): HeaumeDefensifValeurPompeAPVAnoblisseurTribal,
    ("Anneau", "", "RenforceRegenPV", "", False, True, False, True): AnneauRenforceRegenPVAnoblisseurTribal,
    ("Armure", "", "RenforceRegenPV", "", False, True, False, True): ArmureRenforceRegenPVAnoblisseurTribal,
    ("Heaume", "", "RenforceRegenPV", "", False, True, False, True): HeaumeRenforceRegenPVAnoblisseurTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "", False, True, False, True): AnneauDefensifPlafondRenforceRegenPVAnoblisseurTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "", False, True, False, True): ArmureDefensifPlafondRenforceRegenPVAnoblisseurTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "", False, True, False, True): HeaumeDefensifPlafondRenforceRegenPVAnoblisseurTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "", False, True, False, True): AnneauDefensifProportionRenforceRegenPVAnoblisseurTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "", False, True, False, True): ArmureDefensifProportionRenforceRegenPVAnoblisseurTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "", False, True, False, True): HeaumeDefensifProportionRenforceRegenPVAnoblisseurTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "", False, True, False, True): AnneauDefensifSeuilRenforceRegenPVAnoblisseurTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "", False, True, False, True): ArmureDefensifSeuilRenforceRegenPVAnoblisseurTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "", False, True, False, True): HeaumeDefensifSeuilRenforceRegenPVAnoblisseurTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "", False, True, False, True): AnneauDefensifValeurRenforceRegenPVAnoblisseurTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "", False, True, False, True): ArmureDefensifValeurRenforceRegenPVAnoblisseurTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "", False, True, False, True): HeaumeDefensifValeurRenforceRegenPVAnoblisseurTribal,
    ("Anneau", "", "", "PompeAPM", False, True, False, True): AnneauPompeAPMAnoblisseurTribal,
    ("Armure", "", "", "PompeAPM", False, True, False, True): ArmurePompeAPMAnoblisseurTribal,
    ("Heaume", "", "", "PompeAPM", False, True, False, True): HeaumePompeAPMAnoblisseurTribal,
    ("Anneau", "Plafond", "", "PompeAPM", False, True, False, True): AnneauDefensifPlafondPompeAPMAnoblisseurTribal,
    ("Armure", "Plafond", "", "PompeAPM", False, True, False, True): ArmureDefensifPlafondPompeAPMAnoblisseurTribal,
    ("Heaume", "Plafond", "", "PompeAPM", False, True, False, True): HeaumeDefensifPlafondPompeAPMAnoblisseurTribal,
    ("Anneau", "Proportion", "", "PompeAPM", False, True, False, True): AnneauDefensifProportionPompeAPMAnoblisseurTribal,
    ("Armure", "Proportion", "", "PompeAPM", False, True, False, True): ArmureDefensifProportionPompeAPMAnoblisseurTribal,
    ("Heaume", "Proportion", "", "PompeAPM", False, True, False, True): HeaumeDefensifProportionPompeAPMAnoblisseurTribal,
    ("Anneau", "Seuil", "", "PompeAPM", False, True, False, True): AnneauDefensifSeuilPompeAPMAnoblisseurTribal,
    ("Armure", "Seuil", "", "PompeAPM", False, True, False, True): ArmureDefensifSeuilPompeAPMAnoblisseurTribal,
    ("Heaume", "Seuil", "", "PompeAPM", False, True, False, True): HeaumeDefensifSeuilPompeAPMAnoblisseurTribal,
    ("Anneau", "Valeur", "", "PompeAPM", False, True, False, True): AnneauDefensifValeurPompeAPMAnoblisseurTribal,
    ("Armure", "Valeur", "", "PompeAPM", False, True, False, True): ArmureDefensifValeurPompeAPMAnoblisseurTribal,
    ("Heaume", "Valeur", "", "PompeAPM", False, True, False, True): HeaumeDefensifValeurPompeAPMAnoblisseurTribal,
    ("Anneau", "", "PompeAPV", "PompeAPM", False, True, False, True): AnneauPompeAPVPompeAPMAnoblisseurTribal,
    ("Armure", "", "PompeAPV", "PompeAPM", False, True, False, True): ArmurePompeAPVPompeAPMAnoblisseurTribal,
    ("Heaume", "", "PompeAPV", "PompeAPM", False, True, False, True): HeaumePompeAPVPompeAPMAnoblisseurTribal,
    ("Anneau", "Plafond", "PompeAPV", "PompeAPM", False, True, False, True): AnneauDefensifPlafondPompeAPVPompeAPMAnoblisseurTribal,
    ("Armure", "Plafond", "PompeAPV", "PompeAPM", False, True, False, True): ArmureDefensifPlafondPompeAPVPompeAPMAnoblisseurTribal,
    ("Heaume", "Plafond", "PompeAPV", "PompeAPM", False, True, False, True): HeaumeDefensifPlafondPompeAPVPompeAPMAnoblisseurTribal,
    ("Anneau", "Proportion", "PompeAPV", "PompeAPM", False, True, False, True): AnneauDefensifProportionPompeAPVPompeAPMAnoblisseurTribal,
    ("Armure", "Proportion", "PompeAPV", "PompeAPM", False, True, False, True): ArmureDefensifProportionPompeAPVPompeAPMAnoblisseurTribal,
    ("Heaume", "Proportion", "PompeAPV", "PompeAPM", False, True, False, True): HeaumeDefensifProportionPompeAPVPompeAPMAnoblisseurTribal,
    ("Anneau", "Seuil", "PompeAPV", "PompeAPM", False, True, False, True): AnneauDefensifSeuilPompeAPVPompeAPMAnoblisseurTribal,
    ("Armure", "Seuil", "PompeAPV", "PompeAPM", False, True, False, True): ArmureDefensifSeuilPompeAPVPompeAPMAnoblisseurTribal,
    ("Heaume", "Seuil", "PompeAPV", "PompeAPM", False, True, False, True): HeaumeDefensifSeuilPompeAPVPompeAPMAnoblisseurTribal,
    ("Anneau", "Valeur", "PompeAPV", "PompeAPM", False, True, False, True): AnneauDefensifValeurPompeAPVPompeAPMAnoblisseurTribal,
    ("Armure", "Valeur", "PompeAPV", "PompeAPM", False, True, False, True): ArmureDefensifValeurPompeAPVPompeAPMAnoblisseurTribal,
    ("Heaume", "Valeur", "PompeAPV", "PompeAPM", False, True, False, True): HeaumeDefensifValeurPompeAPVPompeAPMAnoblisseurTribal,
    ("Anneau", "", "RenforceRegenPV", "PompeAPM", False, True, False, True): AnneauRenforceRegenPVPompeAPMAnoblisseurTribal,
    ("Armure", "", "RenforceRegenPV", "PompeAPM", False, True, False, True): ArmureRenforceRegenPVPompeAPMAnoblisseurTribal,
    ("Heaume", "", "RenforceRegenPV", "PompeAPM", False, True, False, True): HeaumeRenforceRegenPVPompeAPMAnoblisseurTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "PompeAPM", False, True, False, True): AnneauDefensifPlafondRenforceRegenPVPompeAPMAnoblisseurTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "PompeAPM", False, True, False, True): ArmureDefensifPlafondRenforceRegenPVPompeAPMAnoblisseurTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "PompeAPM", False, True, False, True): HeaumeDefensifPlafondRenforceRegenPVPompeAPMAnoblisseurTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "PompeAPM", False, True, False, True): AnneauDefensifProportionRenforceRegenPVPompeAPMAnoblisseurTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "PompeAPM", False, True, False, True): ArmureDefensifProportionRenforceRegenPVPompeAPMAnoblisseurTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "PompeAPM", False, True, False, True): HeaumeDefensifProportionRenforceRegenPVPompeAPMAnoblisseurTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "PompeAPM", False, True, False, True): AnneauDefensifSeuilRenforceRegenPVPompeAPMAnoblisseurTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "PompeAPM", False, True, False, True): ArmureDefensifSeuilRenforceRegenPVPompeAPMAnoblisseurTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "PompeAPM", False, True, False, True): HeaumeDefensifSeuilRenforceRegenPVPompeAPMAnoblisseurTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "PompeAPM", False, True, False, True): AnneauDefensifValeurRenforceRegenPVPompeAPMAnoblisseurTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "PompeAPM", False, True, False, True): ArmureDefensifValeurRenforceRegenPVPompeAPMAnoblisseurTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "PompeAPM", False, True, False, True): HeaumeDefensifValeurRenforceRegenPVPompeAPMAnoblisseurTribal,
    ("Anneau", "", "", "RenforceRegenPM", False, True, False, True): AnneauRenforceRegenPMAnoblisseurTribal,
    ("Armure", "", "", "RenforceRegenPM", False, True, False, True): ArmureRenforceRegenPMAnoblisseurTribal,
    ("Heaume", "", "", "RenforceRegenPM", False, True, False, True): HeaumeRenforceRegenPMAnoblisseurTribal,
    ("Anneau", "Plafond", "", "RenforceRegenPM", False, True, False, True): AnneauDefensifPlafondRenforceRegenPMAnoblisseurTribal,
    ("Armure", "Plafond", "", "RenforceRegenPM", False, True, False, True): ArmureDefensifPlafondRenforceRegenPMAnoblisseurTribal,
    ("Heaume", "Plafond", "", "RenforceRegenPM", False, True, False, True): HeaumeDefensifPlafondRenforceRegenPMAnoblisseurTribal,
    ("Anneau", "Proportion", "", "RenforceRegenPM", False, True, False, True): AnneauDefensifProportionRenforceRegenPMAnoblisseurTribal,
    ("Armure", "Proportion", "", "RenforceRegenPM", False, True, False, True): ArmureDefensifProportionRenforceRegenPMAnoblisseurTribal,
    ("Heaume", "Proportion", "", "RenforceRegenPM", False, True, False, True): HeaumeDefensifProportionRenforceRegenPMAnoblisseurTribal,
    ("Anneau", "Seuil", "", "RenforceRegenPM", False, True, False, True): AnneauDefensifSeuilRenforceRegenPMAnoblisseurTribal,
    ("Armure", "Seuil", "", "RenforceRegenPM", False, True, False, True): ArmureDefensifSeuilRenforceRegenPMAnoblisseurTribal,
    ("Heaume", "Seuil", "", "RenforceRegenPM", False, True, False, True): HeaumeDefensifSeuilRenforceRegenPMAnoblisseurTribal,
    ("Anneau", "Valeur", "", "RenforceRegenPM", False, True, False, True): AnneauDefensifValeurRenforceRegenPMAnoblisseurTribal,
    ("Armure", "Valeur", "", "RenforceRegenPM", False, True, False, True): ArmureDefensifValeurRenforceRegenPMAnoblisseurTribal,
    ("Heaume", "Valeur", "", "RenforceRegenPM", False, True, False, True): HeaumeDefensifValeurRenforceRegenPMAnoblisseurTribal,
    ("Anneau", "", "PompeAPV", "RenforceRegenPM", False, True, False, True): AnneauPompeAPVRenforceRegenPMAnoblisseurTribal,
    ("Armure", "", "PompeAPV", "RenforceRegenPM", False, True, False, True): ArmurePompeAPVRenforceRegenPMAnoblisseurTribal,
    ("Heaume", "", "PompeAPV", "RenforceRegenPM", False, True, False, True): HeaumePompeAPVRenforceRegenPMAnoblisseurTribal,
    ("Anneau", "Plafond", "PompeAPV", "RenforceRegenPM", False, True, False, True): AnneauDefensifPlafondPompeAPVRenforceRegenPMAnoblisseurTribal,
    ("Armure", "Plafond", "PompeAPV", "RenforceRegenPM", False, True, False, True): ArmureDefensifPlafondPompeAPVRenforceRegenPMAnoblisseurTribal,
    ("Heaume", "Plafond", "PompeAPV", "RenforceRegenPM", False, True, False, True): HeaumeDefensifPlafondPompeAPVRenforceRegenPMAnoblisseurTribal,
    ("Anneau", "Proportion", "PompeAPV", "RenforceRegenPM", False, True, False, True): AnneauDefensifProportionPompeAPVRenforceRegenPMAnoblisseurTribal,
    ("Armure", "Proportion", "PompeAPV", "RenforceRegenPM", False, True, False, True): ArmureDefensifProportionPompeAPVRenforceRegenPMAnoblisseurTribal,
    ("Heaume", "Proportion", "PompeAPV", "RenforceRegenPM", False, True, False, True): HeaumeDefensifProportionPompeAPVRenforceRegenPMAnoblisseurTribal,
    ("Anneau", "Seuil", "PompeAPV", "RenforceRegenPM", False, True, False, True): AnneauDefensifSeuilPompeAPVRenforceRegenPMAnoblisseurTribal,
    ("Armure", "Seuil", "PompeAPV", "RenforceRegenPM", False, True, False, True): ArmureDefensifSeuilPompeAPVRenforceRegenPMAnoblisseurTribal,
    ("Heaume", "Seuil", "PompeAPV", "RenforceRegenPM", False, True, False, True): HeaumeDefensifSeuilPompeAPVRenforceRegenPMAnoblisseurTribal,
    ("Anneau", "Valeur", "PompeAPV", "RenforceRegenPM", False, True, False, True): AnneauDefensifValeurPompeAPVRenforceRegenPMAnoblisseurTribal,
    ("Armure", "Valeur", "PompeAPV", "RenforceRegenPM", False, True, False, True): ArmureDefensifValeurPompeAPVRenforceRegenPMAnoblisseurTribal,
    ("Heaume", "Valeur", "PompeAPV", "RenforceRegenPM", False, True, False, True): HeaumeDefensifValeurPompeAPVRenforceRegenPMAnoblisseurTribal,
    ("Anneau", "", "RenforceRegenPV", "RenforceRegenPM", False, True, False, True): AnneauRenforceRegenPVRenforceRegenPMAnoblisseurTribal,
    ("Armure", "", "RenforceRegenPV", "RenforceRegenPM", False, True, False, True): ArmureRenforceRegenPVRenforceRegenPMAnoblisseurTribal,
    ("Heaume", "", "RenforceRegenPV", "RenforceRegenPM", False, True, False, True): HeaumeRenforceRegenPVRenforceRegenPMAnoblisseurTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, True, False, True): AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseurTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, True, False, True): ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseurTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, True, False, True): HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseurTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, True, False, True): AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseurTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, True, False, True): ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseurTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, True, False, True): HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseurTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, True, False, True): AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseurTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, True, False, True): ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseurTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, True, False, True): HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseurTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, True, False, True): AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseurTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, True, False, True): ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseurTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, True, False, True): HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseurTribal,
    ("Anneau", "", "", "", True, True, False, True): AnneauAccelerateurAnoblisseurTribal,
    ("Armure", "", "", "", True, True, False, True): ArmureAccelerateurAnoblisseurTribal,
    ("Heaume", "", "", "", True, True, False, True): HeaumeAccelerateurAnoblisseurTribal,
    ("Anneau", "Plafond", "", "", True, True, False, True): AnneauDefensifPlafondAccelerateurAnoblisseurTribal,
    ("Armure", "Plafond", "", "", True, True, False, True): ArmureDefensifPlafondAccelerateurAnoblisseurTribal,
    ("Heaume", "Plafond", "", "", True, True, False, True): HeaumeDefensifPlafondAccelerateurAnoblisseurTribal,
    ("Anneau", "Proportion", "", "", True, True, False, True): AnneauDefensifProportionAccelerateurAnoblisseurTribal,
    ("Armure", "Proportion", "", "", True, True, False, True): ArmureDefensifProportionAccelerateurAnoblisseurTribal,
    ("Heaume", "Proportion", "", "", True, True, False, True): HeaumeDefensifProportionAccelerateurAnoblisseurTribal,
    ("Anneau", "Seuil", "", "", True, True, False, True): AnneauDefensifSeuilAccelerateurAnoblisseurTribal,
    ("Armure", "Seuil", "", "", True, True, False, True): ArmureDefensifSeuilAccelerateurAnoblisseurTribal,
    ("Heaume", "Seuil", "", "", True, True, False, True): HeaumeDefensifSeuilAccelerateurAnoblisseurTribal,
    ("Anneau", "Valeur", "", "", True, True, False, True): AnneauDefensifValeurAccelerateurAnoblisseurTribal,
    ("Armure", "Valeur", "", "", True, True, False, True): ArmureDefensifValeurAccelerateurAnoblisseurTribal,
    ("Heaume", "Valeur", "", "", True, True, False, True): HeaumeDefensifValeurAccelerateurAnoblisseurTribal,
    ("Anneau", "", "PompeAPV", "", True, True, False, True): AnneauPompeAPVAccelerateurAnoblisseurTribal,
    ("Armure", "", "PompeAPV", "", True, True, False, True): ArmurePompeAPVAccelerateurAnoblisseurTribal,
    ("Heaume", "", "PompeAPV", "", True, True, False, True): HeaumePompeAPVAccelerateurAnoblisseurTribal,
    ("Anneau", "Plafond", "PompeAPV", "", True, True, False, True): AnneauDefensifPlafondPompeAPVAccelerateurAnoblisseurTribal,
    ("Armure", "Plafond", "PompeAPV", "", True, True, False, True): ArmureDefensifPlafondPompeAPVAccelerateurAnoblisseurTribal,
    ("Heaume", "Plafond", "PompeAPV", "", True, True, False, True): HeaumeDefensifPlafondPompeAPVAccelerateurAnoblisseurTribal,
    ("Anneau", "Proportion", "PompeAPV", "", True, True, False, True): AnneauDefensifProportionPompeAPVAccelerateurAnoblisseurTribal,
    ("Armure", "Proportion", "PompeAPV", "", True, True, False, True): ArmureDefensifProportionPompeAPVAccelerateurAnoblisseurTribal,
    ("Heaume", "Proportion", "PompeAPV", "", True, True, False, True): HeaumeDefensifProportionPompeAPVAccelerateurAnoblisseurTribal,
    ("Anneau", "Seuil", "PompeAPV", "", True, True, False, True): AnneauDefensifSeuilPompeAPVAccelerateurAnoblisseurTribal,
    ("Armure", "Seuil", "PompeAPV", "", True, True, False, True): ArmureDefensifSeuilPompeAPVAccelerateurAnoblisseurTribal,
    ("Heaume", "Seuil", "PompeAPV", "", True, True, False, True): HeaumeDefensifSeuilPompeAPVAccelerateurAnoblisseurTribal,
    ("Anneau", "Valeur", "PompeAPV", "", True, True, False, True): AnneauDefensifValeurPompeAPVAccelerateurAnoblisseurTribal,
    ("Armure", "Valeur", "PompeAPV", "", True, True, False, True): ArmureDefensifValeurPompeAPVAccelerateurAnoblisseurTribal,
    ("Heaume", "Valeur", "PompeAPV", "", True, True, False, True): HeaumeDefensifValeurPompeAPVAccelerateurAnoblisseurTribal,
    ("Anneau", "", "RenforceRegenPV", "", True, True, False, True): AnneauRenforceRegenPVAccelerateurAnoblisseurTribal,
    ("Armure", "", "RenforceRegenPV", "", True, True, False, True): ArmureRenforceRegenPVAccelerateurAnoblisseurTribal,
    ("Heaume", "", "RenforceRegenPV", "", True, True, False, True): HeaumeRenforceRegenPVAccelerateurAnoblisseurTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "", True, True, False, True): AnneauDefensifPlafondRenforceRegenPVAccelerateurAnoblisseurTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "", True, True, False, True): ArmureDefensifPlafondRenforceRegenPVAccelerateurAnoblisseurTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "", True, True, False, True): HeaumeDefensifPlafondRenforceRegenPVAccelerateurAnoblisseurTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "", True, True, False, True): AnneauDefensifProportionRenforceRegenPVAccelerateurAnoblisseurTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "", True, True, False, True): ArmureDefensifProportionRenforceRegenPVAccelerateurAnoblisseurTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "", True, True, False, True): HeaumeDefensifProportionRenforceRegenPVAccelerateurAnoblisseurTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "", True, True, False, True): AnneauDefensifSeuilRenforceRegenPVAccelerateurAnoblisseurTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "", True, True, False, True): ArmureDefensifSeuilRenforceRegenPVAccelerateurAnoblisseurTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "", True, True, False, True): HeaumeDefensifSeuilRenforceRegenPVAccelerateurAnoblisseurTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "", True, True, False, True): AnneauDefensifValeurRenforceRegenPVAccelerateurAnoblisseurTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "", True, True, False, True): ArmureDefensifValeurRenforceRegenPVAccelerateurAnoblisseurTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "", True, True, False, True): HeaumeDefensifValeurRenforceRegenPVAccelerateurAnoblisseurTribal,
    ("Anneau", "", "", "PompeAPM", True, True, False, True): AnneauPompeAPMAccelerateurAnoblisseurTribal,
    ("Armure", "", "", "PompeAPM", True, True, False, True): ArmurePompeAPMAccelerateurAnoblisseurTribal,
    ("Heaume", "", "", "PompeAPM", True, True, False, True): HeaumePompeAPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Plafond", "", "PompeAPM", True, True, False, True): AnneauDefensifPlafondPompeAPMAccelerateurAnoblisseurTribal,
    ("Armure", "Plafond", "", "PompeAPM", True, True, False, True): ArmureDefensifPlafondPompeAPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Plafond", "", "PompeAPM", True, True, False, True): HeaumeDefensifPlafondPompeAPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Proportion", "", "PompeAPM", True, True, False, True): AnneauDefensifProportionPompeAPMAccelerateurAnoblisseurTribal,
    ("Armure", "Proportion", "", "PompeAPM", True, True, False, True): ArmureDefensifProportionPompeAPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Proportion", "", "PompeAPM", True, True, False, True): HeaumeDefensifProportionPompeAPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Seuil", "", "PompeAPM", True, True, False, True): AnneauDefensifSeuilPompeAPMAccelerateurAnoblisseurTribal,
    ("Armure", "Seuil", "", "PompeAPM", True, True, False, True): ArmureDefensifSeuilPompeAPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Seuil", "", "PompeAPM", True, True, False, True): HeaumeDefensifSeuilPompeAPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Valeur", "", "PompeAPM", True, True, False, True): AnneauDefensifValeurPompeAPMAccelerateurAnoblisseurTribal,
    ("Armure", "Valeur", "", "PompeAPM", True, True, False, True): ArmureDefensifValeurPompeAPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Valeur", "", "PompeAPM", True, True, False, True): HeaumeDefensifValeurPompeAPMAccelerateurAnoblisseurTribal,
    ("Anneau", "", "PompeAPV", "PompeAPM", True, True, False, True): AnneauPompeAPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Armure", "", "PompeAPV", "PompeAPM", True, True, False, True): ArmurePompeAPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Heaume", "", "PompeAPV", "PompeAPM", True, True, False, True): HeaumePompeAPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Plafond", "PompeAPV", "PompeAPM", True, True, False, True): AnneauDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Armure", "Plafond", "PompeAPV", "PompeAPM", True, True, False, True): ArmureDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Plafond", "PompeAPV", "PompeAPM", True, True, False, True): HeaumeDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Proportion", "PompeAPV", "PompeAPM", True, True, False, True): AnneauDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Armure", "Proportion", "PompeAPV", "PompeAPM", True, True, False, True): ArmureDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Proportion", "PompeAPV", "PompeAPM", True, True, False, True): HeaumeDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Seuil", "PompeAPV", "PompeAPM", True, True, False, True): AnneauDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Armure", "Seuil", "PompeAPV", "PompeAPM", True, True, False, True): ArmureDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Seuil", "PompeAPV", "PompeAPM", True, True, False, True): HeaumeDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Valeur", "PompeAPV", "PompeAPM", True, True, False, True): AnneauDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Armure", "Valeur", "PompeAPV", "PompeAPM", True, True, False, True): ArmureDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Valeur", "PompeAPV", "PompeAPM", True, True, False, True): HeaumeDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Anneau", "", "RenforceRegenPV", "PompeAPM", True, True, False, True): AnneauRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Armure", "", "RenforceRegenPV", "PompeAPM", True, True, False, True): ArmureRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Heaume", "", "RenforceRegenPV", "PompeAPM", True, True, False, True): HeaumeRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "PompeAPM", True, True, False, True): AnneauDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "PompeAPM", True, True, False, True): ArmureDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "PompeAPM", True, True, False, True): HeaumeDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "PompeAPM", True, True, False, True): AnneauDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "PompeAPM", True, True, False, True): ArmureDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "PompeAPM", True, True, False, True): HeaumeDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "PompeAPM", True, True, False, True): AnneauDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "PompeAPM", True, True, False, True): ArmureDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "PompeAPM", True, True, False, True): HeaumeDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "PompeAPM", True, True, False, True): AnneauDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "PompeAPM", True, True, False, True): ArmureDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "PompeAPM", True, True, False, True): HeaumeDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseurTribal,
    ("Anneau", "", "", "RenforceRegenPM", True, True, False, True): AnneauRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Armure", "", "", "RenforceRegenPM", True, True, False, True): ArmureRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Heaume", "", "", "RenforceRegenPM", True, True, False, True): HeaumeRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Plafond", "", "RenforceRegenPM", True, True, False, True): AnneauDefensifPlafondRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Armure", "Plafond", "", "RenforceRegenPM", True, True, False, True): ArmureDefensifPlafondRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Plafond", "", "RenforceRegenPM", True, True, False, True): HeaumeDefensifPlafondRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Proportion", "", "RenforceRegenPM", True, True, False, True): AnneauDefensifProportionRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Armure", "Proportion", "", "RenforceRegenPM", True, True, False, True): ArmureDefensifProportionRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Proportion", "", "RenforceRegenPM", True, True, False, True): HeaumeDefensifProportionRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Seuil", "", "RenforceRegenPM", True, True, False, True): AnneauDefensifSeuilRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Armure", "Seuil", "", "RenforceRegenPM", True, True, False, True): ArmureDefensifSeuilRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Seuil", "", "RenforceRegenPM", True, True, False, True): HeaumeDefensifSeuilRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Valeur", "", "RenforceRegenPM", True, True, False, True): AnneauDefensifValeurRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Armure", "Valeur", "", "RenforceRegenPM", True, True, False, True): ArmureDefensifValeurRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Valeur", "", "RenforceRegenPM", True, True, False, True): HeaumeDefensifValeurRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Anneau", "", "PompeAPV", "RenforceRegenPM", True, True, False, True): AnneauPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Armure", "", "PompeAPV", "RenforceRegenPM", True, True, False, True): ArmurePompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Heaume", "", "PompeAPV", "RenforceRegenPM", True, True, False, True): HeaumePompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Plafond", "PompeAPV", "RenforceRegenPM", True, True, False, True): AnneauDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Armure", "Plafond", "PompeAPV", "RenforceRegenPM", True, True, False, True): ArmureDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Plafond", "PompeAPV", "RenforceRegenPM", True, True, False, True): HeaumeDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Proportion", "PompeAPV", "RenforceRegenPM", True, True, False, True): AnneauDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Armure", "Proportion", "PompeAPV", "RenforceRegenPM", True, True, False, True): ArmureDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Proportion", "PompeAPV", "RenforceRegenPM", True, True, False, True): HeaumeDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Seuil", "PompeAPV", "RenforceRegenPM", True, True, False, True): AnneauDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Armure", "Seuil", "PompeAPV", "RenforceRegenPM", True, True, False, True): ArmureDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Seuil", "PompeAPV", "RenforceRegenPM", True, True, False, True): HeaumeDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Valeur", "PompeAPV", "RenforceRegenPM", True, True, False, True): AnneauDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Armure", "Valeur", "PompeAPV", "RenforceRegenPM", True, True, False, True): ArmureDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Valeur", "PompeAPV", "RenforceRegenPM", True, True, False, True): HeaumeDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Anneau", "", "RenforceRegenPV", "RenforceRegenPM", True, True, False, True): AnneauRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Armure", "", "RenforceRegenPV", "RenforceRegenPM", True, True, False, True): ArmureRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Heaume", "", "RenforceRegenPV", "RenforceRegenPM", True, True, False, True): HeaumeRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, True, False, True): AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, True, False, True): ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, True, False, True): HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, True, False, True): AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, True, False, True): ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, True, False, True): HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, True, False, True): AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, True, False, True): ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, True, False, True): HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, True, False, True): AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, True, False, True): ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, True, False, True): HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurTribal,
    ("Anneau", "", "", "", False, False, True, True): AnneauElementaireTribal,
    ("Armure", "", "", "", False, False, True, True): ArmureElementaireTribal,
    ("Heaume", "", "", "", False, False, True, True): HeaumeElementaireTribal,
    ("Anneau", "Plafond", "", "", False, False, True, True): AnneauDefensifPlafondElementaireTribal,
    ("Armure", "Plafond", "", "", False, False, True, True): ArmureDefensifPlafondElementaireTribal,
    ("Heaume", "Plafond", "", "", False, False, True, True): HeaumeDefensifPlafondElementaireTribal,
    ("Anneau", "Proportion", "", "", False, False, True, True): AnneauDefensifProportionElementaireTribal,
    ("Armure", "Proportion", "", "", False, False, True, True): ArmureDefensifProportionElementaireTribal,
    ("Heaume", "Proportion", "", "", False, False, True, True): HeaumeDefensifProportionElementaireTribal,
    ("Anneau", "Seuil", "", "", False, False, True, True): AnneauDefensifSeuilElementaireTribal,
    ("Armure", "Seuil", "", "", False, False, True, True): ArmureDefensifSeuilElementaireTribal,
    ("Heaume", "Seuil", "", "", False, False, True, True): HeaumeDefensifSeuilElementaireTribal,
    ("Anneau", "Valeur", "", "", False, False, True, True): AnneauDefensifValeurElementaireTribal,
    ("Armure", "Valeur", "", "", False, False, True, True): ArmureDefensifValeurElementaireTribal,
    ("Heaume", "Valeur", "", "", False, False, True, True): HeaumeDefensifValeurElementaireTribal,
    ("Anneau", "", "PompeAPV", "", False, False, True, True): AnneauPompeAPVElementaireTribal,
    ("Armure", "", "PompeAPV", "", False, False, True, True): ArmurePompeAPVElementaireTribal,
    ("Heaume", "", "PompeAPV", "", False, False, True, True): HeaumePompeAPVElementaireTribal,
    ("Anneau", "Plafond", "PompeAPV", "", False, False, True, True): AnneauDefensifPlafondPompeAPVElementaireTribal,
    ("Armure", "Plafond", "PompeAPV", "", False, False, True, True): ArmureDefensifPlafondPompeAPVElementaireTribal,
    ("Heaume", "Plafond", "PompeAPV", "", False, False, True, True): HeaumeDefensifPlafondPompeAPVElementaireTribal,
    ("Anneau", "Proportion", "PompeAPV", "", False, False, True, True): AnneauDefensifProportionPompeAPVElementaireTribal,
    ("Armure", "Proportion", "PompeAPV", "", False, False, True, True): ArmureDefensifProportionPompeAPVElementaireTribal,
    ("Heaume", "Proportion", "PompeAPV", "", False, False, True, True): HeaumeDefensifProportionPompeAPVElementaireTribal,
    ("Anneau", "Seuil", "PompeAPV", "", False, False, True, True): AnneauDefensifSeuilPompeAPVElementaireTribal,
    ("Armure", "Seuil", "PompeAPV", "", False, False, True, True): ArmureDefensifSeuilPompeAPVElementaireTribal,
    ("Heaume", "Seuil", "PompeAPV", "", False, False, True, True): HeaumeDefensifSeuilPompeAPVElementaireTribal,
    ("Anneau", "Valeur", "PompeAPV", "", False, False, True, True): AnneauDefensifValeurPompeAPVElementaireTribal,
    ("Armure", "Valeur", "PompeAPV", "", False, False, True, True): ArmureDefensifValeurPompeAPVElementaireTribal,
    ("Heaume", "Valeur", "PompeAPV", "", False, False, True, True): HeaumeDefensifValeurPompeAPVElementaireTribal,
    ("Anneau", "", "RenforceRegenPV", "", False, False, True, True): AnneauRenforceRegenPVElementaireTribal,
    ("Armure", "", "RenforceRegenPV", "", False, False, True, True): ArmureRenforceRegenPVElementaireTribal,
    ("Heaume", "", "RenforceRegenPV", "", False, False, True, True): HeaumeRenforceRegenPVElementaireTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "", False, False, True, True): AnneauDefensifPlafondRenforceRegenPVElementaireTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "", False, False, True, True): ArmureDefensifPlafondRenforceRegenPVElementaireTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "", False, False, True, True): HeaumeDefensifPlafondRenforceRegenPVElementaireTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "", False, False, True, True): AnneauDefensifProportionRenforceRegenPVElementaireTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "", False, False, True, True): ArmureDefensifProportionRenforceRegenPVElementaireTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "", False, False, True, True): HeaumeDefensifProportionRenforceRegenPVElementaireTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "", False, False, True, True): AnneauDefensifSeuilRenforceRegenPVElementaireTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "", False, False, True, True): ArmureDefensifSeuilRenforceRegenPVElementaireTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "", False, False, True, True): HeaumeDefensifSeuilRenforceRegenPVElementaireTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "", False, False, True, True): AnneauDefensifValeurRenforceRegenPVElementaireTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "", False, False, True, True): ArmureDefensifValeurRenforceRegenPVElementaireTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "", False, False, True, True): HeaumeDefensifValeurRenforceRegenPVElementaireTribal,
    ("Anneau", "", "", "PompeAPM", False, False, True, True): AnneauPompeAPMElementaireTribal,
    ("Armure", "", "", "PompeAPM", False, False, True, True): ArmurePompeAPMElementaireTribal,
    ("Heaume", "", "", "PompeAPM", False, False, True, True): HeaumePompeAPMElementaireTribal,
    ("Anneau", "Plafond", "", "PompeAPM", False, False, True, True): AnneauDefensifPlafondPompeAPMElementaireTribal,
    ("Armure", "Plafond", "", "PompeAPM", False, False, True, True): ArmureDefensifPlafondPompeAPMElementaireTribal,
    ("Heaume", "Plafond", "", "PompeAPM", False, False, True, True): HeaumeDefensifPlafondPompeAPMElementaireTribal,
    ("Anneau", "Proportion", "", "PompeAPM", False, False, True, True): AnneauDefensifProportionPompeAPMElementaireTribal,
    ("Armure", "Proportion", "", "PompeAPM", False, False, True, True): ArmureDefensifProportionPompeAPMElementaireTribal,
    ("Heaume", "Proportion", "", "PompeAPM", False, False, True, True): HeaumeDefensifProportionPompeAPMElementaireTribal,
    ("Anneau", "Seuil", "", "PompeAPM", False, False, True, True): AnneauDefensifSeuilPompeAPMElementaireTribal,
    ("Armure", "Seuil", "", "PompeAPM", False, False, True, True): ArmureDefensifSeuilPompeAPMElementaireTribal,
    ("Heaume", "Seuil", "", "PompeAPM", False, False, True, True): HeaumeDefensifSeuilPompeAPMElementaireTribal,
    ("Anneau", "Valeur", "", "PompeAPM", False, False, True, True): AnneauDefensifValeurPompeAPMElementaireTribal,
    ("Armure", "Valeur", "", "PompeAPM", False, False, True, True): ArmureDefensifValeurPompeAPMElementaireTribal,
    ("Heaume", "Valeur", "", "PompeAPM", False, False, True, True): HeaumeDefensifValeurPompeAPMElementaireTribal,
    ("Anneau", "", "PompeAPV", "PompeAPM", False, False, True, True): AnneauPompeAPVPompeAPMElementaireTribal,
    ("Armure", "", "PompeAPV", "PompeAPM", False, False, True, True): ArmurePompeAPVPompeAPMElementaireTribal,
    ("Heaume", "", "PompeAPV", "PompeAPM", False, False, True, True): HeaumePompeAPVPompeAPMElementaireTribal,
    ("Anneau", "Plafond", "PompeAPV", "PompeAPM", False, False, True, True): AnneauDefensifPlafondPompeAPVPompeAPMElementaireTribal,
    ("Armure", "Plafond", "PompeAPV", "PompeAPM", False, False, True, True): ArmureDefensifPlafondPompeAPVPompeAPMElementaireTribal,
    ("Heaume", "Plafond", "PompeAPV", "PompeAPM", False, False, True, True): HeaumeDefensifPlafondPompeAPVPompeAPMElementaireTribal,
    ("Anneau", "Proportion", "PompeAPV", "PompeAPM", False, False, True, True): AnneauDefensifProportionPompeAPVPompeAPMElementaireTribal,
    ("Armure", "Proportion", "PompeAPV", "PompeAPM", False, False, True, True): ArmureDefensifProportionPompeAPVPompeAPMElementaireTribal,
    ("Heaume", "Proportion", "PompeAPV", "PompeAPM", False, False, True, True): HeaumeDefensifProportionPompeAPVPompeAPMElementaireTribal,
    ("Anneau", "Seuil", "PompeAPV", "PompeAPM", False, False, True, True): AnneauDefensifSeuilPompeAPVPompeAPMElementaireTribal,
    ("Armure", "Seuil", "PompeAPV", "PompeAPM", False, False, True, True): ArmureDefensifSeuilPompeAPVPompeAPMElementaireTribal,
    ("Heaume", "Seuil", "PompeAPV", "PompeAPM", False, False, True, True): HeaumeDefensifSeuilPompeAPVPompeAPMElementaireTribal,
    ("Anneau", "Valeur", "PompeAPV", "PompeAPM", False, False, True, True): AnneauDefensifValeurPompeAPVPompeAPMElementaireTribal,
    ("Armure", "Valeur", "PompeAPV", "PompeAPM", False, False, True, True): ArmureDefensifValeurPompeAPVPompeAPMElementaireTribal,
    ("Heaume", "Valeur", "PompeAPV", "PompeAPM", False, False, True, True): HeaumeDefensifValeurPompeAPVPompeAPMElementaireTribal,
    ("Anneau", "", "RenforceRegenPV", "PompeAPM", False, False, True, True): AnneauRenforceRegenPVPompeAPMElementaireTribal,
    ("Armure", "", "RenforceRegenPV", "PompeAPM", False, False, True, True): ArmureRenforceRegenPVPompeAPMElementaireTribal,
    ("Heaume", "", "RenforceRegenPV", "PompeAPM", False, False, True, True): HeaumeRenforceRegenPVPompeAPMElementaireTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "PompeAPM", False, False, True, True): AnneauDefensifPlafondRenforceRegenPVPompeAPMElementaireTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "PompeAPM", False, False, True, True): ArmureDefensifPlafondRenforceRegenPVPompeAPMElementaireTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "PompeAPM", False, False, True, True): HeaumeDefensifPlafondRenforceRegenPVPompeAPMElementaireTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "PompeAPM", False, False, True, True): AnneauDefensifProportionRenforceRegenPVPompeAPMElementaireTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "PompeAPM", False, False, True, True): ArmureDefensifProportionRenforceRegenPVPompeAPMElementaireTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "PompeAPM", False, False, True, True): HeaumeDefensifProportionRenforceRegenPVPompeAPMElementaireTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "PompeAPM", False, False, True, True): AnneauDefensifSeuilRenforceRegenPVPompeAPMElementaireTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "PompeAPM", False, False, True, True): ArmureDefensifSeuilRenforceRegenPVPompeAPMElementaireTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "PompeAPM", False, False, True, True): HeaumeDefensifSeuilRenforceRegenPVPompeAPMElementaireTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "PompeAPM", False, False, True, True): AnneauDefensifValeurRenforceRegenPVPompeAPMElementaireTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "PompeAPM", False, False, True, True): ArmureDefensifValeurRenforceRegenPVPompeAPMElementaireTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "PompeAPM", False, False, True, True): HeaumeDefensifValeurRenforceRegenPVPompeAPMElementaireTribal,
    ("Anneau", "", "", "RenforceRegenPM", False, False, True, True): AnneauRenforceRegenPMElementaireTribal,
    ("Armure", "", "", "RenforceRegenPM", False, False, True, True): ArmureRenforceRegenPMElementaireTribal,
    ("Heaume", "", "", "RenforceRegenPM", False, False, True, True): HeaumeRenforceRegenPMElementaireTribal,
    ("Anneau", "Plafond", "", "RenforceRegenPM", False, False, True, True): AnneauDefensifPlafondRenforceRegenPMElementaireTribal,
    ("Armure", "Plafond", "", "RenforceRegenPM", False, False, True, True): ArmureDefensifPlafondRenforceRegenPMElementaireTribal,
    ("Heaume", "Plafond", "", "RenforceRegenPM", False, False, True, True): HeaumeDefensifPlafondRenforceRegenPMElementaireTribal,
    ("Anneau", "Proportion", "", "RenforceRegenPM", False, False, True, True): AnneauDefensifProportionRenforceRegenPMElementaireTribal,
    ("Armure", "Proportion", "", "RenforceRegenPM", False, False, True, True): ArmureDefensifProportionRenforceRegenPMElementaireTribal,
    ("Heaume", "Proportion", "", "RenforceRegenPM", False, False, True, True): HeaumeDefensifProportionRenforceRegenPMElementaireTribal,
    ("Anneau", "Seuil", "", "RenforceRegenPM", False, False, True, True): AnneauDefensifSeuilRenforceRegenPMElementaireTribal,
    ("Armure", "Seuil", "", "RenforceRegenPM", False, False, True, True): ArmureDefensifSeuilRenforceRegenPMElementaireTribal,
    ("Heaume", "Seuil", "", "RenforceRegenPM", False, False, True, True): HeaumeDefensifSeuilRenforceRegenPMElementaireTribal,
    ("Anneau", "Valeur", "", "RenforceRegenPM", False, False, True, True): AnneauDefensifValeurRenforceRegenPMElementaireTribal,
    ("Armure", "Valeur", "", "RenforceRegenPM", False, False, True, True): ArmureDefensifValeurRenforceRegenPMElementaireTribal,
    ("Heaume", "Valeur", "", "RenforceRegenPM", False, False, True, True): HeaumeDefensifValeurRenforceRegenPMElementaireTribal,
    ("Anneau", "", "PompeAPV", "RenforceRegenPM", False, False, True, True): AnneauPompeAPVRenforceRegenPMElementaireTribal,
    ("Armure", "", "PompeAPV", "RenforceRegenPM", False, False, True, True): ArmurePompeAPVRenforceRegenPMElementaireTribal,
    ("Heaume", "", "PompeAPV", "RenforceRegenPM", False, False, True, True): HeaumePompeAPVRenforceRegenPMElementaireTribal,
    ("Anneau", "Plafond", "PompeAPV", "RenforceRegenPM", False, False, True, True): AnneauDefensifPlafondPompeAPVRenforceRegenPMElementaireTribal,
    ("Armure", "Plafond", "PompeAPV", "RenforceRegenPM", False, False, True, True): ArmureDefensifPlafondPompeAPVRenforceRegenPMElementaireTribal,
    ("Heaume", "Plafond", "PompeAPV", "RenforceRegenPM", False, False, True, True): HeaumeDefensifPlafondPompeAPVRenforceRegenPMElementaireTribal,
    ("Anneau", "Proportion", "PompeAPV", "RenforceRegenPM", False, False, True, True): AnneauDefensifProportionPompeAPVRenforceRegenPMElementaireTribal,
    ("Armure", "Proportion", "PompeAPV", "RenforceRegenPM", False, False, True, True): ArmureDefensifProportionPompeAPVRenforceRegenPMElementaireTribal,
    ("Heaume", "Proportion", "PompeAPV", "RenforceRegenPM", False, False, True, True): HeaumeDefensifProportionPompeAPVRenforceRegenPMElementaireTribal,
    ("Anneau", "Seuil", "PompeAPV", "RenforceRegenPM", False, False, True, True): AnneauDefensifSeuilPompeAPVRenforceRegenPMElementaireTribal,
    ("Armure", "Seuil", "PompeAPV", "RenforceRegenPM", False, False, True, True): ArmureDefensifSeuilPompeAPVRenforceRegenPMElementaireTribal,
    ("Heaume", "Seuil", "PompeAPV", "RenforceRegenPM", False, False, True, True): HeaumeDefensifSeuilPompeAPVRenforceRegenPMElementaireTribal,
    ("Anneau", "Valeur", "PompeAPV", "RenforceRegenPM", False, False, True, True): AnneauDefensifValeurPompeAPVRenforceRegenPMElementaireTribal,
    ("Armure", "Valeur", "PompeAPV", "RenforceRegenPM", False, False, True, True): ArmureDefensifValeurPompeAPVRenforceRegenPMElementaireTribal,
    ("Heaume", "Valeur", "PompeAPV", "RenforceRegenPM", False, False, True, True): HeaumeDefensifValeurPompeAPVRenforceRegenPMElementaireTribal,
    ("Anneau", "", "RenforceRegenPV", "RenforceRegenPM", False, False, True, True): AnneauRenforceRegenPVRenforceRegenPMElementaireTribal,
    ("Armure", "", "RenforceRegenPV", "RenforceRegenPM", False, False, True, True): ArmureRenforceRegenPVRenforceRegenPMElementaireTribal,
    ("Heaume", "", "RenforceRegenPV", "RenforceRegenPM", False, False, True, True): HeaumeRenforceRegenPVRenforceRegenPMElementaireTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, False, True, True): AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMElementaireTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, False, True, True): ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMElementaireTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, False, True, True): HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMElementaireTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, False, True, True): AnneauDefensifProportionRenforceRegenPVRenforceRegenPMElementaireTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, False, True, True): ArmureDefensifProportionRenforceRegenPVRenforceRegenPMElementaireTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, False, True, True): HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMElementaireTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, False, True, True): AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMElementaireTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, False, True, True): ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMElementaireTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, False, True, True): HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMElementaireTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, False, True, True): AnneauDefensifValeurRenforceRegenPVRenforceRegenPMElementaireTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, False, True, True): ArmureDefensifValeurRenforceRegenPVRenforceRegenPMElementaireTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, False, True, True): HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMElementaireTribal,
    ("Anneau", "", "", "", True, False, True, True): AnneauAccelerateurElementaireTribal,
    ("Armure", "", "", "", True, False, True, True): ArmureAccelerateurElementaireTribal,
    ("Heaume", "", "", "", True, False, True, True): HeaumeAccelerateurElementaireTribal,
    ("Anneau", "Plafond", "", "", True, False, True, True): AnneauDefensifPlafondAccelerateurElementaireTribal,
    ("Armure", "Plafond", "", "", True, False, True, True): ArmureDefensifPlafondAccelerateurElementaireTribal,
    ("Heaume", "Plafond", "", "", True, False, True, True): HeaumeDefensifPlafondAccelerateurElementaireTribal,
    ("Anneau", "Proportion", "", "", True, False, True, True): AnneauDefensifProportionAccelerateurElementaireTribal,
    ("Armure", "Proportion", "", "", True, False, True, True): ArmureDefensifProportionAccelerateurElementaireTribal,
    ("Heaume", "Proportion", "", "", True, False, True, True): HeaumeDefensifProportionAccelerateurElementaireTribal,
    ("Anneau", "Seuil", "", "", True, False, True, True): AnneauDefensifSeuilAccelerateurElementaireTribal,
    ("Armure", "Seuil", "", "", True, False, True, True): ArmureDefensifSeuilAccelerateurElementaireTribal,
    ("Heaume", "Seuil", "", "", True, False, True, True): HeaumeDefensifSeuilAccelerateurElementaireTribal,
    ("Anneau", "Valeur", "", "", True, False, True, True): AnneauDefensifValeurAccelerateurElementaireTribal,
    ("Armure", "Valeur", "", "", True, False, True, True): ArmureDefensifValeurAccelerateurElementaireTribal,
    ("Heaume", "Valeur", "", "", True, False, True, True): HeaumeDefensifValeurAccelerateurElementaireTribal,
    ("Anneau", "", "PompeAPV", "", True, False, True, True): AnneauPompeAPVAccelerateurElementaireTribal,
    ("Armure", "", "PompeAPV", "", True, False, True, True): ArmurePompeAPVAccelerateurElementaireTribal,
    ("Heaume", "", "PompeAPV", "", True, False, True, True): HeaumePompeAPVAccelerateurElementaireTribal,
    ("Anneau", "Plafond", "PompeAPV", "", True, False, True, True): AnneauDefensifPlafondPompeAPVAccelerateurElementaireTribal,
    ("Armure", "Plafond", "PompeAPV", "", True, False, True, True): ArmureDefensifPlafondPompeAPVAccelerateurElementaireTribal,
    ("Heaume", "Plafond", "PompeAPV", "", True, False, True, True): HeaumeDefensifPlafondPompeAPVAccelerateurElementaireTribal,
    ("Anneau", "Proportion", "PompeAPV", "", True, False, True, True): AnneauDefensifProportionPompeAPVAccelerateurElementaireTribal,
    ("Armure", "Proportion", "PompeAPV", "", True, False, True, True): ArmureDefensifProportionPompeAPVAccelerateurElementaireTribal,
    ("Heaume", "Proportion", "PompeAPV", "", True, False, True, True): HeaumeDefensifProportionPompeAPVAccelerateurElementaireTribal,
    ("Anneau", "Seuil", "PompeAPV", "", True, False, True, True): AnneauDefensifSeuilPompeAPVAccelerateurElementaireTribal,
    ("Armure", "Seuil", "PompeAPV", "", True, False, True, True): ArmureDefensifSeuilPompeAPVAccelerateurElementaireTribal,
    ("Heaume", "Seuil", "PompeAPV", "", True, False, True, True): HeaumeDefensifSeuilPompeAPVAccelerateurElementaireTribal,
    ("Anneau", "Valeur", "PompeAPV", "", True, False, True, True): AnneauDefensifValeurPompeAPVAccelerateurElementaireTribal,
    ("Armure", "Valeur", "PompeAPV", "", True, False, True, True): ArmureDefensifValeurPompeAPVAccelerateurElementaireTribal,
    ("Heaume", "Valeur", "PompeAPV", "", True, False, True, True): HeaumeDefensifValeurPompeAPVAccelerateurElementaireTribal,
    ("Anneau", "", "RenforceRegenPV", "", True, False, True, True): AnneauRenforceRegenPVAccelerateurElementaireTribal,
    ("Armure", "", "RenforceRegenPV", "", True, False, True, True): ArmureRenforceRegenPVAccelerateurElementaireTribal,
    ("Heaume", "", "RenforceRegenPV", "", True, False, True, True): HeaumeRenforceRegenPVAccelerateurElementaireTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "", True, False, True, True): AnneauDefensifPlafondRenforceRegenPVAccelerateurElementaireTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "", True, False, True, True): ArmureDefensifPlafondRenforceRegenPVAccelerateurElementaireTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "", True, False, True, True): HeaumeDefensifPlafondRenforceRegenPVAccelerateurElementaireTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "", True, False, True, True): AnneauDefensifProportionRenforceRegenPVAccelerateurElementaireTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "", True, False, True, True): ArmureDefensifProportionRenforceRegenPVAccelerateurElementaireTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "", True, False, True, True): HeaumeDefensifProportionRenforceRegenPVAccelerateurElementaireTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "", True, False, True, True): AnneauDefensifSeuilRenforceRegenPVAccelerateurElementaireTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "", True, False, True, True): ArmureDefensifSeuilRenforceRegenPVAccelerateurElementaireTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "", True, False, True, True): HeaumeDefensifSeuilRenforceRegenPVAccelerateurElementaireTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "", True, False, True, True): AnneauDefensifValeurRenforceRegenPVAccelerateurElementaireTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "", True, False, True, True): ArmureDefensifValeurRenforceRegenPVAccelerateurElementaireTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "", True, False, True, True): HeaumeDefensifValeurRenforceRegenPVAccelerateurElementaireTribal,
    ("Anneau", "", "", "PompeAPM", True, False, True, True): AnneauPompeAPMAccelerateurElementaireTribal,
    ("Armure", "", "", "PompeAPM", True, False, True, True): ArmurePompeAPMAccelerateurElementaireTribal,
    ("Heaume", "", "", "PompeAPM", True, False, True, True): HeaumePompeAPMAccelerateurElementaireTribal,
    ("Anneau", "Plafond", "", "PompeAPM", True, False, True, True): AnneauDefensifPlafondPompeAPMAccelerateurElementaireTribal,
    ("Armure", "Plafond", "", "PompeAPM", True, False, True, True): ArmureDefensifPlafondPompeAPMAccelerateurElementaireTribal,
    ("Heaume", "Plafond", "", "PompeAPM", True, False, True, True): HeaumeDefensifPlafondPompeAPMAccelerateurElementaireTribal,
    ("Anneau", "Proportion", "", "PompeAPM", True, False, True, True): AnneauDefensifProportionPompeAPMAccelerateurElementaireTribal,
    ("Armure", "Proportion", "", "PompeAPM", True, False, True, True): ArmureDefensifProportionPompeAPMAccelerateurElementaireTribal,
    ("Heaume", "Proportion", "", "PompeAPM", True, False, True, True): HeaumeDefensifProportionPompeAPMAccelerateurElementaireTribal,
    ("Anneau", "Seuil", "", "PompeAPM", True, False, True, True): AnneauDefensifSeuilPompeAPMAccelerateurElementaireTribal,
    ("Armure", "Seuil", "", "PompeAPM", True, False, True, True): ArmureDefensifSeuilPompeAPMAccelerateurElementaireTribal,
    ("Heaume", "Seuil", "", "PompeAPM", True, False, True, True): HeaumeDefensifSeuilPompeAPMAccelerateurElementaireTribal,
    ("Anneau", "Valeur", "", "PompeAPM", True, False, True, True): AnneauDefensifValeurPompeAPMAccelerateurElementaireTribal,
    ("Armure", "Valeur", "", "PompeAPM", True, False, True, True): ArmureDefensifValeurPompeAPMAccelerateurElementaireTribal,
    ("Heaume", "Valeur", "", "PompeAPM", True, False, True, True): HeaumeDefensifValeurPompeAPMAccelerateurElementaireTribal,
    ("Anneau", "", "PompeAPV", "PompeAPM", True, False, True, True): AnneauPompeAPVPompeAPMAccelerateurElementaireTribal,
    ("Armure", "", "PompeAPV", "PompeAPM", True, False, True, True): ArmurePompeAPVPompeAPMAccelerateurElementaireTribal,
    ("Heaume", "", "PompeAPV", "PompeAPM", True, False, True, True): HeaumePompeAPVPompeAPMAccelerateurElementaireTribal,
    ("Anneau", "Plafond", "PompeAPV", "PompeAPM", True, False, True, True): AnneauDefensifPlafondPompeAPVPompeAPMAccelerateurElementaireTribal,
    ("Armure", "Plafond", "PompeAPV", "PompeAPM", True, False, True, True): ArmureDefensifPlafondPompeAPVPompeAPMAccelerateurElementaireTribal,
    ("Heaume", "Plafond", "PompeAPV", "PompeAPM", True, False, True, True): HeaumeDefensifPlafondPompeAPVPompeAPMAccelerateurElementaireTribal,
    ("Anneau", "Proportion", "PompeAPV", "PompeAPM", True, False, True, True): AnneauDefensifProportionPompeAPVPompeAPMAccelerateurElementaireTribal,
    ("Armure", "Proportion", "PompeAPV", "PompeAPM", True, False, True, True): ArmureDefensifProportionPompeAPVPompeAPMAccelerateurElementaireTribal,
    ("Heaume", "Proportion", "PompeAPV", "PompeAPM", True, False, True, True): HeaumeDefensifProportionPompeAPVPompeAPMAccelerateurElementaireTribal,
    ("Anneau", "Seuil", "PompeAPV", "PompeAPM", True, False, True, True): AnneauDefensifSeuilPompeAPVPompeAPMAccelerateurElementaireTribal,
    ("Armure", "Seuil", "PompeAPV", "PompeAPM", True, False, True, True): ArmureDefensifSeuilPompeAPVPompeAPMAccelerateurElementaireTribal,
    ("Heaume", "Seuil", "PompeAPV", "PompeAPM", True, False, True, True): HeaumeDefensifSeuilPompeAPVPompeAPMAccelerateurElementaireTribal,
    ("Anneau", "Valeur", "PompeAPV", "PompeAPM", True, False, True, True): AnneauDefensifValeurPompeAPVPompeAPMAccelerateurElementaireTribal,
    ("Armure", "Valeur", "PompeAPV", "PompeAPM", True, False, True, True): ArmureDefensifValeurPompeAPVPompeAPMAccelerateurElementaireTribal,
    ("Heaume", "Valeur", "PompeAPV", "PompeAPM", True, False, True, True): HeaumeDefensifValeurPompeAPVPompeAPMAccelerateurElementaireTribal,
    ("Anneau", "", "RenforceRegenPV", "PompeAPM", True, False, True, True): AnneauRenforceRegenPVPompeAPMAccelerateurElementaireTribal,
    ("Armure", "", "RenforceRegenPV", "PompeAPM", True, False, True, True): ArmureRenforceRegenPVPompeAPMAccelerateurElementaireTribal,
    ("Heaume", "", "RenforceRegenPV", "PompeAPM", True, False, True, True): HeaumeRenforceRegenPVPompeAPMAccelerateurElementaireTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "PompeAPM", True, False, True, True): AnneauDefensifPlafondRenforceRegenPVPompeAPMAccelerateurElementaireTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "PompeAPM", True, False, True, True): ArmureDefensifPlafondRenforceRegenPVPompeAPMAccelerateurElementaireTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "PompeAPM", True, False, True, True): HeaumeDefensifPlafondRenforceRegenPVPompeAPMAccelerateurElementaireTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "PompeAPM", True, False, True, True): AnneauDefensifProportionRenforceRegenPVPompeAPMAccelerateurElementaireTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "PompeAPM", True, False, True, True): ArmureDefensifProportionRenforceRegenPVPompeAPMAccelerateurElementaireTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "PompeAPM", True, False, True, True): HeaumeDefensifProportionRenforceRegenPVPompeAPMAccelerateurElementaireTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "PompeAPM", True, False, True, True): AnneauDefensifSeuilRenforceRegenPVPompeAPMAccelerateurElementaireTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "PompeAPM", True, False, True, True): ArmureDefensifSeuilRenforceRegenPVPompeAPMAccelerateurElementaireTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "PompeAPM", True, False, True, True): HeaumeDefensifSeuilRenforceRegenPVPompeAPMAccelerateurElementaireTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "PompeAPM", True, False, True, True): AnneauDefensifValeurRenforceRegenPVPompeAPMAccelerateurElementaireTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "PompeAPM", True, False, True, True): ArmureDefensifValeurRenforceRegenPVPompeAPMAccelerateurElementaireTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "PompeAPM", True, False, True, True): HeaumeDefensifValeurRenforceRegenPVPompeAPMAccelerateurElementaireTribal,
    ("Anneau", "", "", "RenforceRegenPM", True, False, True, True): AnneauRenforceRegenPMAccelerateurElementaireTribal,
    ("Armure", "", "", "RenforceRegenPM", True, False, True, True): ArmureRenforceRegenPMAccelerateurElementaireTribal,
    ("Heaume", "", "", "RenforceRegenPM", True, False, True, True): HeaumeRenforceRegenPMAccelerateurElementaireTribal,
    ("Anneau", "Plafond", "", "RenforceRegenPM", True, False, True, True): AnneauDefensifPlafondRenforceRegenPMAccelerateurElementaireTribal,
    ("Armure", "Plafond", "", "RenforceRegenPM", True, False, True, True): ArmureDefensifPlafondRenforceRegenPMAccelerateurElementaireTribal,
    ("Heaume", "Plafond", "", "RenforceRegenPM", True, False, True, True): HeaumeDefensifPlafondRenforceRegenPMAccelerateurElementaireTribal,
    ("Anneau", "Proportion", "", "RenforceRegenPM", True, False, True, True): AnneauDefensifProportionRenforceRegenPMAccelerateurElementaireTribal,
    ("Armure", "Proportion", "", "RenforceRegenPM", True, False, True, True): ArmureDefensifProportionRenforceRegenPMAccelerateurElementaireTribal,
    ("Heaume", "Proportion", "", "RenforceRegenPM", True, False, True, True): HeaumeDefensifProportionRenforceRegenPMAccelerateurElementaireTribal,
    ("Anneau", "Seuil", "", "RenforceRegenPM", True, False, True, True): AnneauDefensifSeuilRenforceRegenPMAccelerateurElementaireTribal,
    ("Armure", "Seuil", "", "RenforceRegenPM", True, False, True, True): ArmureDefensifSeuilRenforceRegenPMAccelerateurElementaireTribal,
    ("Heaume", "Seuil", "", "RenforceRegenPM", True, False, True, True): HeaumeDefensifSeuilRenforceRegenPMAccelerateurElementaireTribal,
    ("Anneau", "Valeur", "", "RenforceRegenPM", True, False, True, True): AnneauDefensifValeurRenforceRegenPMAccelerateurElementaireTribal,
    ("Armure", "Valeur", "", "RenforceRegenPM", True, False, True, True): ArmureDefensifValeurRenforceRegenPMAccelerateurElementaireTribal,
    ("Heaume", "Valeur", "", "RenforceRegenPM", True, False, True, True): HeaumeDefensifValeurRenforceRegenPMAccelerateurElementaireTribal,
    ("Anneau", "", "PompeAPV", "RenforceRegenPM", True, False, True, True): AnneauPompeAPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Armure", "", "PompeAPV", "RenforceRegenPM", True, False, True, True): ArmurePompeAPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Heaume", "", "PompeAPV", "RenforceRegenPM", True, False, True, True): HeaumePompeAPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Anneau", "Plafond", "PompeAPV", "RenforceRegenPM", True, False, True, True): AnneauDefensifPlafondPompeAPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Armure", "Plafond", "PompeAPV", "RenforceRegenPM", True, False, True, True): ArmureDefensifPlafondPompeAPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Heaume", "Plafond", "PompeAPV", "RenforceRegenPM", True, False, True, True): HeaumeDefensifPlafondPompeAPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Anneau", "Proportion", "PompeAPV", "RenforceRegenPM", True, False, True, True): AnneauDefensifProportionPompeAPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Armure", "Proportion", "PompeAPV", "RenforceRegenPM", True, False, True, True): ArmureDefensifProportionPompeAPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Heaume", "Proportion", "PompeAPV", "RenforceRegenPM", True, False, True, True): HeaumeDefensifProportionPompeAPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Anneau", "Seuil", "PompeAPV", "RenforceRegenPM", True, False, True, True): AnneauDefensifSeuilPompeAPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Armure", "Seuil", "PompeAPV", "RenforceRegenPM", True, False, True, True): ArmureDefensifSeuilPompeAPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Heaume", "Seuil", "PompeAPV", "RenforceRegenPM", True, False, True, True): HeaumeDefensifSeuilPompeAPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Anneau", "Valeur", "PompeAPV", "RenforceRegenPM", True, False, True, True): AnneauDefensifValeurPompeAPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Armure", "Valeur", "PompeAPV", "RenforceRegenPM", True, False, True, True): ArmureDefensifValeurPompeAPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Heaume", "Valeur", "PompeAPV", "RenforceRegenPM", True, False, True, True): HeaumeDefensifValeurPompeAPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Anneau", "", "RenforceRegenPV", "RenforceRegenPM", True, False, True, True): AnneauRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Armure", "", "RenforceRegenPV", "RenforceRegenPM", True, False, True, True): ArmureRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Heaume", "", "RenforceRegenPV", "RenforceRegenPM", True, False, True, True): HeaumeRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, False, True, True): AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, False, True, True): ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, False, True, True): HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, False, True, True): AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, False, True, True): ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, False, True, True): HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, False, True, True): AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, False, True, True): ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, False, True, True): HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, False, True, True): AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, False, True, True): ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, False, True, True): HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurElementaireTribal,
    ("Anneau", "", "", "", False, True, True, True): AnneauAnoblisseurElementaireTribal,
    ("Armure", "", "", "", False, True, True, True): ArmureAnoblisseurElementaireTribal,
    ("Heaume", "", "", "", False, True, True, True): HeaumeAnoblisseurElementaireTribal,
    ("Anneau", "Plafond", "", "", False, True, True, True): AnneauDefensifPlafondAnoblisseurElementaireTribal,
    ("Armure", "Plafond", "", "", False, True, True, True): ArmureDefensifPlafondAnoblisseurElementaireTribal,
    ("Heaume", "Plafond", "", "", False, True, True, True): HeaumeDefensifPlafondAnoblisseurElementaireTribal,
    ("Anneau", "Proportion", "", "", False, True, True, True): AnneauDefensifProportionAnoblisseurElementaireTribal,
    ("Armure", "Proportion", "", "", False, True, True, True): ArmureDefensifProportionAnoblisseurElementaireTribal,
    ("Heaume", "Proportion", "", "", False, True, True, True): HeaumeDefensifProportionAnoblisseurElementaireTribal,
    ("Anneau", "Seuil", "", "", False, True, True, True): AnneauDefensifSeuilAnoblisseurElementaireTribal,
    ("Armure", "Seuil", "", "", False, True, True, True): ArmureDefensifSeuilAnoblisseurElementaireTribal,
    ("Heaume", "Seuil", "", "", False, True, True, True): HeaumeDefensifSeuilAnoblisseurElementaireTribal,
    ("Anneau", "Valeur", "", "", False, True, True, True): AnneauDefensifValeurAnoblisseurElementaireTribal,
    ("Armure", "Valeur", "", "", False, True, True, True): ArmureDefensifValeurAnoblisseurElementaireTribal,
    ("Heaume", "Valeur", "", "", False, True, True, True): HeaumeDefensifValeurAnoblisseurElementaireTribal,
    ("Anneau", "", "PompeAPV", "", False, True, True, True): AnneauPompeAPVAnoblisseurElementaireTribal,
    ("Armure", "", "PompeAPV", "", False, True, True, True): ArmurePompeAPVAnoblisseurElementaireTribal,
    ("Heaume", "", "PompeAPV", "", False, True, True, True): HeaumePompeAPVAnoblisseurElementaireTribal,
    ("Anneau", "Plafond", "PompeAPV", "", False, True, True, True): AnneauDefensifPlafondPompeAPVAnoblisseurElementaireTribal,
    ("Armure", "Plafond", "PompeAPV", "", False, True, True, True): ArmureDefensifPlafondPompeAPVAnoblisseurElementaireTribal,
    ("Heaume", "Plafond", "PompeAPV", "", False, True, True, True): HeaumeDefensifPlafondPompeAPVAnoblisseurElementaireTribal,
    ("Anneau", "Proportion", "PompeAPV", "", False, True, True, True): AnneauDefensifProportionPompeAPVAnoblisseurElementaireTribal,
    ("Armure", "Proportion", "PompeAPV", "", False, True, True, True): ArmureDefensifProportionPompeAPVAnoblisseurElementaireTribal,
    ("Heaume", "Proportion", "PompeAPV", "", False, True, True, True): HeaumeDefensifProportionPompeAPVAnoblisseurElementaireTribal,
    ("Anneau", "Seuil", "PompeAPV", "", False, True, True, True): AnneauDefensifSeuilPompeAPVAnoblisseurElementaireTribal,
    ("Armure", "Seuil", "PompeAPV", "", False, True, True, True): ArmureDefensifSeuilPompeAPVAnoblisseurElementaireTribal,
    ("Heaume", "Seuil", "PompeAPV", "", False, True, True, True): HeaumeDefensifSeuilPompeAPVAnoblisseurElementaireTribal,
    ("Anneau", "Valeur", "PompeAPV", "", False, True, True, True): AnneauDefensifValeurPompeAPVAnoblisseurElementaireTribal,
    ("Armure", "Valeur", "PompeAPV", "", False, True, True, True): ArmureDefensifValeurPompeAPVAnoblisseurElementaireTribal,
    ("Heaume", "Valeur", "PompeAPV", "", False, True, True, True): HeaumeDefensifValeurPompeAPVAnoblisseurElementaireTribal,
    ("Anneau", "", "RenforceRegenPV", "", False, True, True, True): AnneauRenforceRegenPVAnoblisseurElementaireTribal,
    ("Armure", "", "RenforceRegenPV", "", False, True, True, True): ArmureRenforceRegenPVAnoblisseurElementaireTribal,
    ("Heaume", "", "RenforceRegenPV", "", False, True, True, True): HeaumeRenforceRegenPVAnoblisseurElementaireTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "", False, True, True, True): AnneauDefensifPlafondRenforceRegenPVAnoblisseurElementaireTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "", False, True, True, True): ArmureDefensifPlafondRenforceRegenPVAnoblisseurElementaireTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "", False, True, True, True): HeaumeDefensifPlafondRenforceRegenPVAnoblisseurElementaireTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "", False, True, True, True): AnneauDefensifProportionRenforceRegenPVAnoblisseurElementaireTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "", False, True, True, True): ArmureDefensifProportionRenforceRegenPVAnoblisseurElementaireTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "", False, True, True, True): HeaumeDefensifProportionRenforceRegenPVAnoblisseurElementaireTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "", False, True, True, True): AnneauDefensifSeuilRenforceRegenPVAnoblisseurElementaireTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "", False, True, True, True): ArmureDefensifSeuilRenforceRegenPVAnoblisseurElementaireTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "", False, True, True, True): HeaumeDefensifSeuilRenforceRegenPVAnoblisseurElementaireTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "", False, True, True, True): AnneauDefensifValeurRenforceRegenPVAnoblisseurElementaireTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "", False, True, True, True): ArmureDefensifValeurRenforceRegenPVAnoblisseurElementaireTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "", False, True, True, True): HeaumeDefensifValeurRenforceRegenPVAnoblisseurElementaireTribal,
    ("Anneau", "", "", "PompeAPM", False, True, True, True): AnneauPompeAPMAnoblisseurElementaireTribal,
    ("Armure", "", "", "PompeAPM", False, True, True, True): ArmurePompeAPMAnoblisseurElementaireTribal,
    ("Heaume", "", "", "PompeAPM", False, True, True, True): HeaumePompeAPMAnoblisseurElementaireTribal,
    ("Anneau", "Plafond", "", "PompeAPM", False, True, True, True): AnneauDefensifPlafondPompeAPMAnoblisseurElementaireTribal,
    ("Armure", "Plafond", "", "PompeAPM", False, True, True, True): ArmureDefensifPlafondPompeAPMAnoblisseurElementaireTribal,
    ("Heaume", "Plafond", "", "PompeAPM", False, True, True, True): HeaumeDefensifPlafondPompeAPMAnoblisseurElementaireTribal,
    ("Anneau", "Proportion", "", "PompeAPM", False, True, True, True): AnneauDefensifProportionPompeAPMAnoblisseurElementaireTribal,
    ("Armure", "Proportion", "", "PompeAPM", False, True, True, True): ArmureDefensifProportionPompeAPMAnoblisseurElementaireTribal,
    ("Heaume", "Proportion", "", "PompeAPM", False, True, True, True): HeaumeDefensifProportionPompeAPMAnoblisseurElementaireTribal,
    ("Anneau", "Seuil", "", "PompeAPM", False, True, True, True): AnneauDefensifSeuilPompeAPMAnoblisseurElementaireTribal,
    ("Armure", "Seuil", "", "PompeAPM", False, True, True, True): ArmureDefensifSeuilPompeAPMAnoblisseurElementaireTribal,
    ("Heaume", "Seuil", "", "PompeAPM", False, True, True, True): HeaumeDefensifSeuilPompeAPMAnoblisseurElementaireTribal,
    ("Anneau", "Valeur", "", "PompeAPM", False, True, True, True): AnneauDefensifValeurPompeAPMAnoblisseurElementaireTribal,
    ("Armure", "Valeur", "", "PompeAPM", False, True, True, True): ArmureDefensifValeurPompeAPMAnoblisseurElementaireTribal,
    ("Heaume", "Valeur", "", "PompeAPM", False, True, True, True): HeaumeDefensifValeurPompeAPMAnoblisseurElementaireTribal,
    ("Anneau", "", "PompeAPV", "PompeAPM", False, True, True, True): AnneauPompeAPVPompeAPMAnoblisseurElementaireTribal,
    ("Armure", "", "PompeAPV", "PompeAPM", False, True, True, True): ArmurePompeAPVPompeAPMAnoblisseurElementaireTribal,
    ("Heaume", "", "PompeAPV", "PompeAPM", False, True, True, True): HeaumePompeAPVPompeAPMAnoblisseurElementaireTribal,
    ("Anneau", "Plafond", "PompeAPV", "PompeAPM", False, True, True, True): AnneauDefensifPlafondPompeAPVPompeAPMAnoblisseurElementaireTribal,
    ("Armure", "Plafond", "PompeAPV", "PompeAPM", False, True, True, True): ArmureDefensifPlafondPompeAPVPompeAPMAnoblisseurElementaireTribal,
    ("Heaume", "Plafond", "PompeAPV", "PompeAPM", False, True, True, True): HeaumeDefensifPlafondPompeAPVPompeAPMAnoblisseurElementaireTribal,
    ("Anneau", "Proportion", "PompeAPV", "PompeAPM", False, True, True, True): AnneauDefensifProportionPompeAPVPompeAPMAnoblisseurElementaireTribal,
    ("Armure", "Proportion", "PompeAPV", "PompeAPM", False, True, True, True): ArmureDefensifProportionPompeAPVPompeAPMAnoblisseurElementaireTribal,
    ("Heaume", "Proportion", "PompeAPV", "PompeAPM", False, True, True, True): HeaumeDefensifProportionPompeAPVPompeAPMAnoblisseurElementaireTribal,
    ("Anneau", "Seuil", "PompeAPV", "PompeAPM", False, True, True, True): AnneauDefensifSeuilPompeAPVPompeAPMAnoblisseurElementaireTribal,
    ("Armure", "Seuil", "PompeAPV", "PompeAPM", False, True, True, True): ArmureDefensifSeuilPompeAPVPompeAPMAnoblisseurElementaireTribal,
    ("Heaume", "Seuil", "PompeAPV", "PompeAPM", False, True, True, True): HeaumeDefensifSeuilPompeAPVPompeAPMAnoblisseurElementaireTribal,
    ("Anneau", "Valeur", "PompeAPV", "PompeAPM", False, True, True, True): AnneauDefensifValeurPompeAPVPompeAPMAnoblisseurElementaireTribal,
    ("Armure", "Valeur", "PompeAPV", "PompeAPM", False, True, True, True): ArmureDefensifValeurPompeAPVPompeAPMAnoblisseurElementaireTribal,
    ("Heaume", "Valeur", "PompeAPV", "PompeAPM", False, True, True, True): HeaumeDefensifValeurPompeAPVPompeAPMAnoblisseurElementaireTribal,
    ("Anneau", "", "RenforceRegenPV", "PompeAPM", False, True, True, True): AnneauRenforceRegenPVPompeAPMAnoblisseurElementaireTribal,
    ("Armure", "", "RenforceRegenPV", "PompeAPM", False, True, True, True): ArmureRenforceRegenPVPompeAPMAnoblisseurElementaireTribal,
    ("Heaume", "", "RenforceRegenPV", "PompeAPM", False, True, True, True): HeaumeRenforceRegenPVPompeAPMAnoblisseurElementaireTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "PompeAPM", False, True, True, True): AnneauDefensifPlafondRenforceRegenPVPompeAPMAnoblisseurElementaireTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "PompeAPM", False, True, True, True): ArmureDefensifPlafondRenforceRegenPVPompeAPMAnoblisseurElementaireTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "PompeAPM", False, True, True, True): HeaumeDefensifPlafondRenforceRegenPVPompeAPMAnoblisseurElementaireTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "PompeAPM", False, True, True, True): AnneauDefensifProportionRenforceRegenPVPompeAPMAnoblisseurElementaireTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "PompeAPM", False, True, True, True): ArmureDefensifProportionRenforceRegenPVPompeAPMAnoblisseurElementaireTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "PompeAPM", False, True, True, True): HeaumeDefensifProportionRenforceRegenPVPompeAPMAnoblisseurElementaireTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "PompeAPM", False, True, True, True): AnneauDefensifSeuilRenforceRegenPVPompeAPMAnoblisseurElementaireTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "PompeAPM", False, True, True, True): ArmureDefensifSeuilRenforceRegenPVPompeAPMAnoblisseurElementaireTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "PompeAPM", False, True, True, True): HeaumeDefensifSeuilRenforceRegenPVPompeAPMAnoblisseurElementaireTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "PompeAPM", False, True, True, True): AnneauDefensifValeurRenforceRegenPVPompeAPMAnoblisseurElementaireTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "PompeAPM", False, True, True, True): ArmureDefensifValeurRenforceRegenPVPompeAPMAnoblisseurElementaireTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "PompeAPM", False, True, True, True): HeaumeDefensifValeurRenforceRegenPVPompeAPMAnoblisseurElementaireTribal,
    ("Anneau", "", "", "RenforceRegenPM", False, True, True, True): AnneauRenforceRegenPMAnoblisseurElementaireTribal,
    ("Armure", "", "", "RenforceRegenPM", False, True, True, True): ArmureRenforceRegenPMAnoblisseurElementaireTribal,
    ("Heaume", "", "", "RenforceRegenPM", False, True, True, True): HeaumeRenforceRegenPMAnoblisseurElementaireTribal,
    ("Anneau", "Plafond", "", "RenforceRegenPM", False, True, True, True): AnneauDefensifPlafondRenforceRegenPMAnoblisseurElementaireTribal,
    ("Armure", "Plafond", "", "RenforceRegenPM", False, True, True, True): ArmureDefensifPlafondRenforceRegenPMAnoblisseurElementaireTribal,
    ("Heaume", "Plafond", "", "RenforceRegenPM", False, True, True, True): HeaumeDefensifPlafondRenforceRegenPMAnoblisseurElementaireTribal,
    ("Anneau", "Proportion", "", "RenforceRegenPM", False, True, True, True): AnneauDefensifProportionRenforceRegenPMAnoblisseurElementaireTribal,
    ("Armure", "Proportion", "", "RenforceRegenPM", False, True, True, True): ArmureDefensifProportionRenforceRegenPMAnoblisseurElementaireTribal,
    ("Heaume", "Proportion", "", "RenforceRegenPM", False, True, True, True): HeaumeDefensifProportionRenforceRegenPMAnoblisseurElementaireTribal,
    ("Anneau", "Seuil", "", "RenforceRegenPM", False, True, True, True): AnneauDefensifSeuilRenforceRegenPMAnoblisseurElementaireTribal,
    ("Armure", "Seuil", "", "RenforceRegenPM", False, True, True, True): ArmureDefensifSeuilRenforceRegenPMAnoblisseurElementaireTribal,
    ("Heaume", "Seuil", "", "RenforceRegenPM", False, True, True, True): HeaumeDefensifSeuilRenforceRegenPMAnoblisseurElementaireTribal,
    ("Anneau", "Valeur", "", "RenforceRegenPM", False, True, True, True): AnneauDefensifValeurRenforceRegenPMAnoblisseurElementaireTribal,
    ("Armure", "Valeur", "", "RenforceRegenPM", False, True, True, True): ArmureDefensifValeurRenforceRegenPMAnoblisseurElementaireTribal,
    ("Heaume", "Valeur", "", "RenforceRegenPM", False, True, True, True): HeaumeDefensifValeurRenforceRegenPMAnoblisseurElementaireTribal,
    ("Anneau", "", "PompeAPV", "RenforceRegenPM", False, True, True, True): AnneauPompeAPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Armure", "", "PompeAPV", "RenforceRegenPM", False, True, True, True): ArmurePompeAPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Heaume", "", "PompeAPV", "RenforceRegenPM", False, True, True, True): HeaumePompeAPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Anneau", "Plafond", "PompeAPV", "RenforceRegenPM", False, True, True, True): AnneauDefensifPlafondPompeAPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Armure", "Plafond", "PompeAPV", "RenforceRegenPM", False, True, True, True): ArmureDefensifPlafondPompeAPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Heaume", "Plafond", "PompeAPV", "RenforceRegenPM", False, True, True, True): HeaumeDefensifPlafondPompeAPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Anneau", "Proportion", "PompeAPV", "RenforceRegenPM", False, True, True, True): AnneauDefensifProportionPompeAPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Armure", "Proportion", "PompeAPV", "RenforceRegenPM", False, True, True, True): ArmureDefensifProportionPompeAPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Heaume", "Proportion", "PompeAPV", "RenforceRegenPM", False, True, True, True): HeaumeDefensifProportionPompeAPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Anneau", "Seuil", "PompeAPV", "RenforceRegenPM", False, True, True, True): AnneauDefensifSeuilPompeAPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Armure", "Seuil", "PompeAPV", "RenforceRegenPM", False, True, True, True): ArmureDefensifSeuilPompeAPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Heaume", "Seuil", "PompeAPV", "RenforceRegenPM", False, True, True, True): HeaumeDefensifSeuilPompeAPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Anneau", "Valeur", "PompeAPV", "RenforceRegenPM", False, True, True, True): AnneauDefensifValeurPompeAPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Armure", "Valeur", "PompeAPV", "RenforceRegenPM", False, True, True, True): ArmureDefensifValeurPompeAPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Heaume", "Valeur", "PompeAPV", "RenforceRegenPM", False, True, True, True): HeaumeDefensifValeurPompeAPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Anneau", "", "RenforceRegenPV", "RenforceRegenPM", False, True, True, True): AnneauRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Armure", "", "RenforceRegenPV", "RenforceRegenPM", False, True, True, True): ArmureRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Heaume", "", "RenforceRegenPV", "RenforceRegenPM", False, True, True, True): HeaumeRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, True, True, True): AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, True, True, True): ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "RenforceRegenPM", False, True, True, True): HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, True, True, True): AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, True, True, True): ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "RenforceRegenPM", False, True, True, True): HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, True, True, True): AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, True, True, True): ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "RenforceRegenPM", False, True, True, True): HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, True, True, True): AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, True, True, True): ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "RenforceRegenPM", False, True, True, True): HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAnoblisseurElementaireTribal,
    ("Anneau", "", "", "", True, True, True, True): AnneauAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "", "", "", True, True, True, True): ArmureAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "", "", "", True, True, True, True): HeaumeAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Plafond", "", "", True, True, True, True): AnneauDefensifPlafondAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Plafond", "", "", True, True, True, True): ArmureDefensifPlafondAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Plafond", "", "", True, True, True, True): HeaumeDefensifPlafondAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Proportion", "", "", True, True, True, True): AnneauDefensifProportionAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Proportion", "", "", True, True, True, True): ArmureDefensifProportionAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Proportion", "", "", True, True, True, True): HeaumeDefensifProportionAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Seuil", "", "", True, True, True, True): AnneauDefensifSeuilAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Seuil", "", "", True, True, True, True): ArmureDefensifSeuilAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Seuil", "", "", True, True, True, True): HeaumeDefensifSeuilAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Valeur", "", "", True, True, True, True): AnneauDefensifValeurAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Valeur", "", "", True, True, True, True): ArmureDefensifValeurAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Valeur", "", "", True, True, True, True): HeaumeDefensifValeurAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "", "PompeAPV", "", True, True, True, True): AnneauPompeAPVAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "", "PompeAPV", "", True, True, True, True): ArmurePompeAPVAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "", "PompeAPV", "", True, True, True, True): HeaumePompeAPVAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Plafond", "PompeAPV", "", True, True, True, True): AnneauDefensifPlafondPompeAPVAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Plafond", "PompeAPV", "", True, True, True, True): ArmureDefensifPlafondPompeAPVAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Plafond", "PompeAPV", "", True, True, True, True): HeaumeDefensifPlafondPompeAPVAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Proportion", "PompeAPV", "", True, True, True, True): AnneauDefensifProportionPompeAPVAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Proportion", "PompeAPV", "", True, True, True, True): ArmureDefensifProportionPompeAPVAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Proportion", "PompeAPV", "", True, True, True, True): HeaumeDefensifProportionPompeAPVAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Seuil", "PompeAPV", "", True, True, True, True): AnneauDefensifSeuilPompeAPVAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Seuil", "PompeAPV", "", True, True, True, True): ArmureDefensifSeuilPompeAPVAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Seuil", "PompeAPV", "", True, True, True, True): HeaumeDefensifSeuilPompeAPVAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Valeur", "PompeAPV", "", True, True, True, True): AnneauDefensifValeurPompeAPVAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Valeur", "PompeAPV", "", True, True, True, True): ArmureDefensifValeurPompeAPVAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Valeur", "PompeAPV", "", True, True, True, True): HeaumeDefensifValeurPompeAPVAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "", "RenforceRegenPV", "", True, True, True, True): AnneauRenforceRegenPVAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "", "RenforceRegenPV", "", True, True, True, True): ArmureRenforceRegenPVAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "", "RenforceRegenPV", "", True, True, True, True): HeaumeRenforceRegenPVAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "", True, True, True, True): AnneauDefensifPlafondRenforceRegenPVAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "", True, True, True, True): ArmureDefensifPlafondRenforceRegenPVAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "", True, True, True, True): HeaumeDefensifPlafondRenforceRegenPVAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "", True, True, True, True): AnneauDefensifProportionRenforceRegenPVAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "", True, True, True, True): ArmureDefensifProportionRenforceRegenPVAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "", True, True, True, True): HeaumeDefensifProportionRenforceRegenPVAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "", True, True, True, True): AnneauDefensifSeuilRenforceRegenPVAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "", True, True, True, True): ArmureDefensifSeuilRenforceRegenPVAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "", True, True, True, True): HeaumeDefensifSeuilRenforceRegenPVAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "", True, True, True, True): AnneauDefensifValeurRenforceRegenPVAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "", True, True, True, True): ArmureDefensifValeurRenforceRegenPVAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "", True, True, True, True): HeaumeDefensifValeurRenforceRegenPVAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "", "", "PompeAPM", True, True, True, True): AnneauPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "", "", "PompeAPM", True, True, True, True): ArmurePompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "", "", "PompeAPM", True, True, True, True): HeaumePompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Plafond", "", "PompeAPM", True, True, True, True): AnneauDefensifPlafondPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Plafond", "", "PompeAPM", True, True, True, True): ArmureDefensifPlafondPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Plafond", "", "PompeAPM", True, True, True, True): HeaumeDefensifPlafondPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Proportion", "", "PompeAPM", True, True, True, True): AnneauDefensifProportionPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Proportion", "", "PompeAPM", True, True, True, True): ArmureDefensifProportionPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Proportion", "", "PompeAPM", True, True, True, True): HeaumeDefensifProportionPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Seuil", "", "PompeAPM", True, True, True, True): AnneauDefensifSeuilPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Seuil", "", "PompeAPM", True, True, True, True): ArmureDefensifSeuilPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Seuil", "", "PompeAPM", True, True, True, True): HeaumeDefensifSeuilPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Valeur", "", "PompeAPM", True, True, True, True): AnneauDefensifValeurPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Valeur", "", "PompeAPM", True, True, True, True): ArmureDefensifValeurPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Valeur", "", "PompeAPM", True, True, True, True): HeaumeDefensifValeurPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "", "PompeAPV", "PompeAPM", True, True, True, True): AnneauPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "", "PompeAPV", "PompeAPM", True, True, True, True): ArmurePompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "", "PompeAPV", "PompeAPM", True, True, True, True): HeaumePompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Plafond", "PompeAPV", "PompeAPM", True, True, True, True): AnneauDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Plafond", "PompeAPV", "PompeAPM", True, True, True, True): ArmureDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Plafond", "PompeAPV", "PompeAPM", True, True, True, True): HeaumeDefensifPlafondPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Proportion", "PompeAPV", "PompeAPM", True, True, True, True): AnneauDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Proportion", "PompeAPV", "PompeAPM", True, True, True, True): ArmureDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Proportion", "PompeAPV", "PompeAPM", True, True, True, True): HeaumeDefensifProportionPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Seuil", "PompeAPV", "PompeAPM", True, True, True, True): AnneauDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Seuil", "PompeAPV", "PompeAPM", True, True, True, True): ArmureDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Seuil", "PompeAPV", "PompeAPM", True, True, True, True): HeaumeDefensifSeuilPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Valeur", "PompeAPV", "PompeAPM", True, True, True, True): AnneauDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Valeur", "PompeAPV", "PompeAPM", True, True, True, True): ArmureDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Valeur", "PompeAPV", "PompeAPM", True, True, True, True): HeaumeDefensifValeurPompeAPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "", "RenforceRegenPV", "PompeAPM", True, True, True, True): AnneauRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "", "RenforceRegenPV", "PompeAPM", True, True, True, True): ArmureRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "", "RenforceRegenPV", "PompeAPM", True, True, True, True): HeaumeRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "PompeAPM", True, True, True, True): AnneauDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "PompeAPM", True, True, True, True): ArmureDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "PompeAPM", True, True, True, True): HeaumeDefensifPlafondRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "PompeAPM", True, True, True, True): AnneauDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "PompeAPM", True, True, True, True): ArmureDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "PompeAPM", True, True, True, True): HeaumeDefensifProportionRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "PompeAPM", True, True, True, True): AnneauDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "PompeAPM", True, True, True, True): ArmureDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "PompeAPM", True, True, True, True): HeaumeDefensifSeuilRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "PompeAPM", True, True, True, True): AnneauDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "PompeAPM", True, True, True, True): ArmureDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Valeur", "RenforceRegenPV", "PompeAPM", True, True, True, True): HeaumeDefensifValeurRenforceRegenPVPompeAPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "", "", "RenforceRegenPM", True, True, True, True): AnneauRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "", "", "RenforceRegenPM", True, True, True, True): ArmureRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "", "", "RenforceRegenPM", True, True, True, True): HeaumeRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Plafond", "", "RenforceRegenPM", True, True, True, True): AnneauDefensifPlafondRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Plafond", "", "RenforceRegenPM", True, True, True, True): ArmureDefensifPlafondRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Plafond", "", "RenforceRegenPM", True, True, True, True): HeaumeDefensifPlafondRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Proportion", "", "RenforceRegenPM", True, True, True, True): AnneauDefensifProportionRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Proportion", "", "RenforceRegenPM", True, True, True, True): ArmureDefensifProportionRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Proportion", "", "RenforceRegenPM", True, True, True, True): HeaumeDefensifProportionRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Seuil", "", "RenforceRegenPM", True, True, True, True): AnneauDefensifSeuilRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Seuil", "", "RenforceRegenPM", True, True, True, True): ArmureDefensifSeuilRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Seuil", "", "RenforceRegenPM", True, True, True, True): HeaumeDefensifSeuilRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Valeur", "", "RenforceRegenPM", True, True, True, True): AnneauDefensifValeurRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Valeur", "", "RenforceRegenPM", True, True, True, True): ArmureDefensifValeurRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Valeur", "", "RenforceRegenPM", True, True, True, True): HeaumeDefensifValeurRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "", "PompeAPV", "RenforceRegenPM", True, True, True, True): AnneauPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "", "PompeAPV", "RenforceRegenPM", True, True, True, True): ArmurePompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "", "PompeAPV", "RenforceRegenPM", True, True, True, True): HeaumePompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Plafond", "PompeAPV", "RenforceRegenPM", True, True, True, True): AnneauDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Plafond", "PompeAPV", "RenforceRegenPM", True, True, True, True): ArmureDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Plafond", "PompeAPV", "RenforceRegenPM", True, True, True, True): HeaumeDefensifPlafondPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Proportion", "PompeAPV", "RenforceRegenPM", True, True, True, True): AnneauDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Proportion", "PompeAPV", "RenforceRegenPM", True, True, True, True): ArmureDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Proportion", "PompeAPV", "RenforceRegenPM", True, True, True, True): HeaumeDefensifProportionPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Seuil", "PompeAPV", "RenforceRegenPM", True, True, True, True): AnneauDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Seuil", "PompeAPV", "RenforceRegenPM", True, True, True, True): ArmureDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Seuil", "PompeAPV", "RenforceRegenPM", True, True, True, True): HeaumeDefensifSeuilPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Valeur", "PompeAPV", "RenforceRegenPM", True, True, True, True): AnneauDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Valeur", "PompeAPV", "RenforceRegenPM", True, True, True, True): ArmureDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Valeur", "PompeAPV", "RenforceRegenPM", True, True, True, True): HeaumeDefensifValeurPompeAPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "", "RenforceRegenPV", "RenforceRegenPM", True, True, True, True): AnneauRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "", "RenforceRegenPV", "RenforceRegenPM", True, True, True, True): ArmureRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "", "RenforceRegenPV", "RenforceRegenPM", True, True, True, True): HeaumeRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, True, True, True): AnneauDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, True, True, True): ArmureDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Plafond", "RenforceRegenPV", "RenforceRegenPM", True, True, True, True): HeaumeDefensifPlafondRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, True, True, True): AnneauDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, True, True, True): ArmureDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Proportion", "RenforceRegenPV", "RenforceRegenPM", True, True, True, True): HeaumeDefensifProportionRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, True, True, True): AnneauDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, True, True, True): ArmureDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Heaume", "Seuil", "RenforceRegenPV", "RenforceRegenPM", True, True, True, True): HeaumeDefensifSeuilRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Anneau", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, True, True, True): AnneauDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
    ("Armure", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, True, True, True): ArmureDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
("Heaume", "Valeur", "RenforceRegenPV", "RenforceRegenPM", True, True, True, True): HeaumeDefensifValeurRenforceRegenPVRenforceRegenPMAccelerateurAnoblisseurElementaireTribal,
}
"""
(type_equippement, defensif, pv, pm, accelerateur, anoblisseur, elementaire, tribal) -> classe correspondante
"""
